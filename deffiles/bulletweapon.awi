#include "gadget.h"

void GenerateUI( asset Asset )
{
	Asset.AddEntry_Combo( "configstringFileType", "WEAPONFILE" ).Show( false );
	Asset.AddEntry_Float( "adsTransBlendTime", 0.1, 0, 5 ).Show( false );
	Asset.AddEntry_Int( "twoHanded", 1, 0, 1 ).Show( false );
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Misc 

	Asset.BeginCategory( "Misc" );
	{
		Asset.AddEntry_String( "displayName", "" ).SetTitle( "Display Name" ).SetHints( "NOWARNINGS" ).SetToolTip( "Localization alias for weapon name displayed on HUD in game." );
		Asset.AddEntry_String( "fictionname", "" ).SetTitle( "In-Game Name" ).SetToolTip( "Actual in-game weapon name." );
		Asset.AddEntry_String( "modeName", "" ).SetTitle( "Mode Name" ).SetToolTip( "Localization alias for selective fire mode text displayed on HUD in game." );
		Asset.AddEntry_String( "parentWeaponName", "" ).SetTitle( "Stat Name" ).SetToolTip( "Name of parent weapon for weapon stats e.g. parent weapons for dogs_bite_mp is dogs_mp." );
		Asset.AddEntry_String( "attachmentUnique", "" ).SetTitle( "Attachment Unique Base" ).SetToolTip( "Base name of the attachment unique to load when parsing the attachment uniques." );
		Asset.AddEntry_Combo( "playerAnimType", "default | none | other | sniper | rocketlauncher | radio | dualwield | minigun | armminigun | rearclip | handleclip | rearclipsniper | beltfed | g11 | nopump | brawler | riotshield | singleknife | turned | screecher | sword | armblade | onehanded | spikelauncher | hold | club" ).SetTitle( "Player Anim Type" ).SetToolTip( "Select an Player Anim Type - specifies 'playerAnimType' in playeranim.script" );
		Asset.AddEntry_String( "DualWieldWeapon", "" ).SetTitle( "Dual Wield Weapon Name" ).SetToolTip( "Weapon that is dual wielded with this one." );
		Asset.AddEntry_String( "AIOverlayDescription", "" ).SetTitle( "AI Description" ).SetToolTip( "Localization alias for text shown when crosshair is placed over a friendly. Eg. Rifleman, Submachine Gunner, etc." );
		Asset.AddEntry_Combo( "inventoryType", "primary | offhand | item | altmode | gadget | hero" ).SetTitle( "Inventory" ).SetToolTip( "Select what sort of inventory this weapon is." );
		Asset.AddEntry_Combo( "weaponType", "bullet | binoculars | riotshield | melee" ).SetTitle( "Type" ).SetToolTip( "Select a weapon type." );
		Asset.AddEntry_Combo( "weaponClass", "rifle | mg | smg | pistol | item | spread | Killstreak Alt Stored Weapon | melee | pistol spread | ball" ).SetTitle( "Class" ).SetToolTip( "Select an appropriate class for this weapon." );		
		Asset.AddEntry_Combo( "penetrateType", "none | small | medium | large" ).SetTitle( "Penetration" ).SetToolTip( "Type of bullet penetration." );
		Asset.AddEntry_Combo( "impactType", "bullet_small | none | bullet_large | bullet_ap | bullet_xtreme | shotgun | grenade_bounce | grenade_explode | rocket_explode | projectile_dud | mortar_shell | tank_shell | blade" ).SetTitle( "Impact Type" ).SetToolTip( "The impact type, used to play impact effects based on surfacetype" );
		Asset.AddEntry_Combo( "offhandSlot", "None | Lethal grenade | Tactical grenade | Equipment | Specific use | Gadget" ).SetTitle( "Offhand Slot" );
		Asset.AddEntry_Combo( "offhandClass", "None | Smoke Grenade | Frag Grenade | Flash Grenade | Gear | Supply Drop Marker | Gadget" ).SetTitle( "Offhand Class" );
		Asset.AddEntry_Combo( "fireType", "Full Auto | Single Shot | Burst | Auto Burst | Minigun | Charge Shot | Charge Shot Burst | Charge Shot Auto Burst | Jetgun | Melee" ).SetTitle( "Fire Type" ).SetToolTip( "Behavior of the weapon when the trigger is held down." );				
		Asset.AddEntry_Combo( "clipType", "bottom | top | left | dp28 | ptrs | lmg" ).SetTitle( "Clip Type" ).SetToolTip( "Determines how the clip gets inserted into the weapon." );
		Asset.AddEntry_AssetCombo( "cacWeaponXCam", "xcam" ).SetTitle( "CAC Weapon XCam" ).SetToolTip( "The XCam that specifies the camera and weapon rotation for the CAC when viewing the full weapon." );
		Asset.AddEntry_AssetCombo( "cacAttachmentsXCam", "xcam" ).SetTitle( "CAC Attachments XCam" ).SetToolTip( "The XCam that specifies the camera and weapon rotation for the CAC when viewing specific attachments on the weapon." );
		Asset.AddEntry_AssetCombo( "weaponIconXCam", "xcam" ).SetTitle( "Weapon Icon Preview XCam" ).SetToolTip( "The Xcam for the main weapon icon preview." );
		Asset.AddEntry_CheckBox( "nonStowedWeapon", false ).SetTitle( "Non Stowed Weapon" ).SetToolTip( "This weapon will not be drawn when it is stowed (basic knife for example)" );
		Asset.AddEntry_CheckBox( "isScavengable", true ).SetTitle( "Is Scavengable" ).SetToolTip( "This weapon can receive additional ammo through the Scavenger system" );
		Asset.AddEntry_CheckBox( "skipBattlechatterKill", false ).SetTitle( "Skip Battlechatter Kill" ).SetToolTip( "This weapon will not 'kill' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipBattlechatterReload", false ).SetTitle( "Skip Battlechatter Reload" ).SetToolTip( "This weapon will not 'reload' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipLowAmmoVox", false ).SetTitle( "skip Low Ammo Vox" ).SetToolTip( "This weapon should skip playing low ammo warning voiceovers" );
		Asset.AddEntry_CheckBox( "isHybridWeapon", false ).SetTitle( "Is Hybrid Weapon" ).SetToolTip( "This weapon is one half of a hybrid pairing" );
		Asset.AddEntry_CheckBox( "firingCancelsSlide", false ).SetTitle( "Firing Cancels Slide" ).SetToolTip( "Slide will get canceled if the trigger is pulled" );
		Asset.AddEntry_CheckBox( "isGameplayWeapon", false ).SetTitle( "Is Gameplay Weapon" ).SetToolTip( "This weapon is a special purpose gameplay weapon, for example the syrette or the briefcase_bomb" );
		Asset.AddEntry_CheckBox( "disableDeploy", false ).SetTitle( "DisableDeploy" ).SetToolTip( "Weapons that normally could be deployed cannot be deployed if this is checked" );
		Asset.AddEntry_Int( "powerLevel", 0, 0, 10000 ).SetTitle( "Power Level" ).SetToolTip( "Power level of the weapon, currently only used to differentiate the 3 levels of the ZOD sword." );
		Asset.AddEntry_CheckBox( "disallowUseAsOffhandMelee", false ).SetTitle( "Disallow Use As Offhand Melee" ).SetToolTip( "If checked, will not become ps->meleeWeapon, so it won't replace the existing offhand melee weapon when given" );
		Asset.AddEntry_CheckBox( "activatesSlam", false ).SetTitle( "Activates Slam" ).SetToolTip( "Firing weapon will trigger the slam movement." );
		Asset.AddEntry_CheckBox( "activatesSlamAsMelee", false ).SetTitle( "Activates Slam From Melee" ).SetToolTip( "The melee button will trigger the slam movement." );
		Asset.AddEntry_CheckBox( "activatesSlamAsPowerMelee", false ).SetTitle( "Activates Slam From Power Melee (Right trigger)" ).SetToolTip( "The right trigger button will trigger the slam movement." );
		Asset.AddEntry_CheckBox( "activatesSlamAsPowerMeleeLeft", false ).SetTitle( "Activates Slam From Power Melee (Left trigger)" ).SetToolTip( "The left trigger button will trigger the slam movement." );
		Asset.AddEntry_CheckBox( "disableSlamInAir", false ).SetTitle( "Disables Slam while airborne" ).SetToolTip( "Disables Slam while airborne." );
		Asset.AddEntry_Float( "slamJumpHeight", 60.0, 0.0, 10000 ).SetTitle( "Slam jump height" ).SetToolTip( "Player's slam jump height." );
		Asset.AddEntry_Float( "slamJumpForwardSpeed", 400.0, 0.0, 10000 ).SetTitle( "Slam jump forward speed" ).SetToolTip( "Player's slam jump forward speed." );
		Asset.AddEntry_Int( "additionalTracesOffset", 0, 0, 60 ).SetTitle( "Additional Traces Offset" ).SetToolTip( "Offset to use for the four corners of the square of additional traces. Meant to allow bullet weapons to behave such that aiming doesn't have to be exactly pixel accurate, and incompatible with multi-shot count weapons." );
		Asset.AddEntry_CheckBox( "isSupplyDropWeapon", false ).SetTitle( "Is Supply Drop Weapon" ).SetToolTip( "This weapon is a supply drop weapon" );
		Asset.AddEntry_Float( "deathCamTime", 0, -1, 10 ).SetStep( 0.05 ).SetTitle( "Death Cam Time" ).SetToolTip( "Controls how long the player should be in the 3p death cam. Less than zero means use the deathAnimDuration, zero means use the default (currently 1.75), and greater than zero means to use this value" );
		Asset.AddEntry_CheckBox( "isSniperWeapon", false ).SetTitle( "Is Sniper Weapon" ).SetToolTip( "This weapon is considered a sniper weapon for various purposes, e.g. disabling sticky aim" );
		Asset.AddEntry_CheckBox( "isNotDroppable", false ).SetTitle( "Is Not Droppable" ).SetToolTip( "This weapon will never be dropped if the player is killed, or swaps weapons" );
		Asset.AddEntry_CheckBox( "meleeIgnoresLightArmor", false ).SetTitle( "Melee Ignores Light Armor" ).SetToolTip( "This weapon will ignore light armor the player has and do damage directly to the player" );
		Asset.AddEntry_CheckBox( "ignoresLightArmor", false ).SetTitle( "Ignores Light Armor" ).SetToolTip( "This weapon will ignore light armor the player has and do damage directly to the player" );
		Asset.AddEntry_CheckBox( "ignoresPowerArmor", false ).SetTitle( "Ignores Power Armor" ).SetToolTip( "This weapon will ignore power armor the player has and do damage directly to the player" );
		Asset.AddEntry_CheckBox( "bDisallowAtMatchStart", false ).SetTitle( "Round Start Delayed" ).SetToolTip( "Dont allow this weapon to be used at round start." );
	}

	// Damage
	
	Asset.BeginCategory( "Damage" );
	{
		Asset.AddEntry_CheckBox( "doNotDamageOwner", false ).SetTitle( "Do Not Damage Owner" ).SetToolTip( "This weapon will not damage the owner" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammo Options

	Asset.BeginCategory( "Ammo Options" );
	{
		Asset.AddEntry_CheckBox( "rifleBullet", true ).SetTitle( "Rifle Bullet" ).SetToolTip( "Uses pistol bullets if not checked. Rifle bullets apply damage to the highest priority hit location (locationdamage.gdt) along the bullet's path, and will go through people. Pistol bullets don't." );
		Asset.AddEntry_CheckBox( "armorPiercing", false ).SetTitle( "Armor Piercing" ).SetHints( "NOWARNINGS" ).SetToolTip( "Does damage to armored targets if checked." );
		Asset.AddEntry_CheckBox( "doGibbing", false ).SetTitle( "Do Gibbing" ).SetToolTip( "This gun will gib enemy if checked" );
		Asset.AddEntry_CheckBox( "doGibbingOnMelee", false ).SetTitle( "Do Gibbing On Melee" ).SetToolTip( "This gun melee will gib enemy if checked" );
		Asset.AddEntry_CheckBox( "doAnnihilate", false ).SetTitle( "Do Annihilate" ).SetToolTip( "This gun will gib and annihilate if checked" );
		Asset.AddEntry_CheckBox( "doBlowback", false ).SetTitle( "Do Blowback" ).SetToolTip( "This will trigger blowback death anims" );
		Asset.AddEntry_Combo( "damageType", "normal | annihilator | bow_partial_charge | bow_full_charge | fireflies | energy_weapon" ).SetTitle( "Damage Type" ).SetToolTip( "Sets a damage type to be used in the playeranim_death.script logic when MOD is not melee or splash" );
		Asset.AddEntry_Float( "maxGibDistance", 1000.0, 0, 20000 ).SetTitle( "Max Gib Distance" );
		Asset.AddEntry_Float( "gibChance", 0.3, 0, 1 ).SetTitle( "Gib Chance" ).SetToolTip( "Chance that lethal damage will produce a gib" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Type Options

	Asset.BeginCategory( "Type Options" );
	{
		Asset.AddEntry_CheckBox( "boltAction", false ).SetTitle( "Bolt Action" ).SetToolTip( "Turn this on for bolt-action weapons only. Animation control." );
		Asset.AddEntry_Int( "shotsBeforeRechamber", 0, 0, 255 ).SetTitle( "Shots Before Rechamber" ).SetToolTip( "Number of shots fired before we play the rechamber animation." );
		Asset.AddEntry_Float( "customFloat0", 0, 0, 1 ).SetTitle( "Rechamber When Firing Stops" ).SetToolTip( "Signifies that rechamber should occur when the player stops firing." );
		Asset.AddEntry_CheckBox( "dualWield", false ).SetTitle( "Dual Wield" ).SetToolTip( "This a dual wield weapon." );
		Asset.AddEntry_CheckBox( "continuousFire", false ).SetTitle( "Continuous Fire" ).SetToolTip( "Enables an in/loop/out set of firing anims for continuous fire weapons (e.g. chainsaw)." );
		Asset.AddEntry_CheckBox( "isCarriedKillstreakWeapon", false ).SetTitle( "isCarriedKillstreakWeapon" ).SetToolTip( "Check if this is a killstreak weapon that the player can equip. (minigun, tv guided missile, etc.)" );
		Asset.AddEntry_CheckBox( "tvguided", false ).SetTitle( "TV Guided" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon is a 'tv-guided' type." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Type Alt Mode Options

	Asset.BeginCategory( "Alt Mode Options" );
	{
		Asset.AddEntry_String( "altWeapon", "" ).SetHints( "NOWARNINGS" ).SetTitle( "Alt Weapon Name" ).SetToolTip( "Weapon to switch to when this weapon's selective fire mode is switched in the game." );
		Asset.AddEntry_CheckBox( "useAltTagFlash", false ).SetTitle( "FX Use Alt Tag Flash" ).SetToolTip( "Use for weapons that need a different location for tag_flash on the world model. (grenade launchers, flamethrower attachment, etc.)" );
		Asset.AddEntry_CheckBox( "altWeaponAdsOnly", false ).SetTitle( "Ads Only Alt Weapon" ).SetToolTip( "Use for weapons that can only be switched while in ADS" );
		Asset.AddEntry_CheckBox( "altWeaponDisableSwitching", false ).SetTitle( "Disable Toggle Weapon Switching" ).SetToolTip( "Does not allow you to switch the alt mode with the toggle weapon button" );
		Asset.AddEntry_CheckBox( "ignoreAttachments", false ).SetTitle( "Ignore Attachments" ).SetToolTip( "Ignores most things on attachments except for attachment models.  Prevents animations and behaviors from being overridden." );
}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Melee Fields

	Asset.BeginCategory( "Melee Fields" );
	{
		Asset.AddEntry_CheckBox( "useAsMelee", false ).SetTitle( "Use As Melee" ).SetToolTip( "This weapon will be used for melee attacks, ensure melee animation fields are filled in this weapon." );
		Asset.AddEntry_CheckBox( "MeleeCanAssassinate", false ).SetTitle( "Can Assassinate" ).SetToolTip( "This weapon can perform Assassination attacks." );
		Asset.AddEntry_CheckBox( "meleeWithLeftHand", false ).SetTitle( "Can Melee With Left Hand" ).SetToolTip( "This weapon can perform a left hand melee attack." );
		Asset.AddEntry_CheckBox( "meleeServerResponse", false ).SetTitle( "Server Response Charge" ).SetToolTip( "Does a server validated melee charge." );
		Asset.AddEntry_CheckBox( "disallowMeleeChargeInAir", false ).SetTitle( "Disallow Melee Charge In Air" ).SetToolTip( "Does not allow melee charging while attacker is in the air." );
		Asset.AddEntry_CheckBox( "disallowMeleeChargeOnPowerMelee", false ).SetTitle( "Disallow Melee Charge On Power Melee" ).SetToolTip( "Disallows the fire on right trigger from performing a melee charge." );
		Asset.AddEntry_CheckBox( "useAsMeleeLunge", false ).SetTitle( "Use As Melee Lunge" ).SetToolTip( "When used as a melee weapon it will attempt to lunge when in range." );
		Asset.AddEntry_CheckBox( "useAsMeleePowerLoop", false ).SetTitle( "Use As Melee Power Loop" ).SetToolTip( "When performing the power melee attack, the looping anims and logic will be used in place of the normal one shot." );
		Asset.AddEntry_CheckBox( "customBool1", false ).SetTitle( "Allow Power Melee Right" ).SetToolTip( "Allow the RT power anim." );
		Asset.AddEntry_Float( "meleeChargeRange", 0.0, 0.0, 1000.0 ).SetTitle( "Melee Charge Range" ).SetToolTip( "Range away from the target melee assist will occur. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "meleeLungeRange", 0.0, 0.0, 1000.0 ).SetTitle( "Melee Lunge Range" ).SetToolTip( "The attacker will lunge for melee from this far away. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "meleeChargeMinRange", 70.0, 0.0, 1000.0 ).SetTitle( "Melee Charge Min Range" ).SetToolTip( "Min range away from the target melee assist will occur. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "chainMeleeRange", 0.0, 0.0, 1000.0 ).SetTitle( "Chain Melee Range" ).SetToolTip( "Radius away from the target that 	a chain melee is allowed to be performed from" );
		Asset.AddEntry_Float( "meleeTime", 0.7, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee" ).SetToolTip( "Rate of fire in seconds per melee attack." );
		Asset.AddEntry_Float( "meleeDelay", 0.25, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee attack actually happening." );
		Asset.AddEntry_Float( "meleeAltAnimTime", 0, 0.0, 10.0 ).SetTitle( "Melee Alt Anim Time" ).SetToolTip( "If a second melee is performed within this time window, the alt melee anim will play, if anim is defined, 0.0 to disable." );
		Asset.AddEntry_Float( "meleePowerTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power" ).SetToolTip( "Rate of fire in seconds per melee power attack (right trigger)." );
		Asset.AddEntry_Float( "meleePowerDelay", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee power attack (right trigger) actually happening." );
		Asset.AddEntry_Float( "meleePowerInTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power In" ).SetToolTip( "Rate of fire in seconds per melee power attack (right trigger)." );
		Asset.AddEntry_Float( "meleePowerLoopTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Loop" ).SetToolTip( "Rate of fire in seconds per melee power attack (right trigger)." );
		Asset.AddEntry_Float( "meleePowerLoopDelay", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Loop Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee power attack (right trigger) actually happening." );
		Asset.AddEntry_Float( "meleePowerOutTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Out" ).SetToolTip( "Rate of fire in seconds per melee power attack (right trigger)." );
		Asset.AddEntry_Float( "meleePowerTimeLeft", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Left" ).SetToolTip( "Rate of fire in seconds per melee power attack (left trigger)." );
		Asset.AddEntry_Float( "meleePowerDelayLeft", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Delay Left" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee power attack (left trigger) actually happening." );
		Asset.AddEntry_Float( "meleeChargeTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeChargeDelay", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee charge attack actually happening." );
		Asset.AddEntry_Float( "meleeChargeTimeAbove", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Above" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeChargeDelayAbove", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Delay Above" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee charge attack actually happening." );
		Asset.AddEntry_Float( "meleeChargeFatalTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Fatal" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeChargeFatalCloseTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Fatal Close" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeChargeMissTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Miss" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge2Time", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 2" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge2FatalTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 2 Fatal" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge2FatalCloseTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 2 Fatal Close" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge2MissTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 2 Miss" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge3Time", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 3" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge3FatalTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 3 Fatal" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge3FatalCloseTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 3 Fatal Close" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeCharge3MissTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge 3 Miss" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeQueueMeleeEarlyTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Queue Melee Early" ).SetToolTip( "Amount in seconds that you would like to allow the melee to be queued before the fire melee animation has finished." );
		Asset.AddEntry_Float( "meleeAssassinationStateTimeTransInTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Assassination State Trans In Time" ).SetToolTip( "Melee Assassination State raise time." );
		Asset.AddEntry_Float( "meleeAssassinationStateTimeTransOutTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Assassination State Trans Out Time" ).SetToolTip( "Melee Assassination State lower time." );
		Asset.AddEntry_Float( "meleeAssassinationStateFOV", 65.0, 0.0, 100.0 ).SetStep( 0.05 ).SetTitle( "Assassination State FOV" ).SetToolTip( "Player FOV while in Melee Assassination State." );
		Asset.AddEntry_Float( "meleeLeftTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Left Time" ).SetToolTip( "Rate of fire in seconds per melee attack." );
		Asset.AddEntry_Float( "meleeLeftChargeTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Left Charge Time" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeLeftChargeFatalTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Left Charge Fatal Time" ).SetToolTip( "Rate of fire in seconds per melee charge attack fatal." );
		Asset.AddEntry_Int( "meleeDamage", 25, 0, 20000 ).SetTitle( "Melee Damage" ).SetToolTip( "Damage per melee hit." );
		Asset.AddEntry_Int( "meleeFromBehindDamage", 150, 0, 20000 ).SetTitle( "Melee From Behind Damage" ).SetToolTip( "Damage when you hit another player from behind.  If less than meleeDamage, meleeDamage will be used." );
		Asset.AddEntry_Int( "meleePowerDamage", 50, 0, 20000 ).SetTitle( "Melee Power Damage" ).SetToolTip( "Damage per power (right trigger) melee hit." );
		Asset.AddEntry_Int( "meleePowerDamageLeft", 50, 0, 20000 ).SetTitle( "Melee Power Damage Left" ).SetToolTip( "Damage per power (left trigger) melee hit." );
		Asset.AddEntry_Int( "meleeMaxChainKills", 0, 0, 100 ).SetTitle( "Melee Max Chain Kills" ).SetToolTip( "The max number of chained kills you can perform with this weapon" );
		Asset.AddEntry_CheckBox( "meleeJuke", false ).SetTitle( "Melee Juke" ).SetToolTip( "Do a juke to start a melee attack." );
		Asset.AddEntry_Int( "meleeJukeTime", 1000, 10, 10000 ).SetTitle( "Melee Juke Time (ms)" ).SetToolTip( "Melee juke time in ms" );
		Asset.AddEntry_Int( "meleeJukeAccelTime", 0, 0, 10000 ).SetTitle( "Melee Juke Acceleration Time (ms)" ).SetToolTip( "Melee juke acceleration time in ms" );
		Asset.AddEntry_Int( "meleeJukeDecelTime", 250, 10, 10000 ).SetTitle( "Melee Juke Deceleration Time (ms)" ).SetToolTip( "Melee juke deceleration time in ms" );
		Asset.AddEntry_Float( "meleeJukeSpeed", 500, 10, 10000 ).SetTitle( "Melee Juke Speed" ).SetToolTip( "Melee juke speed" );
		Asset.AddEntry_CheckBox( "meleeJukeIgnoreActors", false ).SetTitle( "Melee Juke Ignore Actors" ).SetToolTip( "Ignore actor collisions on melee juke." );
		Asset.AddEntry_CheckBox( "meleeJukeGroundOnly", false ).SetTitle( "Melee Juke Ground Only" ).SetToolTip( "Disable melee juke when the player is in the air." );
		Asset.AddEntry_CheckBox( "meleeAmmoJukeOnly", false ).SetTitle( "Melee Ammo For Juke Only" ).SetToolTip( "Only drain ammo on melee jukes." );
		Asset.AddEntry_CheckBox( "cycleMeleeChargeAnims", false ).SetTitle( "Cycle Charge Anims" ).SetToolTip( "Does not reset anim sequence when chain is broken." );
		Asset.AddEntry_CheckBox( "noMeleeHint", false ).SetTitle( "No Melee Hint" ).SetToolTip( "Disables text hints." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reload Options
	
	Asset.BeginCategory( "Reload Options" );
	{
		Asset.AddEntry_CheckBox( "noPartialReload", false ).SetTitle( "No Partial Reload" ).SetToolTip( "When noPartialReload is set for a weapon, it can not be reloaded unless reloadAmmoAdd amount of ammo can be put into the gun. If reloadAmmoAdd is 0, it's treated as the weapon's clip size." );
		Asset.AddEntry_CheckBox( "segmentedReload", false ).SetTitle( "Segmented Reload" ).SetToolTip( "Turn on for weapons that reload X rounds at a time (Lee-Enfield, bolt-action sniper rifles), set reload amounts in Reload Ammo Add and Reload Start Add." );	
		Asset.AddEntry_CheckBox( "rechamberWhileAds", true ).SetTitle( "ADS Rechamber" ).SetToolTip( "Weapon can be rechambered while in ADS." );
		Asset.AddEntry_CheckBox( "noADSAutoReload", false ).SetTitle( "No ADS Auto-Reload" ).SetToolTip( "Disallow auto-reloading while the weapon is in ADS." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Options
	
	Asset.BeginCategory( "ADS Options" );
	{
		Asset.AddEntry_CheckBox( "aimDownSight", false ).SetTitle( "ADS" ).SetToolTip( "Must be turned on for proper viewmodel appearance of a weapon that can be Aimed Down the Sight (ADS)." );
		Asset.AddEntry_CheckBox( "dualRenderADS", false ).SetTitle( "Dual Render ADS" ).SetToolTip( "ADS view is presented without black border as both fov's are rendered simultaneously." );
		Asset.AddEntry_CheckBox( "adsFire", false ).SetTitle( "ADS Fire Only" ).SetToolTip( "Can only be fired ADS.  Firing from the hip brings up ADS." );
		Asset.AddEntry_CheckBox( "noAdsWhenMagEmpty", false ).SetTitle( "No ADS With Empty Magazine" ).SetToolTip( "Disallow ADS when magazine is empty." );
		Asset.AddEntry_CheckBox( "keepCrosshairWhenADS", false ).SetTitle( "keepCrosshairWhenADS" ).SetToolTip( "Keep the crosshairs on-screen when ADS." );
		Asset.AddEntry_CheckBox( "adsOnly", false ).SetTitle( "Only Present ADS" ).SetToolTip( "Operates as if player is continuosly holding ADS button" );
		Asset.AddEntry_CheckBox( "noADSLockOnCheck", false ).SetTitle( "No ADS Lock On Check" ).SetToolTip( "Weapons with this set will not be requied to be ADS to show lockon targets" );
		Asset.AddEntry_CheckBox( "spinMinigunOnADS", false ).SetTitle( "Spin Minigun on ADS" ).SetToolTip( "Weapons with this set will be able to have the minigun start spinning up if you ADS with it" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Miscellaneous Options
	
	Asset.BeginCategory( "Miscellaneous Options" );
	{
		Asset.AddEntry_CheckBox( "canUseUnderWater", true ).SetTitle( "Can Use Under Water" ).SetToolTip( "The weapon can be used under water." );
		Asset.AddEntry_CheckBox( "blocksProne", false ).SetTitle( "Cannot Go Prone" ).SetToolTip( "The player cannot go prone when they have this weapon equiped." );
		Asset.AddEntry_CheckBox( "avoidDropCleanup", false ).SetTitle( "No Auto-Cleanup of Dropped Weapon" ).SetToolTip( "Avoid having dropped weapons of this type deleted to make room for new ones." );
		Asset.AddEntry_CheckBox( "noDropsOrRaises", false ).SetTitle( "No Drops or Raises" ).SetToolTip( "Ignores the drops and raises for this weapon (MP Only)" );
		Asset.AddEntry_CheckBox( "noThirdPersonDropsOrRaises", false ).SetTitle( "NoWeaponSwitches" ).SetToolTip( "No 3rd person Drop or Raise anims." );
		Asset.AddEntry_CheckBox( "noQuickDropWhenEmpty", false ).SetTitle( "noQuickDropWhenEmpty" ).SetToolTip( "Always play the Empty drop." );
		Asset.AddEntry_CheckBox( "laserSight", false ).SetTitle( "Draw Laser Sight" ).SetToolTip( "Draw a laser indicator effect where the weapon is aiming at." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Attachment Perks
	
	Asset.BeginCategory( "Attachment Perks" );
	{
		Asset.AddEntry_CheckBox( "silenced", false ).SetTitle( "Silenced" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon is considered silenced." );
		Asset.AddEntry_CheckBox( "DualMag", false ).SetTitle( "Dual Mag" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon uses dual magazines." );
		Asset.AddEntry_CheckBox( "infraRed", false ).SetTitle( "InfraRed" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon uses Infra-Red vision." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Weapon Perks
	
	Asset.AddEntry_Text( "mods", "" ).SetTitle( "Weapon Perks" ).SetHints( "NOWARNINGS" ).SetToolTip( "specialties that this weapon will have, one per line" ).Show( false );
	
	Asset.BeginCategory( "Weapon Perks" );
	{
		Asset.ShowEntry( "mods" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crosshair Options
	
	Asset.BeginCategory( "Crosshair Options" );
	{
		Asset.AddEntry_Float( "enemyCrosshairRange", 1600, 0.0, 10000 ).SetTitle( "Enemy Crosshair Range" ).SetToolTip( "The range in at which friendly names appear and friendly or enemy changes your crosshair color." );
		Asset.AddEntry_CheckBox( "crosshairColorChange", true ).SetTitle( "Crosshair Color Change" ).SetToolTip( "Change crosshair color if pointing at friendly or enemy" );
		Asset.AddEntry_CheckBox( "noHitMarker", false ).SetTitle( "No Hit Marker" ).SetToolTip( "No hit marker displayed when this box is checked." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Lock On Options
	
	Asset.BeginCategory( "Lock On Options" );
	{
		Asset.AddEntry_CheckBox( "requireLockonToFire", false ).SetTitle( "Require Lock On" ).SetToolTip( "Player cannot fire the weapon until script has granted them a lock-on." );
		Asset.AddEntry_Int( "lockOnSpeed", 0, 0, 10000 ).SetTitle( "Lock On Speed" ).SetToolTip( "Lock on speed in miliseconds." );
		Asset.AddEntry_Int( "lockOnMinRange", 0, 10, 10000 ).SetTitle( "Lock On Min Range" ).SetToolTip( "Min range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRange", 0, 0, 10000 ).SetTitle( "Lock On Max Range" ).SetToolTip( "Max range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRangeNoLineOfSight", 0, 0, 10000 ).SetTitle( "Lock On Max Range No Line of Sight" ).SetToolTip( "Max range for locking on when there is no line of sight" );
		Asset.AddEntry_Int( "lockOnScreenRadius", 25, 0, 10000 ).SetTitle( "Lock On Screen Radius" ).SetToolTip( "Screen size for soft target lockon" );
		Asset.AddEntry_Float( "lockOnRadius", 0, 0, 500 ).SetTitle( "Lock On Radius" ).SetToolTip( "Lock on radius in pixels." );			

		//Asset.AddEntry_Float( "lockOnTimeMultInCover", 1, 1, 10 ).SetTitle( "Lock On Time Multiplier for Cover" ).SetToolTip( "Lock on time multiplier while target is in cover" );
		Asset.AddEntry_Int( "lockOnLostSightPivotTimeout", 2000, 0, 10000 ).SetTitle( "Lock On Loss Timeout" ).SetToolTip( "If the player loses sight of the Pivot Point for this long, the Lock-On is lost" );
		Asset.AddEntry_Int( "lockOnRequiredMsgSuppressAfterFireTime", 0, 0, 10000 ).SetTitle( "Lock On Required Message Suppress After Fire Time" ).SetToolTip( "The window of time in which the lock on required message will not appear after the player fires the weapon (in milliseconds)" );

		Asset.AddEntry_Float( "targetTetherHorzAng", 15, 0, 180 ).SetTitle( "Lock On Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetTetherVertAng", 9, 0, 180 ).SetTitle( "Lock On Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetLostHorzAng", 20, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is immediately lost" );
		Asset.AddEntry_Float( "targetLostVertAng", 15, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is immediately lost" );

		Asset.AddEntry_Path( "reticleLockOn", "" ).SetTitle( "Lock On Reticle" ).SetToolTip( "Lock On Reticle." ).SetRelativePath( "pc/main/" );

		Asset.AddEntry_String( "lockonSeekerSearchSound", "" ).SetTitle( "Seeker Searching Sound" ).SetToolTip( "Seeker search sound" );
		Asset.AddEntry_CheckBox( "lockonSeekerSearchSoundLoops", false ).SetTitle( "Seeker Searching Sound Loops" ).SetToolTip( "Seeker search is looping sound" );
		Asset.AddEntry_String( "lockonSeekerLockedSound", "" ).SetTitle( "Seeker Locked Sound" ).SetToolTip( "Seeker locked sound" );
		Asset.AddEntry_CheckBox( "lockonSeekerLockedSoundLoops", false ).SetTitle( "Seeker Locked Sound Loops" ).SetToolTip( "Seeker lock is looping sound" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Heatseeking specific ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Movement, Sprint, Turning
	
	Asset.BeginCategory( "Movement, Sprint, Turning" );
	{
		Asset.AddEntry_Float( "moveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Move Speed Scale" ).SetToolTip( "When using this weapon, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "adsMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Scale" ).SetToolTip( "When using this weapon and in ADS, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "jumpMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Jump Move Speed Scale" ).SetToolTip( "When using this weapon and jumping, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "firingSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Firing Speed Scale" ).SetToolTip( "When firing this weapon, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "ADS Firing Speed Scale" ).SetToolTip( "When firing this weapon and in ADS, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "sprintFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Sprint Firing Speed Scale" ).SetToolTip( "When firing this weapon and in sprint, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeIn", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time In" ).SetToolTip( "Time to lerp from regular MoveSpeedScale to ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeOut", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time Out" ).SetToolTip( "Time to lerp to regular MoveSpeedScale from ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "sprintDurationScale", 1, 0.0, 5.0 ).SetTitle( "Sprint Duration Scale" ).SetToolTip( "When sprinting with this weapon, sprint duration is multiplied by this amount." );
		Asset.AddEntry_Float( "sprintRestoreDelay", 0.0, 0.0, 2.0 ).SetTitle( "Sprint Restore Delay" ).SetToolTip( "When sprinting with this weapon, returning to sprint after ads or firing is delayed by this amount." );
		Asset.AddEntry_Float( "maxHorTurnSpeed", 0.0, 0.0, 720.0 ).SetTitle( "Yaw Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Float( "maxVertTurnSpeed", 0.0, 0.0, 720.0 ).SetTitle( "Pitch Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Int( "gunMaxPitch", 30, 0, 99 ).SetTitle( "Max Gun Pitch" ).SetToolTip( "Maximum allowed vertical ascent of the viewmodel due to recoil (degrees)." );
		Asset.AddEntry_Int( "gunMaxYaw", 30, 0, 99 ).SetTitle( "Max Gun Yaw" ).SetToolTip( "Maximum allowed horizontal travel of the viewmodel due to recoil (degrees)." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Flamethrower Details ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Aim Assist ( Console Only )
	
	Asset.BeginCategory( "Aim Assist ( Console Only )" );
	{
		Asset.AddEntry_Float( "autoAimRange", 1600, 0, 8000 ).SetTitle( "Auto Aim Range" ).SetToolTip( "(Console only.) The range in world units up to which entering ADS will lock-on to enemies. (1 world unit = 1 inch)" );
		Asset.AddEntry_Float( "aimAssistRange", 3200, 0, 8000 ).SetTitle( "Aim Assist Range" ).SetToolTip( "(Console only.) The range in world units up to which the crosshair will stick to targets. (1 world unit = 1 inch) " );
		Asset.AddEntry_Float( "aimAssistRangeAds", 3200, 0, 8000 ).SetTitle( "Aim Assist Range ADS" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Console only.) The range in world units up to which the crosshair will stick to targets in ADS. (1 world unit = 1 inch)" );
		Asset.AddEntry_Float( "aimAssistRangeMin", 0, 0, 8000 ).SetTitle( "Aim Assist Range Min" ).SetToolTip( "(Console only.) The range in world units past which the crosshair will stick to targets. (1 world unit = 1 inch) " );
		Asset.AddEntry_Float( "aimAssistRangeMinAds", 0, 0, 8000 ).SetTitle( "Aim Assist Range Min ADS" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Console only.) The range in world units past which the crosshair will stick to targets in ADS. (1 world unit = 1 inch)" );
		Asset.AddEntry_Float( "aimAssistAdsDelay", 0, 0, 10 ).SetTitle( "Aim Assist ADS Delay" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Console only.) The time after being fully ADS which aim assist will kick in." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammunition
	
	Asset.BeginCategory( "Ammunition" );
	{
		Asset.AddEntry_Int( "burstCount", 1, 1, 7 ).SetTitle( "Burst Count" ).SetToolTip( "Specifies how many bullets shot by either regular or auto burst fire." );
		Asset.AddEntry_CheckBox( "sharedAmmo", false ).SetTitle( "Shared Ammo" ).SetToolTip( "Sets this gun to use a shared ammo pool" );
		Asset.AddEntry_CheckBox( "unlimitedAmmo", false ).SetTitle("Unlimited Ammo" ).SetToolTip( "This weapon does not use ammo" );
		Asset.AddEntry_String( "ammoName", "" ).SetTitle( "Ammo Name" ).SetToolTip( "Allows different weapons to share the same ammo pool." );
		Asset.AddEntry_String( "ammoDisplayName", "" ).SetTitle( "Ammo Display Name" ).SetToolTip( "Display name for the weapon's ammo." );
		Asset.AddEntry_String( "clipName", "" ).SetTitle( "Clip Name" ).SetToolTip( "Allows different weapons to share clips. Used for weapons that have a selective fire option, and would therefore need to use the same type of clip." );
		Asset.AddEntry_CheckBox( "ammoCountClipRelative", false ).SetTitle( "Ammo Count Clip Relative" ).SetToolTip( "Start, Max, and Drop ammo will be based on clip size.  So a 3 in Max Ammo will be (3 * Clip Size)" );
		Asset.AddEntry_Int( "clipSize", 10, 0, 999 ).SetTitle( "Clip Size" ).SetHints( "NOWARNINGS" ).SetToolTip( "Specifies how many bullets per clip/magazine." );
		Asset.AddEntry_CheckBox( "clipOnly", false ).SetTitle( "Clip Only" ).SetToolTip( "Used for weapons that use clips only" );
		Asset.AddEntry_CheckBox( "dontTakeClipOnlyWeaponIfEmpty", false ).SetTitle( "Don't Take Clip Only Weapon If Empty" ).SetToolTip( "Provides a method of disabling taking of clip only weapons when they are empty." );
		Asset.AddEntry_Int( "maxAmmo", 100, 0, 999 ).SetStep( 10 ).SetTitle( "Max Stock Ammo" ).SetToolTip( "Max stock ammo the player can collect for this weapon, clip isn't reflected in this number. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "startAmmo", 0, 0, 1000 ).SetTitle( "Start Ammo" ).SetToolTip( "How much ammo the player gets when starting with this weapon. One clip/magazine from this amount will be already in the weapon. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "dropAmmoMin", 0, 0, 999 ).SetTitle( "Drop Min" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains at least this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );	
		Asset.AddEntry_Int( "dropAmmoMax", 0, 0, 999 ).SetTitle( "Drop Max" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains no more than this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "dropClipAmmoMin", 0, 0, 1000 ).SetTitle( "Drop Clip Min" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains at least this much ammo in the clip." );
		Asset.AddEntry_Int( "dropClipAmmoMax", 1000, 0, 1000 ).SetTitle( "Drop Clip Max" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains no more than this much ammo in the clip." );
		Asset.AddEntry_Int( "shotCount", 1, 1, 20 ).SetTitle( "Shotgun Shot Count" ).SetToolTip( "Specifies how many chunks per shotgun blast." );
		Asset.AddEntry_Int( "reloadAmmoAdd", 0, 0, 999 ).SetTitle( "Reload Ammo Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add when reloading with some amount of bullets still remaining in the weapon." );	
		Asset.AddEntry_Int( "reloadStartAdd", 0, 0, 999 ).SetTitle( "Reload Start Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add for the first reload segment (ie: when weapon is empty.)" );	
		Asset.AddEntry_Float( "lowAmmoWarningThreshold", 0.33, 0, 1 ).SetStep( 0.1 ).SetTitle( "Clip-Ammo Low Warning %" ).SetToolTip( "The game optionally displays low-ammo warnings when remaining clip ammo goes below this percentage." );
		Asset.AddEntry_CheckBox( "cancelAutoHolsterWhenEmpty", false ).SetTitle( "Do Not Auto-Holster When Empty" ).SetToolTip( "When weapons are empty, they are normally auto-swapped to the next usable weapon in the player's inventory.  This disables that." );
		Asset.AddEntry_CheckBox( "suppressAmmoReserveDisplay", false ).SetTitle( "Hide Display of Reserve Ammo" );

		Asset.AddEntry_CheckBox( "customBool3", false ).SetTitle( "Ammo Regen" ).SetTags("regen");
		Asset.AddEntry_Float( "tankLifeTime", 0.1, 0, 10 ).SetTitle( "Regen Time" ).SetToolTip( "Time it takes to regen one bullet." ).SetTags("regen");
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stack Fire ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Charge Shot	

	Asset.BeginCategory( "Charge Shot" );
	{
		Asset.AddEntry_CheckBox( "chargeShotFireWhenQueueReachesMax", false ).SetTitle( "Charge Shot Fire When Queue Reaches Max" ).SetToolTip( "Whether to fire the charge shot weapon automatically when it reaches max bullet queue" );
		Asset.AddEntry_CheckBox( "chargeShotCancelIfTriggerReleasedBeforeMinTime", false ).SetTitle( "Charge Shot Cancel If Trigger Released Before Min Time" ).SetToolTip( "If the trigger is released before min time is reached, cancel the shot" );
		Asset.AddEntry_Int( "chargeShotMaxLevel", 0, 0, 10 ).SetTitle( "Charge Shot Number Of Levels" ).SetToolTip( "Specifies how many levels exist for the charge shot.  Need one weapon per level. This value should be the same in all the weapons." );
		Asset.AddEntry_Float( "chargeShotMaxTime", 0, 0, 10000 ).SetTitle( "Charge Shot Total Time" ).SetToolTip( "Total time needed to fully charge the shot.  This value should be the same in all the weapons." );
		Asset.AddEntry_Float( "chargeShotMinTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Minimum Charge Shot Time" ).SetToolTip( "Minimum length of the charge shot before it can be fired" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reloadable Fuel Tank ( unused )	
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Overheating
	
	Asset.BeginCategory( "Overheating" );
	{
		Asset.AddEntry_CheckBox( "overheatWeapon", false ).SetTitle( "Overheating Weapon" ).SetToolTip( "This weapon can overheat" );
		Asset.AddEntry_CheckBox( "coolWhileFiring", false ).SetTitle( "Cool While Firing" ).SetToolTip( "This weapon's heat decreases, even when it is being fired" );
		Asset.AddEntry_Float( "overheatRate", 1, 0.1, 100 ).SetTitle( "Overheating Rate" ).SetToolTip( "Percent of heat added per shot for this weapon" );
		Asset.AddEntry_Float( "cooldownRate", 30, 0.1, 100 ).SetTitle( "Cooldown Rate" ).SetToolTip( "Percent of heat that is bled off per second for this weapon" );
		Asset.AddEntry_Float( "overheatEndVal", 25, 0, 99 ).SetTitle( "Overheating Ends At" ).SetToolTip( "Percent of heat at which, if this weapon is overheating, it is able to fire again" );
		Asset.AddEntry_CheckBox( "overheatDial", false ).SetTitle( "Overhead Dial" ).SetToolTip( "Enable overheat dial counter" ).Show( ( Asset.GetEntryValue( "overheatWeapon" ) != "0" ) ? true : false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Auto turret scanning ( unused )
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Tracer
	
	Asset.BeginCategory( "Tracer" );
	{
		Asset.AddEntry_AssetCombo( "tracerType", "tracer" ).SetTitle( "Tracer Type" );
		Asset.AddEntry_AssetCombo( "enemyTracerType", "tracer" ).SetTitle( "Enemy tracer Type" );
		Asset.AddEntry_AssetCombo( "underwaterTracerType", "tracer" ).SetTitle( "Underwater tracer Type" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Laser
	
	Asset.BeginCategory( "Laser" );
	{
		Asset.AddEntry_AssetCombo( "laserType", "laser" ).SetTitle( "Laser Type Viewmodel" );
		Asset.AddEntry_AssetCombo( "laserTypeWorld", "laser" ).SetTitle( "Laser Type World" );
	}


	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Damage
	
	Asset.BeginCategory( "Damage Ranges", 0.7, 0.1, 0.1, "Icon_health.png" ); // HV - Increased max damage from 1k to 10k - 438 / 448
	{
		Asset.AddEntry_Int( "damage", 30, 0, 10000 ).SetTitle( "Damage 1 (MAX)" ).SetToolTip( "Damage per-bullet, applied up to range distance. Damage is constant from 0 to range distance" );
		Asset.AddEntry_Float( "maxDamageRange", 15000, 1, 15000 ).SetStep( 120 ).SetTitle( "Range 1" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "damage2", 0, 0, 10000 ).SetTitle( "Damage 2" ).SetToolTip( "Damage per-bullet, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "damageRange2", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Range 2" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "damage3", 0, 0, 10000 ).SetTitle( "Damage 3" ).SetToolTip( "Damage per-bullet, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "damageRange3", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Range 3" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "damage4", 0, 0, 10000 ).SetTitle( "Damage 4" ).SetToolTip( "Damage per-bullet, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "damageRange4", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Range 4" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "damage5", 0, 0, 10000 ).SetTitle( "Damage 5" ).SetToolTip( "Damage per-bullet, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "damageRange5", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Range 5" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "minDamage", 30, 0, 10000 ).SetTitle( "Damage 6 (MIN)" ).SetToolTip( "Damage per-bullet, applied up to and beyond range distance. Damage is constant past range distance" );
		Asset.AddEntry_Float( "minDamageRange", 16000, 1, 16000 ).SetStep( 120 ).SetTitle( "Range 6" ).SetToolTip( "Range in world units, up to and beyond which the range damage is applied. (1 world unit = 1 inch)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Other Damage
	
	Asset.BeginCategory( "Other Damage", 0.7, 0.1, 0.1, "Icon_health.png" );
	{
		Asset.AddEntry_CheckBox( "damageAlwaysKillsPlayer", false ).SetTitle( "Damage Always Kills Player" ).SetToolTip( "Regardless of what the damage is this will kill the player" );
		Asset.AddEntry_Int( "playerDamage", 30, 0, 10000 ).SetTitle( "AI damage" ).SetToolTip( "Damage done when an AI is shooting the weapon." );
		Asset.AddEntry_CheckBox( "bulletImpactExplode", false ).SetTitle( "Impact Explode" ).SetToolTip( "Bullet explodes on impact" ).UpdateOnChange( true ).GetBool();
		Asset.AddEntry_Int( "explosionRadius", 0, 0, 10000 ).SetStep( 10 ).SetTitle( "Explosion Radius" ).SetToolTip( "Damage radius (1 world unit = 1 inch)" ).Enable( Asset.GetEntryBool( "bulletImpactExplode" ) );
		Asset.AddEntry_Int( "explosionInnerDamage", 0, 0, 10000 ).SetTitle( "Inner Damage" ).SetToolTip( "Damage at center of explosion" ).Enable( Asset.GetEntryBool( "bulletImpactExplode" ) );
		Asset.AddEntry_Int( "explosionOuterDamage", 0, 0, 10000 ).SetTitle( "Outer Damage" ).SetToolTip( "Damage at outside edge of explosion" ).Enable( Asset.GetEntryBool( "bulletImpactExplode" ) );
		Asset.AddEntry_Float( "damageConeAngle", 180, 0, 180 ).SetTitle( "Damage Cone Angle" ).SetToolTip( "The explosion only affects entities within a cone centered around the grenade's forward direction.  This is the angle between the forward direction an the side of the cone (180 is a spherical explosion)." );
		Asset.AddEntry_CheckBox( "destroysEquipment", false ).SetTitle( "Destroys Equipment" ).SetToolTip( "No matter the damage or explosion damage will destroy equipment." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Multishot Damage
	
	Asset.BeginCategory( "Multishot Base Damage Ranges", 0.7, 0.1, 0.1, "Icon_health.png" );
	{
		Asset.AddEntry_Int( "multishotBaseDamage1", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 1 (MAX)" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to range distance. Damage is constant from 0 to range distance" );
		Asset.AddEntry_Float( "multishotBaseDamageRange1", 15000, 1, 15000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 1" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBaseDamage2", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 2" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "multishotBaseDamageRange2", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 2" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBaseDamage3", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 3" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "multishotBaseDamageRange3", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 3" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBaseDamage4", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 4" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "multishotBaseDamageRange4", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 4" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBaseDamage5", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 5" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to range distance. Damage is linear from previous damage range to this damage range." );
		Asset.AddEntry_Float( "multishotBaseDamageRange5", 0, 0, 15000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 5" ).SetToolTip( "Range in world units, up to which range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBaseDamage6", 0, 0, 1000 ).SetTitle( "Multishot Base Damage 6 (MIN)" ).SetToolTip( "Base damage applied when hit with a multishot projectile (shotgun). Applied once no matter how many pellets hit, added to individual shot damage, applied up to and beyond range distance. Damage is constant past range distance" );
		Asset.AddEntry_Float( "multishotBaseDamageRange6", 16000, 1, 16000 ).SetStep( 120 ).SetTitle( "Multishot Base Range 6" ).SetToolTip( "Range in world units, up to and beyond which the range damage is applied. (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "multishotBasePlayerDamage", 0, 0, 10000 ).SetTitle( "AI Multishot Base Damage" ).SetToolTip( "Damage done when an AI is shooting the weapon." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Indicators ( unsued )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Projectile
	Asset.BeginCategory( "Projectile" );
	{
		Asset.AddEntry_String( "projSmokeStartSound", "" ).SetTitle( "Smoke Grenade Start Sound" ).SetToolTip( "The sound the smoke grenade will play when it starts" );
		Asset.AddEntry_String( "projSmokeLoopSound", "" ).SetTitle( "Smoke Grenade Loop Sound" ).SetToolTip( "The sound the smoke grenade will play when it smoking" );
		Asset.AddEntry_String( "projSmokeEndSound", "" ).SetTitle( "Smoke Grenade End Sound" ).SetToolTip( "The sound the smoke grenade will play when it finished" );
	}
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Location Damage
	
	Asset.BeginCategory( "Location Damage", 0.7, 0.1, 0.1, "Icon_health.png" ); // HV - Increased max multiplier from 10 to 50 - 508 / 527
	{
		Asset.AddEntry_Float( "locNone", 1, 0, 50 ).SetStep( 0.1 ).SetTitle( "None" ).SetToolTip( "Unrelated to weapon. Used for damage that's not location based, such as grenades or falling.  Included here for completeness." );
		Asset.AddEntry_Float( "locHelmet", 4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Helmet" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locHead", 4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Head" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locNeck", 5, 0, 50 ).SetStep( 0.1 ).SetTitle( "Neck" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoUpper", 1, 0, 50 ).SetStep( 0.1 ).SetTitle( "Upper Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoMid", 1, 0, 50 ).SetStep( 0.1 ).SetTitle( "Mid Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoLower", 0.9, 0, 50 ).SetStep( 0.1 ).SetTitle( "Lower Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftArmUpper", 0.8, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Upper Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightArmUpper", 0.8, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Upper Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftArmLower", 0.6, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Lower Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightArmLower", 0.6, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Lower Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftHand", 0.4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Hand" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightHand", 0.4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Hand" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftLegUpper", 0.8, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Upper Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightLegUpper", 0.8, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Upper Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftLegLower", 0.6, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Lower Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightLegLower", 0.6, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Lower Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftFoot", 0.4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Left Foot" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightFoot", 0.4, 0, 50 ).SetStep( 0.1 ).SetTitle( "Right Foot" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locGun", 0, 0, 50 ).SetStep( 0.1 ).SetTitle( "Gun" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_CheckBox( "specialPain", false).SetTitle( "Special Pain" ).SetToolTip( "Indicates that damage by this weapon falls into special behavior tree category" );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// State Timers
	
	Asset.BeginCategory( "State Timers" );
	{
		Asset.AddEntry_Float( "introFireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Intro Fire" ).SetToolTip( "Rate of fire in seconds per round during 'intro fire'. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Int( "introFireLength", 0, 0, 200 ).SetTitle( "Intro Fire Rounds" ).SetToolTip( "How many rounds to fire at the 'Intro Fire' rate before reverting to normal fire." );
		Asset.AddEntry_Float( "fireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire" ).SetToolTip( "Rate of fire in seconds per round. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "lastFireTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Last Shot" ).SetToolTip( "Rate of fire in seconds per round for the last bullet. If zero, the standard fire rate is applied. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "fireDelay", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the weapon actually firing." );
		Asset.AddEntry_Float( "holdFireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Hold Fire" ).SetToolTip( "Length of the hold fire (pullback) animation." );
		Asset.AddEntry_Float( "burstFireDelay", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Burst Fire Delay" ).SetToolTip( "Delay in seconds between burst fires.  This is in addition to the fire time from the last shot." );
		Asset.AddEntry_Float( "jamFireTime", 0.05, 0, 10 ).SetStep( 0.05 ).SetTitle( "Jam Fire Time" ).SetToolTip( "Rate of fire in seconds per round that when exceeded causes jamming issues" );
		Asset.AddEntry_Float( "spinUpTime", 1, 0, 10 ).SetTitle( "Spin Up Time" ).SetToolTip( "Time it takes for a minigun weapon to spin up to firing speed from zero." );
		Asset.AddEntry_Float( "spinDownTime", 1, 0, 10 ).SetTitle( "Spin Down Time" ).SetToolTip( "Time it takes for a minigun weapon to spin down to zero from firing speed." );
		Asset.AddEntry_Float( "spinRate", 1, 0, 90 ).SetTitle( "Spin Rate" ).SetToolTip( "Angle in degrees that the minigun spins per frame at full speed" );
		Asset.AddEntry_Float( "slamTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slam" ).SetToolTip( "How long the slam portion of the attack takes" );
		Asset.AddEntry_Float( "reloadTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload" ).SetHints( "NOWARNINGS" ).SetToolTip( "The number of seconds over which the non-empty reload animation will be played.  In segmented reload weapons, this is the animation that loops to give the player ammo." );
		Asset.AddEntry_Float( "reloadEmptyTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "The number of seconds over which the empty reload animation will be played." );
		Asset.AddEntry_Float( "reloadAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Add" ).SetToolTip( "During an partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadQuickTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadQuickEmptyTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Empty"  ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine empty reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadQuickAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Add" ).SetHints( "NOWARNINGS" ).SetToolTip( "During a quick partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadStartAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start Add" ).SetToolTip( "TODO NEEDS EXPLANATION" );
		Asset.AddEntry_Float( "reloadStartTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "reloadEndTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload End" ).SetToolTip( "For a segmented reload weapon, the number of seconds over which the reload end animation will be played." );
		Asset.AddEntry_Float( "reloadEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Add Time" ).SetToolTip( "During an empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadQuickEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Empty Add Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "During a quick empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadSpecialComboTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) The number of seconds over which the non-empty reload animation will be played.  In segmented reload weapons, this is the animation that loops to give the player ammo." );
		Asset.AddEntry_Float( "reloadSpecialComboEmptyTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Empty Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) The number of seconds over which the empty reload animation will be played." );
		Asset.AddEntry_Float( "reloadSpecialComboAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Add" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During an partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickEmptyTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Empty"  ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine empty reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Add" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During a quick partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadSpecialComboEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Empty Add Time" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During an empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Empty Add Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During a quick empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "rechamberTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "rechamberBoltTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber Bolt" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "dropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "raiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "firstRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "First Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Raise" ).SetHints( "NOWARNINGS" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Raise" ).SetHints( "NOWARNINGS" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "chargeSprintInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Charge Sprint In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "chargeSprintLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Charge Sprint Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "chargeSprintOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Charge Sprint Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );		
		Asset.AddEntry_Float( "sprintInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintCombatTime", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Combat Time" ).SetToolTip( "Time it takes to fire from sprint when using sprint fire perk." );
		Asset.AddEntry_Float( "sprintCombatCooldownTime", 1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Combat Cooldown" ).SetToolTip( "Time to remain in sprint combat mode after firing." );
		Asset.AddEntry_Float( "lowReadyInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlInTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlForwardTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Forward" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlBackTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Back" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlRightTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Right" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlLeftTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Left" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlOutFireTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Out Fire" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlOutTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapCancelTime", 0.016, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Cancel" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimFromLandTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Transition From Land Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimIdleLoopTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Idle Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatCooldownTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat Cooldown Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingForwardTime", 1.15, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Forward Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingBackwardTime", 0.95, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Backward Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingLeftTime", 1.05, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Left Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingRightTime", 1.15, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Right Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintInTime", 0.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintLoopTime", 1.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintSurfaceLoopTime", 1.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Surface Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintOutTime", 0.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimToLandTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Transition To Land Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Drop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpCancelTime", 0.016, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Cancel" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castInTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castLoopTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castOutTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castOutHitTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Out Hit Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Time\\Regen Delay" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." ).SetTags("regen");
		Asset.AddEntry_Float( "weaponSwitchCancelTransitionTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Weapon Switch Cancel Transition Time" ).SetToolTip( "Transition time to use in response to a YY weapon switch cancel." );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sprint Movement Settings
	
	Asset.BeginCategory( "Sprint Movement Settings" );
	{
		Asset.AddEntry_Float( "sprintOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "sprintOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "sprintRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "sprintRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintScale", 1, 0.01, 10 ).SetStep( 0.01 ).SetTitle( "MoveSpeed Scale" ).SetToolTip( "A multiplier applied to xy movement of the viewmodel during sprint higher is faster" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// LowReady Movement Settings
	
	Asset.BeginCategory( "LowReady Movement Settings" );
	{
		Asset.AddEntry_Float( "lowReadyOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "lowReadyOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "lowReadyOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "lowReadyRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "lowReadyRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "lowReadyRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Riding Vehicle Settings
	
	Asset.BeginCategory( "Riding Vehicle Settings" );
	{
		Asset.AddEntry_Float( "rideOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player rides a vehicle, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "rideOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "rideRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is riding a vehicle. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "rideRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Dive to Prone Movement Settings
	
	Asset.BeginCategory( "Dive to Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "dtpOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "dtpOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "dtpRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "dtpRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpScale", 1, 0.01, 10 ).SetStep( 0.1 ).SetTitle( "MoveSpeed Scale" ).SetToolTip( "A multiplier applied to xy movement of the viewmodel during dive to prone higher is faster" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Mantle Movement Settings
	
	Asset.BeginCategory( "Mantle Movement Settings" );
	{
		Asset.AddEntry_Float( "mantleOfsF", 0, -300, 300 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleOfsR", 0, -300, 300 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleOfsU", 0, -300, 300 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotP", 0, -300, 300 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotY", 0, -300, 300 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotR", 0, -300, 300 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Player Slide Movement Settings
	
	Asset.BeginCategory( "Player Slide Movement Settings" );
	{
		Asset.AddEntry_Float( "slideOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "slideOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "slideOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "slideRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "slideRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "slideRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Strafe Movement Settings
	
	Asset.BeginCategory( "Strafe Movement Settings" );	
	{
		Asset.AddEntry_Float( "strafeMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is strafing. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "strafeMoveR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is strafing. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "strafeMoveU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is strafing. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "strafeRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is strafing. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "strafeRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is strafing. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "strafeRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is strafing. (+/- for left/right respectively)" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// WallRun Movement Settings
	
	Asset.BeginCategory( "WallRun Movement Settings" );
	{
		Asset.AddEntry_Float( "wallRunOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "wallRunOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "wallRunOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "wallRunRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "wallRunRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "wallRunRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stand Movement Settings
	
	Asset.BeginCategory( "Stand Movement Settings" );
	{
		Asset.AddEntry_Float( "standMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "standMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "standRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "standRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standMoveMinSpeed", 110, 0, 3000 ).SetStep( 1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posMoveRate", 4, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Move Rate" ).SetToolTip( "Controls speed of viewmodel translation while moving in stand and crouch, transitions between stand and crouch, and crouch into prone." );
		Asset.AddEntry_Float( "standRotMinSpeed", 110, 0, 1000 ).SetStep( 0.1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posRotRate", 5, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Rot Rate" ).SetToolTip( "Rotational speed of viewmodel in standing and crouching. If this is set in the prone section, a value should be entered here so that the viewmodel is able to rotate back to normal in crouch and stand." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crouch Movement Settings

	Asset.BeginCategory( "Crouch Movement Settings" );	
	{
		Asset.AddEntry_Float( "duckedMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "duckedMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "duckedRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "duckedRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedOfsF", -2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "duckedOfsR", 2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedOfsU", -0.2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "duckedMoveMinSpeed", 60, 0, 3000 ).SetStep( 1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "duckedRotMinSpeed", 60, 0, 1000 ).SetStep( 1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Prone Movement Settings

	Asset.BeginCategory( "Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "proneMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "proneMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "proneRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "proneRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneOfsF", -6, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "proneOfsR", 3.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneOfsU", 0.8, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "proneMoveMinSpeed", 0, 0, 3000 ).SetStep( 0.1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posProneMoveRate", 10, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Move Rate" ).SetToolTip( "Controls the speed of viewmodel translation while moving in this stance and changing to crouched." );
		Asset.AddEntry_Float( "proneRotMinSpeed", 0, 0, 1000 ).SetStep( 0.1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posProneRotRate", 10, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Rot Rate" ).SetToolTip( "Controls the speed of viewmodel rotation while moving in this stance." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Idle Settings // Check this...
	
	Asset.BeginCategory( "Idle Settings" );
	{
		Asset.AddEntry_Int( "hipIdleAmount", 80, 0, 150 ).SetStep( 0.1 ).SetTitle( "Hip Amount" ).SetToolTip( "Strength of viewmodel wavering motion when in hipfire position." );
		Asset.AddEntry_Int( "adsIdleAmount", 25, 0, 150 ).SetStep( 0.1 ).SetTitle( "ADS Amount" ).SetToolTip( "Strength of range of viewmodel (or sniper rifle overlay) wavering motion when in ADS." );
		Asset.AddEntry_Float( "hipIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "Hip Speed" ).SetToolTip( "How fast the viewmodel wavers in hipfire position within Hip Amount." );
		Asset.AddEntry_Float( "adsIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "ADS Speed" ).SetToolTip( "How fast the viewmodel wavers in ADS within ADS Amount." );
		Asset.AddEntry_Float( "idleSpeedFromFireTransitionTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Idle Speed From Fire Transition Time" ).SetToolTip( "The time it takes to lerp back up to full idle speed after firing, the EF_FIRING flag, is done" );
		Asset.AddEntry_Float( "idleCrouchFactor", 0.5, 0, 1 ).SetStep( 0.01 ).SetTitle( "Crouch Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
		Asset.AddEntry_Float( "idleProneFactor", 0.15, 0, 1 ).SetStep( 0.01 ).SetTitle( "Prone Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// ADS Settings

	Asset.BeginCategory( "ADS Settings" );
	{
		Asset.AddEntry_CheckBox( "adsProneMove", false ).SetTitle( "ADS Prone Move" ).SetToolTip( "This weapon allows moving while prone and ADS" );
		Asset.AddEntry_Float( "adsSpread", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Spread" ).SetToolTip( "Size of bullet spread cone when firing in ADS mode. Bullets will project randomly within the confines of the cone." );
		Asset.AddEntry_Float( "adsAimPitch", 0, -30, 30 ).SetStep( 0.1 ).SetTitle( "Aim Pitch" ).SetToolTip( "Adjusts the pitch of the viewmodel in ADS. Defaults to 0, -6 is perfectly centered." );
		Asset.AddEntry_Float( "adsTransInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Trans In Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "Time it will take to switch from hipfire to ADS." );
		Asset.AddEntry_Float( "adsTransOutTime", 0.6, 0, 10 ).SetStep( 0.05 ).SetTitle( "Trans Out Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "Time it will take to switch from ADS to hipfire." );
		Asset.AddEntry_Float( "adsReloadTransTime", 0.6, 0, 5 ).SetStep( 0.01 ).SetTitle( "Reload Trans Time" ).SetToolTip( "Time it takes once you start the reload to re-enter ADS. (ie: It allows you to finish up reloading while you enter ADS." );
		Asset.AddEntry_Float( "adsCrosshairInFrac", 1, 0, 1 ).SetStep( 0.05 ).SetTitle( "Crosshair In Frac" ).SetToolTip( "Fraction of the hipfire-to-ADS transition time over which the crosshair disappears." );
		Asset.AddEntry_Float( "adsCrosshairOutFrac", 0.2, 0, 1 ).SetStep( 0.05 ).SetTitle( "Crosshair Out Frac" ).SetToolTip( "Fraction of the ADS-to-hipfire transition time over which the crosshair appears." );

		Asset.AddEntry_Float( "adsFlinchScalar", 1, 0.01, 10 ).SetTitle( "ADS Flinch Scalar" ).SetToolTip( "Scalar to the Damage Flinch that is applied when in ADS." );
		Asset.AddEntry_Float( "adsFiringFlinchScalar", 1, 0.01, 10 ).SetTitle( "ADS Firing Flinch Scalar" ).SetToolTip( "Scalar to the Damage Flinch that is applied when in ADS and firing." );
		Asset.AddEntry_Float( "adsTurnRateScalar", 1, 0.01, 10 ).SetTitle( "ADS Turn Rate Scalar" ).SetToolTip( "Scalar to turn rate that is applied when in ADS." );
		Asset.AddEntry_Float( "adsWallRunBobScalar", 1, 0.01, 10 ).SetTitle( "ADS Wall Run Bob Scalar" ).SetToolTip( "Scalar to wall run bob that is applied when in ADS." );

		Asset.AddEntry_Float( "adsAdditiveFallScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Fall Scalar" ).SetToolTip( "Scalar to additive fall anim that is applied when in ADS." );
		Asset.AddEntry_Float( "adsAdditiveJumpScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Jump Scalar" ).SetToolTip( "Scalar to additive jump anim that is applied when in ADS." );
		Asset.AddEntry_Float( "adsAdditiveJumpLandScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Jump Land Scalar" ).SetToolTip( "Scalar to additive jump land anim that is applied when in ADS." );

		Asset.AddEntry_Float( "adsZoom1_focalLength", 20, 15, 600 ).SetTitle( "High Zoom Focal Length" ).SetToolTip( "High Zoom Focal length when in ADS." );
		Asset.AddEntry_Float( "adsZoom2_focalLength", 20, 15, 600 ).SetTitle( "Med Zoom Focal Length" ).SetToolTip( "Med Zoom Focal length when in ADS." );
		Asset.AddEntry_Float( "adsZoom3_focalLength", 20, 15, 600 ).SetTitle( "Low Zoom Focal Length" ).SetToolTip( "Low Zoom Focal length when in ADS." );

		Asset.AddEntry_Float( "adsZoom1_fStop", 24, 1.2, 120 ).SetTitle( "High Zoom F-Stop" ).SetToolTip( "High Zoom F-Stop when in ADS." );
		Asset.AddEntry_Float( "adsZoom2_fStop", 24, 1.2, 120 ).SetTitle( "Med Zoom F-Stop" ).SetToolTip( "Med Zoom F-Stop when in ADS." );
		Asset.AddEntry_Float( "adsZoom3_fStop", 24, 1.2, 120 ).SetTitle( "Low Zoom F-Stop" ).SetToolTip( "Low Zoom F-Stop when in ADS." );

		Asset.AddEntry_String( "adsZoomSound", "" ).SetTitle( "ADS Zoom Sound" ).SetToolTip( "Sound emitted when zoom toggled." );
		Asset.AddEntry_Float( "adsZoomInFrac", 0.5, 0, 1 ).SetStep( 0.05 ).SetTitle( "Zoom In Frac" ).SetHints( "NOWARNINGS" ).SetToolTip( "Fraction of the hipfire-to-ADS transition time over which the FOV zoom-in effect happens." );
		Asset.AddEntry_Float( "adsZoomOutFrac", 0.1, 0, 1 ).SetStep( 0.05 ).SetTitle( "Zoom Out Frac" ).SetHints( "NOWARNINGS" ).SetToolTip( "Fraction of the ADS-to-hipfire transition time over which the FOV zoom-out effect happens." );
		Asset.AddEntry_Float( "adsBobFactor", 1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Bob Factor" ).SetToolTip( "Strength of viewmodel bobbing due to player movement when using this weapon." );
		Asset.AddEntry_Float( "adsViewBobMult", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "View Bob Mult" ).SetToolTip( "Bob Factor multiplier for view bobbing due to player movement when using this weapon in ADS." );
		Asset.AddEntry_Float( "adsViewErrorMin", 0, 0, 90 ).SetStep( 0.1 ).SetTitle( "Min View Error" ).SetToolTip( "Min View Error." );
		Asset.AddEntry_Float( "adsViewErrorMax", 0, 0, 90 ).SetStep( 0.1 ).SetTitle( "Max View Error" ).SetToolTip( "Max View Error." );	
		Asset.AddEntry_Float( "altScopeADSTransInTime", 0, 0, 90 ).SetStep( 0.01 ).SetTitle( "Alt scope transition time IN" ).SetToolTip( "Transition time when switching to the alt scope while in ADS." );	
		Asset.AddEntry_Float( "altScopeADSTransOutTime", 0, 0, 90 ).SetStep( 0.01 ).SetTitle( "Alt scope transition time OUT" ).SetToolTip( "Transition time when switching away from the alt scope while in ADS." );	

		Asset.AddEntry_Float( "adsScopeBlurRadius", 0, 0, 1 ).SetStep( 0.01f ).SetTitle( "ADS Scope Blur Radius [DEPRECATED]" );
		Asset.AddEntry_Float( "adsScopeBlurAmount", 0, 0, 1 ).SetStep( 0.01f ).SetTitle( "ADS Scope Blur Amount" ).SetToolTip( "Amount of scene blur (0 == off)" );
		Asset.AddEntry_Float( "adsScopeBlurStart", 0, 0, 1 ).SetStep( 0.01f ).SetTitle( "ADS Scope Blur Start" ).SetToolTip( "Amount of ADS (0..1) where the scope blur starts" );

		Asset.AddEntry_CheckBox( "adsSwayViewInsteadOfGun", false ).SetTitle( "ADS Sway View Instead of Gun" ).SetToolTip( "Makes the view sway with the gun locked to it, instead of the view locked and the gun swaying like a typical weapons. This is the old behavior from overlay based sniper rifles, but without requiring an overlay" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Hip Spread Settings
	
	Asset.BeginCategory( "Hip Spread Settings" );
	{
		Asset.AddEntry_Float( "hipSpreadStandMin", 4, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Min" ).SetToolTip( "Smallest diameter the crosshairs can contract to." );
		Asset.AddEntry_Float( "hipSpreadMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while standing." );
		Asset.AddEntry_Float( "hipSpreadDecayRate", 1.5, 0, 50 ).SetStep( 0.05 ).SetTitle( "Decay Rate" ).SetToolTip( "Rate at which the crosshairs try to return to the Min hip spread size." );
		Asset.AddEntry_Float( "hipSpreadDuckedMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Min" ).SetToolTip( "Size of the crosshairs at rest when crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Crouch Decay" ).SetToolTip( "Multiplier of Decay Rate for crouched stance, controlling how fast the crosshairs return to Crouch Min." );
		Asset.AddEntry_Float( "hipSpreadProneMin", 2, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Min" ).SetToolTip( "Size of the crosshairs at rest when prone." );
		Asset.AddEntry_Float( "hipSpreadProneMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while prone." );
		Asset.AddEntry_Float( "hipSpreadProneDecay", 1.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Prone Decay" ).SetToolTip( "Multiplier of Decay Rate for prone stance, controlling how fast the crosshairs return to Prone Min." );
		Asset.AddEntry_Float( "hipSpreadSlideMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Min" ).SetToolTip( "Size of the crosshairs at rest when sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Slide Decay" ).SetToolTip( "Multiplier of Decay Rate for sliding stance, controlling how fast the crosshairs return to Slide Min." );
		Asset.AddEntry_Float( "hipSpreadFireAdd", 0.25, 0, 1 ).SetStep( 0.1 ).SetTitle( "Fire Add" ).SetToolTip( "Amount by which the crosshairs expand per bullet fired." );
		Asset.AddEntry_Float( "hipSpreadMoveAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Move Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadSprintAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Sprint Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadTurnAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Turn Add" ).SetToolTip( "Rate of crosshair expansion due to player panning the view in any direction." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Gun Kick Settings
	
	Asset.BeginCategory( "Gun Kick Settings" );
	{
		Asset.AddEntry_Int( "hipGunKickReducedKickBullets", 4, 0, 100 ).SetTitle( "Hip Red. Kick Bullets" ).SetToolTip( "Hipfire viewmodel control reduced kick number of bullets. This is the number of bullets before the weapon uses a full kick amount." );
		Asset.AddEntry_Int( "adsGunKickReducedKickBullets", 4, 0, 100 ).SetTitle( "ADS Red. Kick Bullets" ).SetToolTip( "ADS viewmodel control reduced kick number of bullets. This is the number of bullets before the weapon uses a full kick amount." );
		Asset.AddEntry_Float( "hipGunKickReducedKickPercent", 20, 0, 100 ).SetTitle( "Hip Red. Kick Percent" ).SetToolTip( "Hip viewmodel control reduced kick percentage. This is the percentage of the full kick amount to kick the gun for the first few bullets." );
		Asset.AddEntry_Float( "adsGunKickReducedKickPercent", 20, 0, 100 ).SetTitle( "ADS Red. Kick Percent" ).SetToolTip( "ADS viewmodel control reduced kick percentage. This is the percentage of the full kick amount to kick the gun for the first few bullets." );
		Asset.AddEntry_Vector2( "hipGunKickPitchMin", "hipGunKickPitchMax", -5, -3, -100, 100 ).SetTitle( "Hip Pitch" ).SetStep( 0.01f ).SetLabels( "Min", "Max", "", "" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Pitch." );
		Asset.AddEntry_Float( "adsGunKickPitchMin", -30, -100, 100 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsGunKickPitchMax", -20, -100, 100 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMin", -15, -100, 100 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMin", -17, -100, 100 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMax", 15, -100, 100 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMax", 17, -100, 100 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickAccel", 250, 0, 1000 ).SetTitle( "Hip Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in hipfire. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "adsGunKickAccel", 250, 0, 1000 ).SetTitle( "ADS Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in ADS. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "hipGunKickSpeedMax", 500, 0, 10000 ).SetTitle( "Hip Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in hipfire." );
		Asset.AddEntry_Float( "adsGunKickSpeedMax", 1000, 0, 10000 ).SetTitle( "ADS Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in ADS." );
		Asset.AddEntry_Float( "hipGunKickSpeedDecay", 15, 0, 100 ).SetTitle( "Hip Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in hipfire." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickSpeedDecay", 10, 0, 100 ).SetTitle( "ADS Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in ADS." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "hipGunKickStaticDecay", 1, 0, 100 ).SetTitle( "Hip Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickStaticDecay", 1, 0, 100 ).SetTitle( "ADS Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// View Kick Settings
	
	Asset.BeginCategory( "View Kick Settings" );
	{
		Asset.AddEntry_Float( "hipViewKickPitchMin", 20, -100, 100 ).SetTitle( "Hip Pitch Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMin", 20, -200, 200 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickPitchMax", 40, -100, 100 ).SetTitle( "Hip Pitch Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMax", 95, -200, 200 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMin", -15, -100, 100 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMin", -10, -200, 200 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMax", 15, -100, 100 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMax", 30, -200, 200 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );		
		Asset.AddEntry_Float( "hipViewKickMinMagnitude", 30, 0, 200 ).SetTitle( "Hip Min Kick Magnitude" ).SetToolTip( "Minimum amount of kick applied when hip firing." );		
		Asset.AddEntry_Float( "adsViewKickMinMagnitude", 30, 0, 200 ).SetTitle( "ADS Min Kick Magnitude" ).SetToolTip( "Minimum amount of kick applied when ADS firing" );
		Asset.AddEntry_Float( "hipViewKickCenterSpeed", 2000, 0, 10000 ).SetStep( 10 ).SetTitle( "Hip Center Speed" ).SetHints( "NOWARNINGS" ).SetToolTip( "Speed with which the view continuously attempts to recenter in hipfire." );
		Asset.AddEntry_Float( "adsViewKickCenterSpeed", 2000, 0, 10000 ).SetStep( 10 ).SetTitle( "ADS Center Speed" ).SetHints( "NOWARNINGS" ).SetToolTip( "Speed with which the view continuously attempts to recenter in ADS." );
		Asset.AddEntry_Float( "adsViewKickCenterDuckedScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Crouch Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in crouch stance." );
		Asset.AddEntry_Float( "adsViewKickCenterProneScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Prone Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in prone stance." );
		Asset.AddEntry_Float( "adsRecoilReductionRate", 0, 0, 1 ).SetStep( 0.05 ).SetTitle( "ADS Recoil Reduction Rate" ).SetHints( "NOWARNINGS" ).SetToolTip( "The view kick reduces by this rate (of original kick) every time a shot it fired. " );
		Asset.AddEntry_Float( "adsRecoilReductionLimit", 0, 0, 1 ).SetStep( 0.05 ).SetTitle( "ADS Recoil Reduction Limit" ).SetHints( "NOWARNINGS" ).SetToolTip( "The maximum reduction allowed." );
		Asset.AddEntry_Float( "adsRecoilReturnRate", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Recoil Return Rate" ).SetHints( "NOWARNINGS" ).SetToolTip( "If there is a break between shots then recoil will return to normal at this rate per second." );

		Asset.AddEntry_Float( "kickAlignedInputScalar", 1, 0.1, 10 ).SetTitle( "Kick Aligned Input Scalar" ).SetToolTip( "Scales the gun and view kick if the user's view input is aligned to the kick direction." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "kickOpposedInputScalar", 1, 0.1, 10 ).SetTitle( "Kick Opposed Input Scalar" ).SetToolTip( "Scales the gun and view kick if the user's view input is opposed to the kick direction." ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sway Settings
	
	Asset.BeginCategory( "Sway Settings" );
	{
		Asset.AddEntry_Float( "swayMaxAngle", 30, 0, 180 ).SetTitle( "Max Angle" ).SetToolTip( "Max angle change that will be applied to the hipfire viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayMaxAngle", 30, 0, 180 ).SetTitle( "ADS Max Angle" ).SetToolTip( "Max angle change that will be applied to the ADS viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayLerpSpeed", 6, 1, 50 ).SetTitle( "Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayLerpSpeed", 6, 1, 50 ).SetTitle( "ADS Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayTransitionLerpSpeed", 0, 0, 50 ).SetTitle( "ADS Transition Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp during ADS transition. Zero means unused." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayPitchScale", 0.1, -2, 2 ).SetTitle( "Pitch Scale" ).SetToolTip( "Amount of pitch change in the viewmodel to apply to the sway pitch in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayPitchScale", 0.1, -2, 2 ).SetTitle( "ADS Pitch Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayYawScale",  0.1, -2, 2 ).SetTitle( "Yaw Scale" ).SetToolTip( "ADS Yaw Scale" ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayYawScale",  0.1, -2, 2 ).SetTitle( "ADS Yaw Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayHorizScale", 0.1, -2, 2 ).SetTitle( "Horiz Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayHorizScale", 0.1, -2, 2 ).SetTitle( "ADS Horiz Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayVertScale", 0.1, -2, 2 ).SetTitle( "Vert Scale" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayVertScale", 0.1, -2, 2 ).SetTitle( "ADS Vert Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayShellShockScale", 5, 0, 20 ).SetTitle( "Shell Shock Scale" ).SetToolTip( "This scale gets applied to the weapon sway while you're in shell shock." ).SetStep( 0.05 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Mountable Weaponry

	Asset.BeginCategory( "Mountable Weaponry" );
	{
		Asset.AddEntry_CheckBox( "mountableWeapon", false ).SetTitle( "Weapon can be mounted" ).SetToolTip( "This weapon can be mounted on mount brushes" );
		Asset.AddEntry_Float( "deployTime", 0.5, 0, 10 ).SetTitle( "Deploy Time" ).SetToolTip( "The time it takes to deploy this weapon" );
		Asset.AddEntry_Float( "breakdownTime", 0.5, 0, 10 ).SetTitle( "Breakdown Time" ).SetToolTip( "The time it takes to breakdown this weapon if it is deployed" );
		Asset.AddEntry_String( "standMountedWeapdef", "" ).SetTitle( "Standing Weapondef" ).SetToolTip( "This is the weapondef in turretsettings.gdt that will be used if the weapon is mounted while standing" );
		Asset.AddEntry_String( "mountedModel", "" ).SetTitle( "Mounted Model" ).SetToolTip( "This is the model that will be used if the weapon is mounted" );
		Asset.AddEntry_String( "crouchMountedWeapdef", "" ).SetTitle( "Crouching Weapondef" ).SetToolTip( "This is the weapondef in turretsettings.gdt that will be used if the weapon is mounted while crouching" );
		Asset.AddEntry_String( "proneMountedWeapdef", "" ).SetTitle( "Prone Weapondef" ).SetToolTip( "This is the weapondef in turretsettings.gdt that will be used if the weapon is mounted while prone" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// AI Settings

	Asset.BeginCategory( "AI Settings" );
	{
		Asset.AddEntry_Float( "fightDist", 720, 1, 100000 ).SetTitle( "Fight Distance" ).SetToolTip( "Aggro radius. AI using this weapon try to fight enemies detected in this radius. Center of this circle constantly traces along AI's path up to maxdist." );
		Asset.AddEntry_Float( "maxDist", 1400, 1, 100000 ).SetTitle( "Max Distance" ).SetToolTip( "Effective range radius. AI must get to this distance before opening fire on their target with this weapon." );
		Asset.AddEntry_FileCombo( "aiVsAiAccuracyGraph", "share/raw/accuracy/aivsai/", "" ).SetTitle( "AI Vs. AI Accuracy" ).SetToolTip( "Graph file for in-game editing of the non-linear accuracy curve used by the AI for this weapon against another AI." );
		Asset.AddEntry_FileCombo( "aiVsPlayerAccuracyGraph", "share/raw/accuracy/aivsplayer/", "" ).SetTitle( "AI Vs. Player Accuracy" ).SetToolTip( "Graph file for in-game editing of the non-linear accuracy curve used by the AI for this weapon against the player." );
		Asset.AddEntry_Float( "aiSpread", 0, 0, 100 ).SetTitle( "AI Spread" ).SetToolTip( "The spread the AI will use with spread weapons." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reticle Settings

	Asset.BeginCategory( "Reticle Settings" );	
	{
		Asset.AddEntry_Path( "reticleCenter", "" ).SetTitle( "Center Reticle" ).SetToolTip( "Center Reticle." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Int( "reticleCenterSize", 32, 1, 480 ).SetTitle( "Center Size" ).SetToolTip( "Center Size." );	
		Asset.AddEntry_Path( "reticleSide", "" ).SetTitle( "Side Reticle" ).SetToolTip( "Side Reticle." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Int( "reticleSideSize", 16, 1, 480 ).SetTitle( "Side Size" ).SetToolTip( "Side Size." );
		Asset.AddEntry_Float( "hipReticleSidePos", 0, 0, 1 ).SetTitle( "Side Position" ).SetToolTip( "Side Position." );
		Asset.AddEntry_Int( "reticleMinOfs", 0, 0, 480 ).SetTitle( "Min Offset" ).SetToolTip( "Min Offset." );
		Asset.AddEntry_String( "reticleWidget", "" ).SetTitle( "Reticle LUIGI Widget" ).SetToolTip( "The LUIGI widget name for this weapons reticle (case sensitive)." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Anti Quick Scope Settings

	Asset.BeginCategory( "Anti Quick Scope Settings" );	
	{
		Asset.AddEntry_CheckBox( "antiQuickScope", false ).SetTitle( "Anti Quick Scope" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon uses anti quick scope settings." );
		Asset.AddEntry_Float( "antiQuickScopeTime", 0.15, 0, 30 ).SetTitle( "Anti Quick Scope Time" ).SetToolTip( "Time when AQS is active after ADS." );
		Asset.AddEntry_Float( "antiQuickScopeScale", 8, 0, 50 ).SetTitle( "Anti Quick Scope Scale" ).SetToolTip( "Increase view movement by this scale." );
		Asset.AddEntry_Float( "antiQuickScopeSpreadMultiplier", 1, 0, 255 ).SetTitle( "Anti Quick Scope Spread Multiplier" ).SetToolTip( "Increases the spread ." );
		Asset.AddEntry_Float( "antiQuickScopeSpreadMax", 25, 0, 255 ).SetTitle( "Anti Quick Scope Spread Max" ).SetToolTip( "Maximum amount the spread can be ." );
		Asset.AddEntry_Float( "antiQuickScopeSwayFactor", 20, 0, 255 ).SetTitle( "Anti Quick Scope Sway Factor" ).SetToolTip( "Increases the sway of the gun by this scale." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Overlay Settings
	
	Asset.BeginCategory( "ADS Overlay Settings" );
	{
		Asset.AddEntry_String( "adsOverlayShader", "" ).SetTitle( "Shader" ).SetHints( "NOWARNINGS" ).SetToolTip( "Overlay for sniper rifles in ADS. Uses a quarter circle image to construct a full scope view." );
		Asset.AddEntry_String( "adsOverlayShaderLowRes", "" ).SetTitle( "Shader Low Res" ).SetHints( "NOWARNINGS" ).SetToolTip( "Low resolution verision of the overlay for sniper rifles in ADS. Uses a quarter circle image to construct a full scope view.  The image is used for 480 verticle resolution or lower and for split screen." );
		Asset.AddEntry_Combo( "adsOverlayReticle", "none | crosshair | FG42 | Springfield | binoculars" ).SetTitle( "Reticle" ).SetToolTip( "Selects a preset image?" );
		Asset.AddEntry_Int( "adsOverlayWidth", 320, 1, 640 ).SetTitle( "Width" );
		Asset.AddEntry_Int( "adsOverlayHeight", 240, 1, 480 ).SetTitle( "Height" );
		Asset.AddEntry_Float( "adsOverlayAlphaScale", 1, 1, 100 ).SetHints( "NOWARNINGS" ).SetTitle( "Alpha Scale" );
		Asset.AddEntry_CheckBox( "holdBreathToSteady", false).SetTitle( "Hold Breath to Steady" ).SetToolTip( "Check to enable LS behavior for holding breath when ADS." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XModels

	Asset.BeginCategory( "XModels" );
	{
		Asset.AddEntry_AssetCombo( "gunModel", "xmodel" ).SetTitle( "View Gun" );
		Asset.AddEntry_AssetCombo( "frontendModel", "xmodel" ).SetTitle( "Frontend Gun" );
		Asset.AddEntry_String( "viewmodelTag", "" ).SetTitle( "View Gun Tag" ).SetToolTip( "Name of the tag you want the viewmodel to be attached at. If blank, the default will be used (tag_weapon1 for left hand DW weapons, tag_knife_attach for melee weapons, tag_weapon otherwise)." );
		Asset.AddEntry_AssetCombo( "worldModel", "xmodel" ).SetTitle( "World Gun" );
		Asset.AddEntry_AssetCombo( "stowedModel", "xmodel" ).SetTitle( "StowedWorldModel" ).SetToolTip( "This model will be used for weapons stowed on the back. If this field is empty, World Gun 1 will be used" );
		Asset.AddEntry_String( "worldModelTagRight", "" ).SetTitle( "World Model Tag (First Gun)" ).SetToolTip( "This is the tag the gun will get attached. In a situation where there are two guns this is the first gun" );
		Asset.AddEntry_String( "worldModelTagLeft", "" ).SetTitle( "World Model Tag (Second Gun)" ).SetToolTip( "This is the tag the second or dual wield gun will get attached." );
		Asset.AddEntry_CheckBox( "useDroppedModelAsStowed", false ).SetTitle( "StowedModelAsDropped" ).SetToolTip( "If checked then the Dropped model will be the same as the Alt stowed World Model" );
		Asset.AddEntry_String( "stowedModelTag", "" ).SetTitle( "Stowed Tag" ).SetToolTip( "Name of the tag you want the stowed gun to be attached at. If blank, the default will be used (tag_stowed_back)." );
		Asset.AddEntry_Vector3( "stowedModelOffsetsF", "stowedModelOffsetsR", "stowedModelOffsetsU", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Offset" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "stowedModelOffsetsPitch", "stowedModelOffsetsYaw", "stowedModelOffsetsRoll", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Rotation" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "handModel", "xmodel" ).SetTitle( "Default view Hand" );
		Asset.AddEntry_AssetCombo( "worldClipModel", "xmodel" ).SetTitle( "World Clip Model" );
		Asset.AddEntry_Text( "hideTags", "" ).SetTitle( "Hide Tags" ).SetHints( "NOWARNINGS" ).SetToolTip( "name of tags to hide on this model.  one per line" );	
		Asset.AddEntry_CheckBox( "bShowModelInEachHand", false ).SetTitle( "Show Model In Each Hand" ).SetToolTip( "Displays weapon model on both left and right tags.  This should not be used as a substitute for a full dual wield weapon when complete right and left hand firing is needed." );
		Asset.AddEntry_CheckBox( "customBool4", false ).SetTitle( "Use Left Hand Version of World Model" ).SetToolTip( "When Show Model In Each Hand is also set, this will use worldModelName + '_left' if it can be found instead of worldModel." );

	}
	
	Asset.BeginCategory( "Damage Models" );
	{
		Asset.AddEntry_Int( "weaponStartHitPoints", 0, 0, 30000 ).SetTitle( "Start Hit Points" ).SetToolTip( "Starting hit points for this weapon." );
		Asset.AddEntry_Int( "weaponDamage1HitPoints", 0, 0, 30000 ).SetTitle( "Damage State 1 Hit Points" ).SetToolTip( "Hit point level below which damage model 1 is shown." );
		Asset.AddEntry_AssetCombo( "viewDamagedModel1", "xmodel" ).SetTitle( "View Damage Model 1" );
		Asset.AddEntry_AssetCombo( "worldDamagedModel1", "xmodel" ).SetTitle( "World Damage Model 1" );
		Asset.AddEntry_Int( "weaponDamage2HitPoints", 0, 0, 30000 ).SetTitle( "Damage State 2 Hit Points" ).SetToolTip( "Hit point level below which damage model 2 is shown." );
		Asset.AddEntry_AssetCombo( "viewDamagedModel2", "xmodel" ).SetTitle( "View Damage Model 2" );
		Asset.AddEntry_AssetCombo( "worldDamagedModel2", "xmodel" ).SetTitle( "World Damage Model 2" );
		Asset.AddEntry_Int( "weaponDamage3HitPoints", 0, 0, 30000 ).SetTitle( "Damage State 3 Hit Points" ).SetToolTip( "Hit point level below which damage model 3 is shown." );
		Asset.AddEntry_AssetCombo( "viewDamagedModel3", "xmodel" ).SetTitle( "View Damage Model 3" );
		Asset.AddEntry_AssetCombo( "worldDamagedModel3", "xmodel" ).SetTitle( "World Damage Model 3" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

 	// Attachments
	
	Asset.BeginCategory( "Attachments" );
	{
		for ( int i = 1; i <= 5; i++ )
		{
			string Title;
			bool Visible = true;
			switch ( i-1 )
			{
				case 0: Title = "Optic 1"; 	 						break;
				case 1: Title = "Optic 1 ADS"; 	Visible = false;	break;
				case 2: Title = "Optic 2"; 	 						break;
				case 3: Title = "Ironsights"; 						break;
				case 4: Title = "Clip"; 							break;
			}
				
			Asset.BeginCategory( "Attachments." + Title );
			{
				Asset.AddEntry_AssetCombo( "attachViewModel" + i, "xmodel" ).SetHints( "NOWARNINGS" ).SetTitle( "Attachment View Model" );
				Asset.AddEntry_BoneCombo( "attachViewModelTag" + i, "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "View Model Tag" );
				Asset.AddEntry_Vector3( "attachViewModelOffsetX" + i, "attachViewModelOffsetY" + i, "attachViewModelOffsetZ" + i, 0, 0, 0, -10000, 10000 ).SetTitle( "View Offset Position" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).SetLabels( "Forward", "Right", "Up", "" );
				Asset.AddEntry_Vector3( "attachViewModelOffsetPitch" + i, "attachViewModelOffsetYaw" + i, "attachViewModelOffsetRoll" + i, 0, 0, 0, -180, 180 ).SetTitle( "View Offset Angles" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).SetLabels( "Pitch  ", "Yaw", "Roll", "" );

				Asset.AddEntry_AssetCombo( "attachWorldModel" + i, "xmodel" ).SetTitle( "Attachment World Model" ).SetHints( "NOWARNINGS" ).SetStep( 0.01f ).Show( Visible );
				Asset.AddEntry_BoneCombo( "attachWorldModelTag" + i, "worldModel" ).SetTitle( "World Model Tag" ).SetHints( "NOWARNINGS" ).Show( Visible );
				Asset.AddEntry_Vector3( "attachWorldModelOffsetX" + i, "attachWorldModelOffsetY" + i, "attachWorldModelOffsetZ" + i, 0, 0, 0, -10000, 10000 ).SetTitle( "World Offset Position" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).Show( Visible ).SetLabels( "Forward", "Right", "Up", "" );
				Asset.AddEntry_Vector3( "attachWorldModelOffsetPitch" + i, "attachWorldModelOffsetYaw" + i, "attachWorldModelOffsetRoll" + i, 0, 0, 0, -180, 180 ).SetTitle( "World Offset Angles" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).Show( Visible ).SetLabels( "Pitch  ", "Yaw", "Roll", "" );
			}
		}
	}
			
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

 	// Attachment Cosmetic Variants
	
	Asset.BeginCategory( "Attachment Cosmetic Variants" );
	{
		array<string> attachmentNames =
		{
			"none",
			"acog",
			"damage",
			"dualclip",
			"dualoptic",
			"dw",
			"dynzoom",
			"extbarrel",
			"extclip",
			"fastads",
			"fastreload",
			"fmj",
			"gl",
			"gmod0",
			"gmod1",
			"gmod2",
			"gmod3",
			"gmod4",
			"gmod5",
			"gmod6",
			"gmod7",
			"grip",
			"holo",
			"ir",
			"is",
			"mk",
			"mms",
			"notracer",
			"precision",
			"quickdraw",
			"rangefinder",
			"recon",
			"reddot",
			"reflex",
			"rf",
			"sf",
			"stackfire",
			"stalker",
			"steadyaim",
			"supply",
			"suppressed",
			"swayreduc",
			"tacknife",
			"vzoom"
		};

		for ( int i = 0; i < attachmentNames.length(); i++ )
		{
			bool Visible = true;
			if ( 0 == i || -1 != attachmentNames[i].Find( "gmod", 0 ) )
			{
				Visible = false;
				Asset.GetEntryVariable( "acv_" + attachmentNames[i] ).SetValue( "" );
			}

			Asset.AddEntry_AssetCombo( "acv_" + attachmentNames[i], "attachmentcosmeticvariant" ).SetHints( "NOWARNINGS" ).SetTitle( "Attachment Cosmetic Variant for " + attachmentNames[i] ).Show( Visible );
		}
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Camo
	
	Asset.BeginCategory( "Camo" );
	{
		Asset.AddEntry_AssetCombo( "camo", "weaponcamotable" ).SetTitle( "Weapon Camo Table" ); // HV - Should be weaponcamotable and not weaponcamo directly, title reflects to this as well now
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XAnims
	
	Asset.BeginCategory( "XAnims", 0.1, 0.2, 0.8, "Icon_animation.png" );
	{
		Asset.AddEntry_AssetCombo( "idleAnim", "xanim" ).SetTitle( "Idle" ).SetHints( "NOWARNINGS" );	
		Asset.AddEntry_AssetCombo( "emptyIdleAnim", "xanim" ).SetTitle( "Empty Idle" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireIntroAnim", "xanim" ).SetTitle( "Fire Intro" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireAnim", "xanim" ).SetTitle( "Fire" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireDelayAnim", "xanim" ).SetTitle( "Fire Delay" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lastShotAnim", "xanim" ).SetTitle( "Last Shot" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "holdFireAnim", "xanim" ).SetTitle( "Hold Fire" );
		Asset.AddEntry_AssetCombo( "holdFireLoopAnim", "xanim" ).SetTitle( "Hold Fire Loop" );
		Asset.AddEntry_AssetCombo( "holdFireCancelAnim", "xanim" ).SetTitle( "Hold Fire Cancel" );
		Asset.AddEntry_AssetCombo( "rechamberAnim", "xanim" ).SetTitle( "Rechamber" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadAnim", "xanim" ).SetTitle( "Reload" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadEmptyAnim", "xanim" ).SetTitle( "Reload Empty Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadStartAnim", "xanim" ).SetTitle( "Reload Start" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadEndAnim", "xanim" ).SetTitle( "Reload End" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadQuickAnim", "xanim" ).SetTitle( "Reload Quick" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadQuickEmptyAnim", "xanim" ).SetTitle( "Reload Quick Empty" ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine empty reload animation" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboAnim", "xanim" ).SetTitle( "Reload Special Combo" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboEmptyAnim", "xanim" ).SetTitle( "Reload Special Combo Empty Anim" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboQuickAnim", "xanim" ).SetTitle( "Reload Special Combo Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboQuickEmptyAnim", "xanim" ).SetTitle( "Reload Special Combo Quick Empty" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine empty reload animation" );
		Asset.AddEntry_AssetCombo( "raiseAnim", "xanim" ).SetTitle( "Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "dropAnim", "xanim" ).SetTitle( "Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "firstRaiseAnim", "xanim" ).SetTitle( "First Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "altRaiseAnim", "xanim" ).SetTitle( "Alt Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "altDropAnim", "xanim" ).SetTitle( "Alt Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsAltRaiseAnim", "xanim" ).SetTitle( "Ads Alt Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsAltDropAnim", "xanim" ).SetTitle( "Ads Alt Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "quickRaiseAnim", "xanim" ).SetTitle( "Quick Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "quickDropAnim", "xanim" ).SetTitle( "Quick Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "emptyRaiseAnim", "xanim" ).SetTitle( "Empty Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "emptyDropAnim", "xanim" ).SetTitle( "Empty Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "chargeSprintInAnim", "xanim" ).SetTitle( "chargeSprint In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "chargeSprintLoopAnim", "xanim" ).SetTitle( "chargeSprint Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "chargeSprintOutAnim", "xanim" ).SetTitle( "chargeSprint Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintInAnim", "xanim" ).SetTitle( "Sprint In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintLoopAnim", "xanim" ).SetTitle( "Sprint Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintOutAnim", "xanim" ).SetTitle( "Sprint Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintInEmptyAnim", "xanim" ).SetTitle( "Sprint In Empty" ).SetHints( "NOWARNINGS" ); // HV - Added spaces between words - 1245 / 1247
		Asset.AddEntry_AssetCombo( "sprintLoopEmptyAnim", "xanim" ).SetTitle( "Sprint Loop Empty" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintOutEmptyAnim", "xanim" ).SetTitle( "Sprint Out Empty" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lowReadyInAnim", "xanim" ).SetTitle( "Low Ready In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lowReadyLoopAnim", "xanim" ).SetTitle( "Low Ready Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lowReadyOutAnim", "xanim" ).SetTitle( "Low Ready Out" ).SetHints( "NOWARNINGS" );		
		Asset.AddEntry_AssetCombo( "contFireInAnim", "xanim" ).SetTitle( "Cont. Fire In" ).SetHints( "NOWARNINGS" ).SetToolTip( "In to fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "contFireLoopAnim", "xanim" ).SetTitle( "Cont. Fire Loop" ).SetHints( "NOWARNINGS" ).SetToolTip( "Looping fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "crawlInAnim", "xanim" ).SetTitle( "Crawl In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlForwardAnim", "xanim" ).SetTitle( "Crawl Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlBackAnim", "xanim" ).SetTitle( "Crawl Back" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlRightAnim", "xanim" ).SetTitle( "Crawl Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlLeftAnim", "xanim" ).SetTitle( "Crawl Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlOutAnim", "xanim" ).SetTitle( "Crawl Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyInAnim", "xanim" ).SetTitle( "Crawl Empty In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyForwardAnim", "xanim" ).SetTitle( "Crawl Empty Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyBackAnim", "xanim" ).SetTitle( "Crawl Empty Back" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyRightAnim", "xanim" ).SetTitle( "Crawl Empty Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyLeftAnim", "xanim" ).SetTitle( "Crawl Empty Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyOutAnim", "xanim" ).SetTitle( "Crawl Empty Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmInAnim", "xanim" ).SetTitle( "TRM Drop to Reach High" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOutAnim", "xanim" ).SetTitle( "TRM Hand Contact to Mantle High" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmInLowAnim", "xanim" ).SetTitle( "TRM Drop to Reach Low" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOutLowAnim", "xanim" ).SetTitle( "TRM Hand Contact to Mantle Low" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverAnim", "xanim" ).SetTitle( "TRM Over" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverLeftAnim", "xanim" ).SetTitle( "TRM Over Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverRightAnim", "xanim" ).SetTitle( "TRM Over Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "contFireOutAnim", "xanim" ).SetTitle( "Cont. Fire Out" ).SetHints( "NOWARNINGS" ).SetToolTip( "Out of fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "adsFireAnim", "xanim" ).SetTitle( "ADS Fire" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsFireDelayAnim", "xanim" ).SetTitle( "ADS Fire Delay" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsFireIntroAnim", "xanim" ).SetTitle( "ADS Fire Intro" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsLastShotAnim", "xanim" ).SetTitle( "ADS Last Shot" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsRechamberAnim", "xanim" ).SetTitle( "ADS Rechamber" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsUpAnim", "xanim" ).SetTitle( "ADS Up" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsDownAnim", "xanim" ).SetTitle( "ADS Down" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsUpOtherScopeAnim", "xanim" ).SetTitle( "ADS Up - Other Scope" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "walkAnim", "xanim" ).SetTitle( "Additive Walk" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jumpAnim", "xanim" ).SetTitle( "Additive Jump" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jumpLandAnim", "xanim" ).SetTitle( "Additive Jump Land" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeLeftAnim", "xanim" ).SetTitle( "Additive Juke Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeRightAnim", "xanim" ).SetTitle( "Additive Juke Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeForwardAnim", "xanim" ).SetTitle( "Additive Juke Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeBackwardAnim", "xanim" ).SetTitle( "Additive Juke Backward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeLeftADSAnim", "xanim" ).SetTitle( "Additive Juke Left ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeRightADSAnim", "xanim" ).SetTitle( "Additive Juke Right ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeForwardADSAnim", "xanim" ).SetTitle( "Additive Juke Forward ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeBackwardADSAnim", "xanim" ).SetTitle( "Additive Juke Backward ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fallAnim", "xanim" ).SetTitle( "Additive Fall" ).SetHints( "NOWARNINGS" );		
		Asset.AddEntry_AssetCombo( "slide_in", "xanim" ).SetTitle( "Slide In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_in_air", "xanim" ).SetTitle( "Slide In Air" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_loop", "xanim" ).SetTitle( "Slide Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_out", "xanim" ).SetTitle( "Slide Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_in", "xanim" ).SetTitle( "Leap In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_loop", "xanim" ).SetTitle( "Leap Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_cancel", "xanim" ).SetTitle( "Leap Cancel" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_out", "xanim" ).SetTitle( "Leap Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunInAnim", "xanim" ).SetTitle( "Wall Run In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunLoopAnim", "xanim" ).SetTitle( "Wall Run Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunOutAnim", "xanim" ).SetTitle( "Wall Run Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpIn", "xanim" ).SetTitle( "DoubleJump In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpLoop", "xanim" ).SetTitle( "DoubleJump Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpCancel", "xanim" ).SetTitle( "DoubleJump Cancel" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpOut", "xanim" ).SetTitle( "DoubleJump Out" ).SetHints( "NOWARNINGS" );

		Asset.AddEntry_AssetCombo( "castAbility", "xanim" ).SetTitle( "Cast Ability Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castIn", "xanim" ).SetTitle( "Cast Ability In Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castLoop", "xanim" ).SetTitle( "Cast Ability Loop Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castOut", "xanim" ).SetTitle( "Cast Ability Out Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castOutHit", "xanim" ).SetTitle( "Cast Ability Out Hit Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveIn", "xanim" ).SetTitle( "Cast Passive Ability In Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveLoop", "xanim" ).SetTitle( "Cast Passive Ability Loop Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveOut", "xanim" ).SetTitle( "Cast Passive Ability Out Anim" ).SetHints( "NOWARNINGS" );

		Asset.BeginCategory( "Melee" );
		{
			Asset.AddEntry_AssetCombo( "meleeAnim", "xanim" ).SetTitle( "Melee" );
			Asset.AddEntry_AssetCombo( "meleeMissAnim", "xanim" ).SetTitle( "Melee Miss" ).SetToolTip( "This is played on a basic melee attack miss." );
			Asset.AddEntry_AssetCombo( "meleeAnimEmpty", "xanim" ).SetTitle( "Melee Empty" );

			Asset.AddEntry_AssetCombo( "meleePowerAnim", "xanim" ).SetTitle( "Melee Power" ).SetToolTip( "The anim played for a melee power attack (right trigger)" );
			Asset.AddEntry_AssetCombo( "meleePowerInAnim", "xanim" ).SetTitle( "Melee Power In" ).SetToolTip( "The anim played for a melee power attack (right trigger)" );
			Asset.AddEntry_AssetCombo( "meleePowerLoopAnim", "xanim" ).SetTitle( "Melee Power Loop" ).SetToolTip( "The anim played for a melee power attack (right trigger)" );
			Asset.AddEntry_AssetCombo( "meleePowerOutAnim", "xanim" ).SetTitle( "Melee Power Out" ).SetToolTip( "The anim played for a melee power attack (right trigger)" );
			Asset.AddEntry_AssetCombo( "meleePowerAnimLeft", "xanim" ).SetTitle( "Melee Power Left" ).SetToolTip( "The anim played for a melee power attack (left trigger)" );

			Asset.AddEntry_AssetCombo( "meleeChargeAnim", "xanim" ).SetTitle( "Melee Charge In" ).SetToolTip( "The anim played for a melee charge" );
			Asset.AddEntry_AssetCombo( "meleeChargeAnimFatal", "xanim" ).SetTitle( "Melee Charge Fatal" ).SetToolTip( "The anim played for a melee charge fatal hit (Default or from the front)" );
			Asset.AddEntry_AssetCombo( "meleeChargeAnimFatalClose", "xanim" ).SetTitle( "Melee Charge Fatal Close" ).SetToolTip( "The anim played for a melee charge fatal hit when you are close to the enemy" );
			Asset.AddEntry_AssetCombo( "meleeChargeAnimAbove", "xanim" ).SetTitle( "Melee Charge Above" ).SetToolTip( "The anim played for a melee charge from Above" );
			Asset.AddEntry_AssetCombo( "meleeChargeAnimHit", "xanim" ).SetTitle( "Melee Charge Non Fatal Hit" ).SetToolTip( "The anim played for a melee charge non-fatal hit (Default or from the front)" );
			Asset.AddEntry_AssetCombo( "meleeChargeAnimMiss", "xanim" ).SetTitle( "Melee Charge Miss" ).SetToolTip( "The anim played for a melee charge miss (Default or from the front)" );

			Asset.AddEntry_AssetCombo( "meleeCharge2AnimIn", "xanim" ).SetTitle( "Melee Charge 2 In" ).SetToolTip( "The anim played for the 2nd melee charge" );
			Asset.AddEntry_AssetCombo( "meleeCharge2AnimFatal", "xanim" ).SetTitle( "Melee Charge 2 Fatal" ).SetToolTip( "The anim played for the 2nd  melee charge fatal hit. If melee charging is directional this is the right animation." );
			Asset.AddEntry_AssetCombo( "meleeCharge2AnimFatalClose", "xanim" ).SetTitle( "Melee Charge 2 Fatal Close" ).SetToolTip( "The anim played for the 2nd melee charge fatal hit when you are close to the enemy. Not used for directional melee charge." );
			Asset.AddEntry_AssetCombo( "meleeCharge2AnimLeft", "xanim" ).SetTitle( "Melee Charge 2 Left" ).SetToolTip( "This is the left melee charge when using directional melee." );
			Asset.AddEntry_AssetCombo( "meleeCharge2AnimMiss", "xanim" ).SetTitle( "Melee Charge 2 Miss" ).SetToolTip( "The anim played for a melee charge miss (Default or from the front)" );

			Asset.AddEntry_AssetCombo( "meleeCharge3AnimIn", "xanim" ).SetTitle( "Melee Charge 3 In" ).SetToolTip( "The anim played for the 3rd melee charge" );
			Asset.AddEntry_AssetCombo( "meleeCharge3AnimFatal", "xanim" ).SetTitle( "Melee Charge 3 Fatal" ).SetToolTip( "The anim played for the 3rd  melee charge fatal hit. If melee charging is directional this is the final animation." );
			Asset.AddEntry_AssetCombo( "meleeCharge3AnimFatalClose", "xanim" ).SetTitle( "Melee Charge 3 Fatal Close" ).SetToolTip( "The anim played for the 3rd melee charge fatal hit when you are close to the enemy" );
			Asset.AddEntry_AssetCombo( "meleeCharge3AnimMiss", "xanim" ).SetTitle( "Melee Charge 3 Miss" ).SetToolTip( "The anim played for a melee charge miss (Default or from the front)" );

			// all deprecated
			Asset.AddEntry_AssetCombo( "meleeChainStrikeLeft", "xanim" ).SetTitle( "deprecated Chain Melee Strike Left Anim" ).SetToolTip( "The anim played for a chain melee strike left" );
			Asset.AddEntry_AssetCombo( "meleeChainStrikeRight", "xanim" ).SetTitle( "deprecated Chain Melee Strike Right Anim" ).SetToolTip( "The anim played for a chain melee strike right" );
			Asset.AddEntry_AssetCombo( "meleeChainStrikeFinish", "xanim" ).SetTitle( "deprecated Chain Melee Strike Finish Anim" ).SetToolTip( "The anim played for a chain melee finishing attack" );
			Asset.AddEntry_AssetCombo( "meleeChainStrikeLoop", "xanim" ).SetTitle( "deprecated Chain Melee Strike Loop Anim" ).SetToolTip( "The anim played for a chain melee loop before the chain attacks" );
			Asset.AddEntry_AssetCombo( "meleeChainStrikeFinishLoop", "xanim" ).SetTitle( "deprecated Chain Melee Strike Finish Loop Anim" ).SetToolTip( "The anim played for a chain melee loop before the finishing attack" );
			Asset.AddEntry_AssetCombo( "meleeChainStrikeFinishClose", "xanim" ).SetTitle( "deprecated Chain Melee Strike Finish Close Anim" ).SetToolTip( "The anim played for a chain melee finishing attack when the enemy is close" );
			
			Asset.AddEntry_AssetCombo( "meleeLeftAnim", "xanim" ).SetTitle( "Melee Left" ).SetToolTip( "The anim played for a left-handed melee" );
			Asset.AddEntry_AssetCombo( "meleeLeftChargeAnim", "xanim" ).SetTitle( "Melee Left Charge In" ).SetToolTip( "The anim played for a left-handed charge" );
			Asset.AddEntry_AssetCombo( "meleeLeftChargeAnimFatal", "xanim" ).SetTitle( "Melee Left Charge Fatal" ).SetToolTip( "The anim played for a left-handed melee charge fatal" );
			Asset.AddEntry_AssetCombo( "meleeLeftChargeAnimHit", "xanim" ).SetTitle( "Melee Left Charge Non Fatal Hit" ).SetToolTip( "The anim played for a left-handed melee charge hit" );
			Asset.AddEntry_AssetCombo( "meleeLeftChargeAnimMiss", "xanim" ).SetTitle( "Melee Left Charge Miss" ).SetToolTip( "The anim played for a left melee charge miss (Default or from the front)" );
		}
		
		Asset.BeginCategory( "Swimming" );
		{
			Asset.AddEntry_AssetCombo( "swimTransitionFromLand", "xanim" ).SetTitle( "Swim Transition From Land Anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "swimIdleLoop", "xanim" ).SetTitle( "Swim Idle Loop Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimCombatIdleIn", "xanim" ).SetTitle( "Swim Combat Idle In Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimCombatIdle", "xanim" ).SetTitle( "Swim Combat Idle Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimCombatOut", "xanim" ).SetTitle( "Swim Combat Out Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimCombatFire", "xanim" ).SetTitle( "Swim Combat Fire Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimCombatAdsFire", "xanim" ).SetTitle( "Swim Combat ADS Fire Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimMovingIn", "xanim" ).SetTitle( "Swim Moving In Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimMovingForward", "xanim" ).SetTitle( "Swim Moving Forward Anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "swimMovingBackward", "xanim" ).SetTitle( "Swim Moving Backward Anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "swimMovingRight", "xanim" ).SetTitle( "Swim Moving Right Anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "swimMovingLeft", "xanim" ).SetTitle( "Swim Moving Left Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimMovingOut", "xanim" ).SetTitle( "Swim Moving Out Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimSprintIn", "xanim" ).SetTitle( "Swim Sprint In Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimSprintLoop", "xanim" ).SetTitle( "Swim Sprint Loop Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimSprintSurfaceLoop", "xanim" ).SetTitle( "Swim Sprint Surface Loop Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimSprintOut", "xanim" ).SetTitle( "Swim Sprint Out Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimTransitionToLand", "xanim" ).SetTitle( "Swim Transition To Land Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimRaise", "xanim" ).SetTitle( "Swim Pullout Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimQuickRaise", "xanim" ).SetTitle( "Swim Quick Pullout Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimDrop", "xanim" ).SetTitle( "Swim Putaway Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimDiveIn", "xanim" ).SetTitle( "Swim Dive In Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimDiveLoop", "xanim" ).SetTitle( "Swim Dive Loop Anim" ).SetHints( "NOWARNINGS" );
	        Asset.AddEntry_AssetCombo( "swimDiveOut", "xanim" ).SetTitle( "Swim Dive Out Anim" ).SetHints( "NOWARNINGS" );
		}
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// FX
	
	Asset.BeginCategory( "FX" );
	{
		Asset.AddEntry_Path( "viewFlashEffect", "" ).SetTitle( "View Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Vector3( "viewFlashOffsetF", "viewFlashOffsetR", "viewFlashOffsetU", 0, 0, 0, -10000, 10000 ).SetTitle( "FX View Flash Offset" ).SetStep( 0.01 );
		Asset.AddEntry_Path( "worldFlashEffect", "" ).SetTitle( "World Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Vector3( "worldFlashOffsetF", "worldFlashOffsetR", "worldFlashOffsetU", 0, 0, 0, -10000, 10000 ).SetTitle( "FX World Flash Offset" ).SetStep( 0.01 );
		Asset.AddEntry_Path( "viewShellEjectEffect", "" ).SetTitle( "View Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Vector3( "viewShellEjectOffsetF", "viewShellEjectOffsetR", "viewShellEjectOffsetU", 0, 0, 0, -10000, 10000 ).SetTitle( "FX View Shell Offset" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "viewShellEjectRotationP", 0, -90, 90 ).SetTitle( "FX View Shell Offset Pitch" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "viewShellEjectRotationY", 0, -180, 180 ).SetTitle( "FX View Shell Offset Yaw" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "viewShellEjectRotationR", 0, -180, 180 ).SetTitle( "FX View Shell Offset Roll" ).SetStep( 0.01 );		
		Asset.AddEntry_Path( "worldShellEjectEffect", "" ).SetTitle( "World Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Vector3( "worldShellEjectOffsetF", "worldShellEjectOffsetR", "worldShellEjectOffsetU", 0, 0, 0, -10000, 10000 ).SetTitle( "FX World Shell Offset" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "worldShellEjectRotationP", 0, -90, 90 ).SetTitle( "FX World Shell Offset Pitch" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "worldShellEjectRotationY", 0, -180, 180 ).SetTitle( "FX World Shell Offset Yaw" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "worldShellEjectRotationR", 0, -180, 180 ).SetTitle( "FX World Shell Offset Roll" ).SetStep( 0.01 );		
		Asset.AddEntry_Path( "viewLastShotEjectEffect", "" ).SetTitle( "View Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldLastShotEjectEffect", "" ).SetTitle( "World Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewFireDelayStartEffect", "" ).SetTitle( "View Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldFireDelayStartEffect", "" ).SetTitle( "World Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldClipDropEffect", "" ).SetTitle( "World Clip Drop FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Int( "barrelCooldownMinCount", 0, 0, 1000 ).SetTitle( "FX Barrel Cooldown Min" ).SetToolTip( "The minimum bullet count.  If the player continuously fires the weapon after the player stops this effect will be played on tag flash." );
		Asset.AddEntry_Path( "barrelCooldownEffect", "" ).SetTitle( "Barrel Cooldown FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "meleePowerEffect", "" ).SetTitle( "Melee Power FX" ).SetRelativePath( "share/raw" ).SetToolTip( "Effect to be played when the player uses the melee weapon power attack (right trigger) but does not make impact" );
		Asset.AddEntry_Path( "meleePowerEffectLeft", "" ).SetTitle( "Melee Power FX Left" ).SetRelativePath( "share/raw" ).SetToolTip( "Effect to be played when the player uses the melee weapon power attack (left trigger) but does not make impact" );
		Asset.AddEntry_AssetCombo( "enemyDeathFxSet", "tagfx").SetTitle( "Enemy Death FX Table" ).SetToolTip( "TagFXSet the enemy when killed." );	
		Asset.AddEntry_Path( "meleeJukeViewEffect", "" ).SetTitle( "Melee Juke View FX" ).SetRelativePath( "share/raw" ).SetToolTip( "Effect to be played when the player uses the melee juke attack (first person)" );
		Asset.AddEntry_Path( "meleeJukeWorldEffect", "" ).SetTitle( "Melee Juke World FX" ).SetRelativePath( "share/raw" ).SetToolTip( "Effect to be played when the player uses the melee juke attack (third person)" );
		
		Asset.AddEntry_Path( "viewPersistentEffect1", "" ).SetTitle( "Persistent View FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentViewModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent View Model Tag" );
		Asset.AddEntry_AssetCombo( "viewPersistentEffectSet", "tagfx").SetTitle( "Persistent View FX Table" ).SetToolTip( "TagFXSet played on the viewmodel." );
		Asset.AddEntry_Path( "worldPersistentEffect1", "" ).SetTitle( "Persistent World FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentWorldModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent World Model Tag" );
		Asset.AddEntry_AssetCombo( "worldPersistentEffectSet", "tagfx").SetTitle( "Persistent World FX Table" ).SetToolTip( "TagFXSet played on the world model." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Impacts
	
	Asset.BeginCategory( "Impacts" );
	{
		Asset.AddEntry_CheckBox( "doNotReflectImpactFX", false ).SetTitle( "Do Not Reflect Impact FX" ).SetToolTip( "Disables impact fx reflection.  Impact will play along the surface normal." );
		Asset.AddEntry_AssetCombo( "normalImpactsFxTable", "impactsfxtable" ).SetTitle( "Enter Impacts FX Table" ).SetHints( "Enter Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsFxTable", "impactsfxtable" ).SetTitle( "Exit Impacts FX Table" ).SetHints( "Exit Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "normalImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Enter Impacts Sounds Table" ).SetHints( "Enter Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Exit Impacts Sounds Table" ).SetHints( "Exit Impact Sounds for this weapon" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Water
	
	Asset.BeginCategory( "Water properties" );
	{
		Asset.AddEntry_Float( "waterSwellRadius", 50, 1, 500 ).SetTitle( "Underwater Swell Radius" ).SetStep( 1 ).SetToolTip( "The radius of the water swell surface effect when this explodes underwater" );
		Asset.AddEntry_Float( "waterSwellRadiusScale", 1, 0, 10 ).SetTitle( "Underwater Swell Radius Scale" ).SetStep( 0.1 ).SetToolTip( "Scales the radius of the water swell surface effect when this impacts water" );
		Asset.AddEntry_Float( "waterSwellForceScale", 1, -50, 50 ).SetTitle( "Underwater Swell Force Scale" ).SetStep( 0.1 ).SetToolTip( "Scales the height of the water swell surface effect when this impacts water" );
	}
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Sounds
	
	Asset.BeginCategory( "Sounds", 0, 0.5, 0, "Icon_Sound.png" );
	{
		Asset.AddEntry_AssetCombo( "sharedWeaponSounds", "sharedweaponsounds" ).SetTitle( "sharedWeaponSounds" ).SetToolTip( "Use this to specify the sharedWeaponSounds asset for this weapon." );
		Asset.AddEntry_String( "ammoPickupSound", "" ).SetTitle( "Ammo Pickup" );
		Asset.AddEntry_String( "ammoPickupSoundPlayer", "" ).SetTitle( "Ammo Pickup (Player)" );
		Asset.AddEntry_String( "pullbackSound", "" ).SetTitle( "Pullback" );
		Asset.AddEntry_String( "pullbackSoundPlayer", "" ).SetTitle( "Pullback (Player)" ).SetToolTip( "Pullback sound used by player. If not defined, player will play normal 'Pullback' that is used by the AI." );
		Asset.AddEntry_String( "fireSound", "" ).SetTitle( "Fire" );
		Asset.AddEntry_String( "fireSoundPlayer", "" ).SetTitle( "Fire (Player)" ).SetToolTip( "Fire sound used by player. If not defined, player will play normal 'Fire' that is used by the AI." );
		Asset.AddEntry_String( "lastShotSound", "" ).SetTitle( "Last Shot" ); // HV - Fixed title to not include (Player)
		Asset.AddEntry_String( "lastShotSoundPlayer", "" ).SetTitle( "Last Shot (Player)" ).SetToolTip( "Last Shot sound used by player. If not defined, player will play normal 'Last Shot' that is used by the AI." );
		Asset.AddEntry_String( "emptyFireSound", "wpn_generic_dryfire_npc" ).SetTitle( "Empty Fire" );
		Asset.AddEntry_String( "emptyFireSoundPlayer", "wpn_generic_dryfire_plr" ).SetTitle( "Empty Fire (Player)" ).SetToolTip( "Empty Fire sound used by player. If not defined, player will play normal 'Empty Fire' that is used by the AI." );
		Asset.AddEntry_String( "spinLoopSound", "" ).SetTitle( "Spin Loop" );
		Asset.AddEntry_String( "spinLoopSoundPlayer", "" ).SetTitle( "Spin Loop (Player)" );
		Asset.AddEntry_String( "startSpinSound", "" ).SetTitle( "Start Spin" );
		Asset.AddEntry_String( "startSpinSoundPlayer", "" ).SetTitle( "Start Spin (Player)" );
		Asset.AddEntry_String( "stopSpinSound", "" ).SetTitle( "Stop Spin" );
		Asset.AddEntry_String( "stopSpinSoundPlayer", "" ).SetTitle( "Stop Spin (Player)" );
		Asset.AddEntry_CheckBox( "applySpinPitch", true ).SetTitle("Apply Pitch To Spin" );
		Asset.AddEntry_String( "startFireSound", "" ).SetTitle( "Start Fire" );
		Asset.AddEntry_String( "startFireSoundPlayer", "" ).SetTitle( "Start Fire (Player)" );
		Asset.AddEntry_String( "killcamStartFireSound", "" ).SetTitle( "Killcam Start Fire" );
		Asset.AddEntry_String( "killcamStartFireSoundPlayer", "" ).SetTitle( "Killcam Start Fire (Player)" );
		Asset.AddEntry_String( "fireBurstSound", "" ).SetTitle( "Fire Burst NPC" );
		Asset.AddEntry_String( "fireBurstSoundPlayer", "" ).SetTitle( "Fire Burst (Player)" ).SetToolTip( "Burst fire sound used by player." );
		Asset.AddEntry_String( "suppressedRapidFireBurstSound", "" ).SetTitle( "Suppressed Rapid Fire Burst NPC" );
		Asset.AddEntry_String( "suppressedRapidFireBurstSoundPlayer", "" ).SetTitle( "Suppressed Rapid Fire Burst (Player)" ).SetToolTip( "Suppressed Rapid Burst fire sound used by player." );
		Asset.AddEntry_String( "loopFireSound", "" ).SetTitle( "Loop Fire" );
		Asset.AddEntry_String( "loopFireSoundPlayer", "" ).SetTitle( "Loop Fire (Player)" );
		Asset.AddEntry_String( "loopFireSoundLeft", "" ).SetTitle( "Loop Fire Left Hand" );
		Asset.AddEntry_String( "loopFireSoundPlayerLeft", "" ).SetTitle( "Loop Fire (Player) Left Hand" );
		Asset.AddEntry_String( "loopFireEndSound", "" ).SetTitle( "Loop Fire End" );
		Asset.AddEntry_String( "loopFireEndSoundPlayer", "" ).SetTitle( "Loop Fire End (Player)" );
		Asset.AddEntry_String( "suppressedRapidLoopFireSound", "" ).SetTitle( "Suppressed Rapid Fire Loop Fire" );
		Asset.AddEntry_String( "suppressedRapidLoopFireSoundPlayer", "" ).SetTitle( "Suppressed Rapid Fire Loop Fire (Player)" );
		Asset.AddEntry_String( "crackSound", "" ).SetTitle( "Crack" );
		Asset.AddEntry_String( "whizbySound", "" ).SetTitle( "Whizby" );
		Asset.AddEntry_String( "deploySound", "" ).SetTitle( "Deploy" );
		Asset.AddEntry_String( "deploySoundPlayer", "" ).SetTitle( "Deploy (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Deploy' that is used by the AI." );
		Asset.AddEntry_String( "finishDeploySound", "" ).SetTitle( "Finish Deploy" );
		Asset.AddEntry_String( "finishDeploySoundPlayer", "" ).SetTitle( "Finish Deploy (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Finish Deploy' that is used by the AI." );
		Asset.AddEntry_String( "breakdownSound", "" ).SetTitle( "Breakdown" );
		Asset.AddEntry_String( "breakdownSoundPlayer", "" ).SetTitle( "Breakdown (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Breakdown' that is used by the AI." );
		Asset.AddEntry_String( "fireDelayStartSound", "" ).SetTitle( "Fire Delay Start" );
		Asset.AddEntry_String( "fireDelayStartSoundPlayer", "" ).SetTitle( "Fire Delay Start (Player)" ).SetToolTip( "Sound used by player when firing a weapon that uses Fire Delay" );
		Asset.AddEntry_String( "rechamberSound", "" ).SetTitle( "Rechamber" );
		Asset.AddEntry_String( "rechamberSoundPlayer", "" ).SetTitle( "Rechamber (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Rechamber' that is used by the AI." );
		Asset.AddEntry_String( "reloadSound", "" ).SetTitle( "Reload" );
		Asset.AddEntry_String( "reloadSoundPlayer", "" ).SetTitle( "Reload (Player)" ).SetToolTip( "Reload sound used by player. If not defined, player will play normal 'Reload' that is used by the AI." );
		Asset.AddEntry_String( "reloadEmptySound", "" ).SetTitle( "Reload Empty" );
		Asset.AddEntry_String( "reloadEmptySoundPlayer", "" ).SetTitle( "Reload Empty (Player)" ).SetToolTip( "Reload Empty sound used by player. If not defined, player will play normal 'Reload Empty' that is used by the AI." );
		Asset.AddEntry_String( "reloadStartSound", "" ).SetTitle( "Reload Start" );
		Asset.AddEntry_String( "reloadStartSoundPlayer", "" ).SetTitle( "Reload Start (Player)" ).SetToolTip( "Reload Start sound used by player. If not defined, player will play normal 'Reload Start' that is used by the AI." );
		Asset.AddEntry_String( "reloadEndSound", "" ).SetTitle( "Reload End" );
		Asset.AddEntry_String( "reloadEndSoundPlayer", "" ).SetTitle( "Reload End (Player)" ).SetToolTip( "Reload End sound used by player. If not defined, player will play normal 'Reload End' that is used by the AI." );
		Asset.AddEntry_String( "altSwitchSound", "" ).SetTitle( "Alt Switch" );
		Asset.AddEntry_String( "altSwitchSoundPlayer", "" ).SetTitle( "Alt Switch (Player)" );
		Asset.AddEntry_String( "raiseSound", "fly_generic_raise_npc" ).SetTitle( "Raise" );
		Asset.AddEntry_String( "raiseSoundPlayer", "fly_generic_raise_plr" ).SetTitle( "Raise (Player)" );
		Asset.AddEntry_String( "firstRaiseSound", "fly_generic_first_raise_npc" ).SetTitle( "First Raise" );
		Asset.AddEntry_String( "firstRaiseSoundPlayer", "fly_generic_first_raise_plr" ).SetTitle( "First Raise (Player)" );
		Asset.AddEntry_String( "adsRaiseSoundPlayer", "fly_generic_ads_plr" ).SetTitle( "ADS Raise Player" );
		Asset.AddEntry_String( "adsLowerSoundPlayer", "fly_generic_ads_lower_plr" ).SetTitle( "ADS Lower Player" );
		Asset.AddEntry_String( "putawaySound", "fly_generic_down_npc" ).SetTitle( "Put Away" );
		Asset.AddEntry_String( "putawaySoundPlayer", "fly_generic_down_plr" ).SetTitle( "Put Away (Player)" );
		Asset.AddEntry_String( "shellCasing", "" ).SetTitle( "Shell Casing" );
		Asset.AddEntry_String( "shellCasingPlayer", "" ).SetTitle( "Shell Casing (Player)" );
		Asset.AddEntry_String( "lockOnStartSound", "" ).SetTitle( "Start locking on" );
		Asset.AddEntry_String( "lockOnFinishSound", "" ).SetTitle( "Lock on complete" );
		Asset.AddEntry_String( "lockOnLostSound", "" ).SetTitle( "Lock on lost" );
		Asset.AddEntry_String( "lockOnNeededFireSound", "" ).SetTitle( "Attempted to fire without lock" );
		Asset.AddEntry_String( "weaponSwitchCancelSound", "" ).SetTitle( "Weapon Switch Cancel" ).SetToolTip( "Played in response to a YY weapon switch cancel" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crack Sound Settings

	Asset.BeginCategory( "Crack Sound Settings" );	
	{
		Asset.AddEntry_Float( "crackSoundRange", 0, 0, 10000 ).SetTitle( "Crack Max Range" ).SetToolTip( "The max range that this crack will be heard from" );
		Asset.AddEntry_Float( "crackSoundAngle", 0, 0, 360 ).SetTitle( "Crack Angle" ).SetToolTip( "This is the angle that defines the cone in which the sound will be heard" );
	}

	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Rumbles
	
	Asset.BeginCategory( "Rumbles" );
	{
		Asset.AddEntry_AssetCombo( "fireRumble", "rumble" ).SetTitle( "Fire Rumble" );
		Asset.AddEntry_AssetCombo( "fireDelayRumble", "rumble" ).SetTitle( "Fire Delay Rumble" );
		Asset.AddEntry_AssetCombo( "reloadRumble", "rumble" ).SetTitle( "Reload Rumble" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Weapon Rest
	
	Asset.BeginCategory( "Weapon Rest" );
	{
		Asset.AddEntry_CheckBox( "disableWeaponRest", false ).SetTitle( "Disable Weapon Rest" ).SetToolTip( "Disable the rest state for this weapon." );	
		Asset.AddEntry_Vector3( "weaponRestPitch", "weaponRestYaw", "weaponRestRoll", 10.0, 30.0, -20.0, -90, 90 ).SetTitle( "WeaponRest angles while centered" ).SetStep( 0.1f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "weaponRestLookingUpPitch", "weaponRestLookingUpYaw", "weaponRestLookingUpRoll", -5.0, 25.0, 10.0, -90, 90 ).SetTitle( "WeaponRest angles while looking up" ).SetStep( 1.0f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "weaponRestLookingDownPitch", "weaponRestLookingDownYaw", "weaponRestLookingDownRoll", 10.0, 20.0, 0.0, -90, 90 ).SetTitle( "WeaponRest angles while looking down" ).SetStep( 1.0f ).SetHints( "NOWARNINGS" );
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// User Interface
 
	Asset.BeginCategory( "User Interface" );
	{
		Asset.AddEntry_AssetCombo( "hudIcon", "image" ).SetTitle( "Hud Icon" );
		Asset.AddEntry_Combo( "hudIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_AssetCombo( "killIcon", "image" ).SetTitle( "Kill Icon" );
		Asset.AddEntry_Combo( "killIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_CheckBox( "flipKillIcon", true ).SetTitle( " Flip:" ).SetToolTip( "Used for weapons that need to have their kill icon horizontally flipped before displaying. (For MP obituaries)." );
		Asset.AddEntry_AssetCombo( "dpadIcon", "image" ).SetTitle( "DPad Icon" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Combo( "dpadIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_CheckBox( "noAmmoOnDpadIcon", true ).SetTitle( "No Ammo On Dpad" ).SetToolTip( "Dont show ammo on the dpad icon" );
		Asset.AddEntry_AssetCombo( "ammoCounterIcon", "image" ).SetTitle( "Ammo Counter Icon" );
		Asset.AddEntry_Combo( "ammoCounterIconRatio", "4:1 | 1:1" ).SetTitle( " Aspect:" );	
		Asset.AddEntry_Combo( "ammoCounterClip", "None | Magazine | ShortMagazine | Shotgun | Rocket | Beltfed | AltWeapon" ).SetTitle( "Ammo Counter Clip Style" );
		Asset.AddEntry_AssetCombo( "fireTypeIcon", "image" ).SetTitle( "Fire Type Icon" );
		Asset.AddEntry_String( "fireTypeString", "" ).SetTitle( "Fire Type String" );
		Asset.AddEntry_AssetCombo( "weaponHeadObjective", "objective" ).SetTitle( "Weapon Head Objective" ).SetToolTip( "Used for the ingame icon displayed nearby." );
		Asset.AddEntry_AssetCombo( "crateObjective", "objective" ).SetTitle( "Crate Objective" ).SetToolTip( "Used for the ingame icon displayed above a crate." );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Parallel Bounce Factors
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
		
	// Perpendicular Bounce Factors ( not used )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Depth of Field Settings
	
	Asset.BeginCategory( "Depth of Field Settings" );   
	{
		Asset.AddEntry_Float( "adsDofStart", 0, 0, 100 ).SetTitle( "ADS Start" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsDofEnd", 0, 0, 100 ).SetTitle( "ADS End" ).SetStep( 0.1 );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Grenade Preparation Effects ( not used )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Left-Hand Grip Adjustment
	
	Asset.BeginCategory( "Left-Hand Grip Adjustment" );
	{
		Asset.AddEntry_Float( "ikLeftHandIdlePosF", 0, -180, 180 ).SetTitle( "IdlePos Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosR", 0, -180, 180 ).SetTitle( "IdlePos Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosU", 0, -180, 180 ).SetTitle( "IdlePos Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetF", 0, -180, 180 ).SetTitle( "Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetR", 0, -180, 180 ).SetTitle( "Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetU", 0, -180, 180 ).SetTitle( "Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandRotationP", 0, -180, 180 ).SetTitle( "Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandRotationY", 0, -180, 180 ).SetTitle( "Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandRotationR", 0, -180, 180 ).SetTitle( "Offset Roll" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_CheckBox( "usingLeftHandProneIK", false ).SetTitle( " Using Prone IK" ).SetToolTip( "Set to indicate that the prone IK values are being used.." );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetF", 0, -180, 180 ).SetTitle( "Prone Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetR", 0, -180, 180 ).SetTitle( "Prone Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetU", 0, -180, 180 ).SetTitle( "Prone Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneRotationP", 0, -180, 180 ).SetTitle( "Prone Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandProneRotationY", 0, -180, 180 ).SetTitle( "Prone Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandProneRotationR", 0, -180, 180 ).SetTitle( "Prone Offset Roll" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetF", 0, -180, 180 ).SetTitle( "Viewer Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetR", 0, -180, 180 ).SetTitle( "Viewer Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetU", 0, -180, 180 ).SetTitle( "Viewer Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationP", 0, -180, 180 ).SetTitle( "Viewer Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationY", 0, -180, 180 ).SetTitle( "Viewer Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationR", 0, -180, 180 ).SetTitle( "Viewer Offset Roll" ).SetHints( "NOWARNINGS" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Gadget Settings	
	AddGadgetFields( Asset );
}

	

