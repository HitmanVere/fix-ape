#include "gadget.h"

void GenerateUI( asset Asset )
{
	// No UI entries

	Asset.AddEntry_Combo( "configstringFileType", "WEAPONFILE" ).Show( false );
	Asset.AddEntry_Int( "isCameraSensor", 0, 0, 1 ).Show( false );
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Misc 

	Asset.BeginCategory( "Misc" );
	{
		Asset.AddEntry_String( "displayName", "" ).SetTitle( "Display Name" ).SetToolTip( "Localization alias for weapon name displayed on HUD in game." );
		Asset.AddEntry_String( "modeName", "" ).SetTitle( "Mode Name" ).SetToolTip( "Localization alias for selective fire mode text displayed on HUD in game." );
		Asset.AddEntry_String( "parentWeaponName", "" ).SetTitle( "Stat Name" ).SetToolTip( "Name of parent weapon for weapon stats e.g. parent weapons for dogs_bite_mp is dogs_mp." );
		Asset.AddEntry_String( "attachmentUnique", "" ).SetTitle( "Attachment Unique Base" ).SetToolTip( "Base name of the attachment unique to load when parsing the attachment uniques." );
		Asset.AddEntry_Combo( "playerAnimType", "default | m203 | radio | crossbow | ballisticknife | dualwield | none | beltfed | grimreaper | tablet | onehanded | rearclip | spikelauncher | bow | brawler | turned | grapple | armminigun | riotshield" ).SetTitle( "Player Anim Type" ).SetToolTip( "Select an Player Anim Type - specifies 'playerAnimType' in playeranim.script" ); // HV - Added riotshield for projectile Shields (Requires fixed playeranimtypes)
		Asset.AddEntry_String( "DualWieldWeapon", "" ).SetTitle( "Dual Wield Weapon Name" ).SetToolTip( "Weapon that is dual wielded with this one." );
		Asset.AddEntry_String( "AIOverlayDescription", "" ).SetTitle( "AI Description" ).SetToolTip( "Localization alias for text shown when crosshair is placed over a friendly. Eg. Rifleman, Submachine Gunner, etc." );
		Asset.AddEntry_Combo( "inventoryType", "primary | offhand | item | altmode | gadget | hero" ).SetTitle( "Inventory" ).SetToolTip( "Select what sort of inventory this weapon is." );
		Asset.AddEntry_Combo( "weaponType", "projectile | bomb" ).SetTitle( "Type" ).SetToolTip( "Select a weapon type." );
		Asset.AddEntry_Combo( "weaponClass", "rocketlauncher | grenade | pistol | rifle | Killstreak Alt Stored Weapon" ).SetTitle( "Class" ).SetToolTip( "Select an appropriate class for this weapon." );		
		Asset.AddEntry_Combo( "impactType", "rocket_explode | rocket_explode_xtreme | none | bullet_small | bullet_large | bullet_ap | bullet_xtreme | shotgun | grenade_bounce | grenade_explode | rifle_grenade | projectile_dud | mortar_shell | tank_shell | bolt | blade" ).SetTitle( "Impact Type" ).SetToolTip( "The impact type, used to play impact effects based on surfacetype" );		
		Asset.AddEntry_Combo( "offhandSlot", "None | Lethal grenade | Tactical grenade | Equipment | Specific use | Gadget" ).SetTitle( "Offhand Slot" );
		Asset.AddEntry_Combo( "offhandClass", "None | Smoke Grenade | Frag Grenade | Flash Grenade | Gear | Supply Drop Marker | Gadget" ).SetTitle( "Offhand Class" );
		Asset.AddEntry_Combo( "guidedMissileType", "None | Sidewinder | Hellfire | Javelin | Ballistic | WireGuided | TVGuided | Drone | HeatSeeking | Robotech | DynamicImpactPoint" ).UpdateOnChange( true ).SetTitle( "Missile Guidance" ).SetToolTip( "Guided missile type" ).GetValue();
		Asset.AddEntry_Combo( "LockonType", "None | Legacy Single | AP Single | AP Multi" ).UpdateOnChange( true ).SetTitle( "Lock on Type" ).SetToolTip( "Lock on type" ).GetValue();
		Asset.AddEntry_Combo( "barrelType", "Single | Dual Barrel | Dual Barrel Alternate | Quad Barrel | Quad Barrel Alternate | Quad Barrel Double Alternate | Offset Dual Barrel | Offset Dual Barrel Alternate" ).SetTitle( "Barrel Type" );
		Asset.AddEntry_Float( "maxSteeringAccel", 3000, 0, 1000000 ).Show( Asset.GetEntryValue( "guidedMissileType" ) != "None" ).SetTitle( "Max steering accel" ).SetToolTip( "The maximum acceleration with which the guided missile can steer (inches / sec^2). (Hellfire/Sidewinder/TV Guided only)" );
		Asset.AddEntry_Float( "maxTurnDegreesPerSecond", 0, 0, 3600).Show( Asset.GetEntryValue( "guidedMissileType" ) == "HeatSeeking" ).SetTitle( "Max Turning Rate" ).SetToolTip( "The maximum turning rate of the missile in degrees per second" );
		Asset.AddEntry_Combo( "fireType", "Full Auto | Single Shot | Burst | Auto Burst | Charge Shot | Charge Shot Burst | Charge Shot Auto Burst | Stacked Fire | All Locked" ).SetTitle( "Fire Type" ).SetToolTip( "Behavior of the weapon when the trigger is held down." );				
		Asset.AddEntry_AssetCombo( "paintshopXCam", "xcam" ).SetTitle( "Paintshop XCam" ).SetToolTip( "The XCam that specifies the camera and weapon rotation for Paintshop." );
		Asset.AddEntry_AssetCombo( "cacWeaponXCam", "xcam" ).SetTitle( "CAC Weapon XCam" ).SetToolTip( "The XCam that specifies the camera and weapon rotation for the CAC when viewing the full weapon." );
		Asset.AddEntry_AssetCombo( "cacAttachmentsXCam", "xcam" ).SetTitle( "CAC Attachments XCam" ).SetToolTip( "The XCam that specifies the camera and weapon rotation for the CAC when viewing specific attachments on the weapon." );
		Asset.AddEntry_AssetCombo( "gunsmithWeaponXCam", "xcam" ).SetTitle( "Gunsmith Weapon XCam" ).SetToolTip( "The Xcam for the main Gunsmith view." );
		Asset.AddEntry_AssetCombo( "weaponIconXCam", "xcam" ).SetTitle( "Weapon Icon Preview XCam" ).SetToolTip( "The Xcam for the main weapon icon preview." );
		Asset.AddEntry_CheckBox( "ignoreAttachments", false ).SetTitle( "Ignore Attachments" ).SetToolTip( "Ignores most things on attachments except for attachment models.  Prevents animations and behaviors from being overridden." );
		Asset.AddEntry_CheckBox( "noThirdPersonDropsOrRaises", false ).SetTitle( "No Weapon Switches" ).SetToolTip( "No 3rd person Drop or Raise anims." );
		Asset.AddEntry_CheckBox( "noPing", true ).SetTitle( "No Ping" ).SetToolTip( "The grenade is ignored by AI." );
		Asset.AddEntry_CheckBox( "magicMissileTrail", false ).SetTitle( "Magic Missile Trail" ).SetToolTip( "Trail reconstruction should not use the players location, but just use the spawn location of the entity." );
		Asset.AddEntry_CheckBox( "useAntiLagRewind", false ).SetTitle( "use Anti-Lag Rewind" ).SetToolTip( "force using anti-lag rewind." );
		Asset.AddEntry_CheckBox( "canUseUnderWater", true ).SetTitle( "Can Use Under Water" ).SetToolTip( "The weapon can be used under water." );
		Asset.AddEntry_CheckBox( "waterMovement", false ).SetTitle( "Water Movement" ).SetToolTip( "The weapon will use the water physics movement in water." );
		Asset.AddEntry_CheckBox( "blocksProne", false ).SetTitle( "Cannot Go Prone" ).SetToolTip( "The player cannot go prone when they have this weapon equiped." );
		Asset.AddEntry_CheckBox( "isRollingGrenade", false ).SetTitle( "Rolls on the ground" );
		Asset.AddEntry_CheckBox( "airburstWeapon", false ).SetTitle( "Airburst Weapon" ).SetToolTip( "Player can mark distance and then fired projectile will explode at that distance." );
		Asset.AddEntry_CheckBox( "avoidDropCleanup", false ).SetTitle( "No Auto-Cleanup of Dropped Weapon" ).SetToolTip( "Avoid having dropped weapons of this type deleted to make room for new ones." );
		Asset.AddEntry_CheckBox( "noQuickDropWhenEmpty", false ).SetTitle( "noQuickDropWhenEmpty" ).SetToolTip( "Always play the Empty drop." );		
		Asset.AddEntry_CheckBox( "isReviveWeapon", false ).SetTitle( "Revive Weapon" ).SetToolTip( "Weapon revives other players (ZM only)." );
		Asset.AddEntry_CheckBox( "bDisallowAtMatchStart", false ).SetTitle( "Round Start Delayed" ).SetToolTip( "Dont allow this weapon to be used at round start." );		
		Asset.AddEntry_CheckBox( "destroyableByTrophySystem", false ).SetTitle( "Destroyable By Trophy System" ).SetToolTip( "This weapon can be destroyed by the Trophy System" );
		Asset.AddEntry_CheckBox( "nonStowedWeapon", false ).SetTitle( "Non Stowed Weapon" ).SetToolTip( "This weapon will not be drawn when it is stowed (basic knife for example)" );
		Asset.AddEntry_CheckBox( "isScavengable", false ).SetTitle( "Is Scavengable" ).SetToolTip( "This weapon can receive additional ammo through the Scavenger system" );					//wasnt present b4, defaulting false
		Asset.AddEntry_CheckBox( "doesFireDamage", false ).SetTitle( "Does Fire Damage" ).SetToolTip( "This weapon is considered to cause fire damage for some methods of death" );
		Asset.AddEntry_CheckBox( "ignoresFlakJacket", false ).SetTitle( "Ignores Flak Jacket" ).SetToolTip( "This weapon ignores damage reduction from flak jacket" );
		Asset.AddEntry_CheckBox( "skipBattlechatterKill", false ).SetTitle( "Skip Battlechatter Kill" ).SetToolTip( "This weapon will not 'kill' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipBattlechatterReload", false ).SetTitle( "Skip Battlechatter Reload" ).SetToolTip( "This weapon will not 'reload' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipLowAmmoVox", false ).SetTitle( "skip Low Ammo Vox" ).SetToolTip( "This weapon should skip playing low ammo warning voiceovers" );
		Asset.AddEntry_CheckBox( "forceDamageShellshockAndRumble", false ).SetTitle( "Force Damage Shellshock And Rumble" ).SetToolTip( "This weapon will force calling damageShellshockAndRumble on a player even if friendly fire settings will otherwise prevent damage to that player" );
		Asset.AddEntry_CheckBox( "isAIKillstreakDamage", false ).SetTitle( "Is AI Killstreak Damage" ).SetToolTip( "This weapon's killstreak damage is considered to be from AI" );
		Asset.AddEntry_CheckBox( "isBallisticKnife", false ).SetTitle( "Is Ballistic Knife" ).SetToolTip( "This weapon is a ballistic knife" );
		Asset.AddEntry_CheckBox( "isHybridWeapon", false ).SetTitle( "Is Hybrid Weapon" ).SetToolTip( "This weapon is one half of a hybrid pairing" );
		Asset.AddEntry_CheckBox( "firingCancelsSlide", false ).SetTitle( "Firing Cancels Slide" ).SetToolTip( "Slide will get canceled if the trigger is pulled" );
		Asset.AddEntry_CheckBox( "isSniperWeapon", false ).SetTitle( "Is Sniper Weapon" ).SetToolTip( "This weapon is considered a sniper weapon for various purposes, e.g. disabling sticky aim" );
		Asset.AddEntry_CheckBox( "bShownEnemyEquip", false ).SetTitle( "Shown Enemy Equipment" ).SetToolTip( "This weapon is visible to enemies with specialty_showenemyequipment" );
		Asset.AddEntry_CheckBox( "bShownEnemyExplo", false ).SetTitle( "Shown Enemy Explosive" ).SetToolTip( "This weapon is visible to enemies with specialty_detectexplosive" );
		Asset.AddEntry_CheckBox( "bShownRetrievable", false ).SetTitle( "Shown As Retrievable" ).SetToolTip( "This weapon is visible to the owner when retrievable" );
		Asset.AddEntry_CheckBox( "showBallisticPrediction", false ).SetTitle( "Show Arc Prediction" ).SetToolTip( "Turns on the arc rendering for this weapon when it is not ads" );
		Asset.AddEntry_CheckBox( "showBallisticPredictionWhenAds", false ).SetTitle( "Show Arc Prediction When ADS" ).SetToolTip( "Turns on the arc rendering for this weapon when it is ads" );
		Asset.AddEntry_Float( "deathCamTime", 0, -1, 10 ).SetStep( 0.05 ).SetTitle( "Death Cam Time" ).SetToolTip( "Controls how long the player should be in the 3p death cam. Less than zero means use the deathAnimDuration, zero means use the default (currently 1.75), and greater than zero means to use this value" );
		Asset.AddEntry_CheckBox( "magicMissileTrail", false ).SetTitle( "Magic Missile Trail FX" ).SetToolTip( "Trail reconstruction should not use the players location, but just use the spawn location of the entity." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
 		// Type Alt Mode Options

	Asset.BeginCategory( "Alt Mode Options" );
	{
		Asset.AddEntry_String( "altWeapon", "" ).SetHints( "NOWARNINGS" ).SetTitle( "Alt Weapon Name" ).SetToolTip( "Weapon to switch to when this weapon's selective fire mode is switched in the game." );
		Asset.AddEntry_CheckBox( "useAltTagFlash", false ).SetTitle( "FX Use Alt Tag Flash" ).SetToolTip( "Use for weapons that need a different location for tag_flash on the world model. (grenade launchers, flamethrower attachment, etc.)" );
		Asset.AddEntry_CheckBox( "altWeaponAdsOnly", false ).SetTitle( "Ads Only Alt Weapon" ).SetToolTip( "Use for weapons that can only be switched while in ADS" );
		Asset.AddEntry_CheckBox( "altWeaponDisableSwitching", false ).SetTitle( "Disable Toggle Weapon Switching" ).SetToolTip( "Does not allow you to switch the alt mode with the toggle weapon button" );
		Asset.AddEntry_CheckBox( "ignoreAttachments", false ).SetTitle( "Ignore Attachments" ).SetToolTip( "Ignores most things on attachments except for attachment models.  Prevents animations and behaviors from being overridden." );
}
 	
 		// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Damage
	
	Asset.BeginCategory( "Damage" );
	{
		Asset.AddEntry_Int( "damage", 0, 0, 10000 ).SetTitle( "Impact Damage" ).SetToolTip( "Damage when missile directly hits target." );
		Asset.AddEntry_Int( "playerDamage", 30, 0, 1000 ).SetTitle( "Impact AI-player Damage" ).SetToolTip( "Damage done to player when hit by an AI" );
		Asset.AddEntry_CheckBox( "bImpactDamageOnlyActorsAndPlayers", false ).SetTitle( "Impact Damage Only Players/Actors" ).SetToolTip( "This will not impact damage anything but players or AI.  Everything else it will splash damage only." );
		Asset.AddEntry_CheckBox( "doNotDamageOwner", false ).SetTitle( "Do Not Damage Owner" ).SetToolTip( "This weapon will not damage the owner" );
		Asset.AddEntry_Float( "damageToOwnerScalar", 1, 0, 2 ).SetStep( 0.05 ).SetTitle( "Damage To Owner Scalar" ).SetToolTip( "Scales the damage to the owner of the missile" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Explosion
	
	Asset.BeginCategory( "Explosion" );
	{
		Asset.AddEntry_Int( "explosionRadiusMin", 0, 0, 10000 ).SetStep( 10 ).SetTitle( "Explosion Inner Radius" ).SetToolTip( "Inner damage radius.  Currently only works for flashbangs" );
		Asset.AddEntry_Int( "explosionRadius", 300, 0, 10000 ).SetStep( 10 ).SetTitle( "Explosion Outer Radius" ).SetToolTip( "Outer damage radius (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "explosionInnerDamage", 10, 0, 10000 ).SetTitle( "Explosion Inner Damage" ).SetToolTip( "Damage at center of explosion" );
		Asset.AddEntry_Int( "explosionOuterDamage", 10, 0, 10000 ).SetTitle( "Explosion Outer Damage" ).SetToolTip( "Damage at outside edge of explosion" );
		Asset.AddEntry_Float( "damageConeAngle", 180, 0, 180 ).SetTitle( "Explosion Damage Cone Angle" ).SetToolTip( "The explosion only affects entities within a cone centered around the grenade's forward direction.  This is the angle between the forward direction an the side of the cone (180 is a spherical explosion)." );	
		Asset.AddEntry_CheckBox( "allowKnockback", false ).SetTitle( "Explosion Allow Knockback" ).SetToolTip( "Explosion will push player based on damage." );
		Asset.AddEntry_Float( "explosionNormalOffset", 0, 0, 10000 ).SetTitle( "Explosion Normal Offset" ).SetToolTip( "The explosion damage is moved out from the point of impact along the normal.  This allows you to push the explosion damage check away from the surface to prevent getting blocked by small items." );	
		Asset.AddEntry_Float( "explosionCameraShakeScale", 0.5, 0, 1 ).SetStep( 0.01 ).SetTitle( "Explosion Shake Scale" ).SetToolTip( "Shake happens on each fire event" );
		Asset.AddEntry_Int( "explosionCameraShakeDuration", 500, 0, 10000 ).SetTitle(  "Explosion Shake Duration" ).SetToolTip( "Shake happens on each fire event" );
		Asset.AddEntry_Int( "explosionCameraShakeRadius", 512, 0, 10000 ).SetTitle(  "Explosion Shake Radius" ).SetToolTip( "Shake happens on each fire event" );
		Asset.AddEntry_CheckBox( "projImpactExplode", true ).SetTitle( "Impact Explosion" ).SetToolTip( "Projectile explodes on impact" );
		Asset.AddEntry_CheckBox( "sentientImpactExplode", false ).SetTitle( "Impact Sentient Explosion" ).SetToolTip( "Projectile explodes on impact with an Sentient" );
		Asset.AddEntry_Float( "vehicleProjectileDamageScalar", 1, 0, 1000 ).SetTitle( "Vehicle Explosion Damage Scalar" ).SetToolTip( "Scales the damage this weapon does to vehicles." );
		Asset.AddEntry_Float( "vehicleProjectileSplashDamageScalar", 1, 0, 1000 ).SetTitle( "Vehicle Explosion Splash Damage Scalar" ).SetToolTip( "Scales the splash damage this weapon does to vehicles." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Projectile	
	
	Asset.BeginCategory( "Projectile" );
	{
		Asset.AddEntry_Int( "projectileSpeed", 600, 0, 50000 ).SetTitle( "Projectile Speed" ).SetToolTip( "The speed the projectile travels (inches/sec)" );
		Asset.AddEntry_Int( "projectileSpeedRelativeUp", 0, 0, 10000 ).SetTitle( "Projectile Player's View Upwards" ).SetToolTip( "The amount of verticle velocity the projectile is given in the direction that the player is looking" );
		Asset.AddEntry_Int( "projectileSpeedUp", 0, 0, 10000 ).SetTitle( "Projectile Extra Verticle Speed" ).SetToolTip( "Vertical speed added to grenades" );
		Asset.AddEntry_Int( "projectileActivateDist", 0, 0, 10000 ).SetTitle( "Projectile Activate Distance" ).SetToolTip( "Distance the projectile must travel before it will explode." );
		Asset.AddEntry_Float( "projectileLifetime", 30, 0, 10000 ).SetStep( 0.1 ).SetTitle( "Projectile Lifetime" ).SetToolTip( "The time (in seconds) after which the projectile will explode in the air, if it hasn't hit anything yet" );
		Asset.AddEntry_Int( "destabilizeDistance", 30000, 0, 32000 ).SetStep( 10 ).SetTitle( "Projectile Destabilize Distance" ).SetToolTip( "The distance the projectile goes before becoming unstable" );
		Asset.AddEntry_Float( "destabilizationRateTime", 0, 0, 10 ).SetStep( 0.01 ).SetTitle( "Projectile Destabilize Rate (time)" ).SetToolTip( "The time between 'instability' course changes" );
		Asset.AddEntry_Float( "destabilizationCurvatureMax", 10, 0, 10000000 ).SetStep( 0.01 ).SetTitle( "Projectile Destabilize Angle Max" ).SetToolTip( "The maximum curvature in degrees per second" );
		Asset.AddEntry_AssetCombo( "projectileModel", "xmodel" ).SetTitle( "Projectile Model" ).SetToolTip( "Define the model to be used for the projectile" );
		Asset.AddEntry_AssetCombo( "projectileModelEnemy", "xmodel" ).SetTitle( "Projectile Enemy Model" ).SetToolTip( "Define the model to be used for the projectile for the enemy team" );
		Asset.AddEntry_Combo( "projExplosionType", "grenade | rocket | flashbang | smoke | heavy explosive | fire | napalmblob | napalmbloblight | bolt | none" ).SetTitle( "Projectile Explosion Type" ).SetToolTip( "Defines the type of effect that will be played. Effects are defined in fx/iw_impacts.csv" );
		Asset.AddEntry_Path( "projExplosionEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Projectile Explosion FX" ).SetToolTip( "Defines the effect that will be played when the projectile explodes. It will also play the effects that are defined in fx/iw_impacts.csv" );	
		Asset.AddEntry_CheckBox( "projExplosionEffectForceNormalUp", false ).SetTitle( "FX Projectile Force straight-up normal vector" );
		Asset.AddEntry_Path( "projExplosionEffect2", "" ).SetRelativePath( "share/raw" ).SetTitle( "Explosion FX 2" ).SetToolTip( "Defines the effect that will be played when the projectile explodes. It will also play the effects that are defined in fx/iw_impacts.csv" );	
		Asset.AddEntry_CheckBox( "projExplosionEffect2ForceNormalUp", false ).SetTitle( "FX Force straight-up normal vector 2" );
		Asset.AddEntry_String( "projExplosionSound", "" ).SetTitle( "Projectile Explosion Sound" ).SetToolTip( "The sound the projectile will play when it impacts" );
		Asset.AddEntry_String( "projExplosionSoundPlayer", "" ).SetTitle( "Projectile Explosion Sound Player" ).SetToolTip( "The sound the projectile will play when it impacts and shot by a local player" );
		Asset.AddEntry_Path( "projDudEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Dud FX" ).SetToolTip( "The effect that will play if the projectile collides with an object before the Activate Distance is reached" );
		Asset.AddEntry_String( "projDudSound", "" ).SetTitle( "Dud Sound" ).SetToolTip( "The sound the projectile will play when it impacts before the Activate Distance is reached" );		
		Asset.AddEntry_CheckBox( "stopTrailWhenStationary", false ).SetTitle( "Stop Trail When Stationary" ).SetToolTip( "Stops the trail FX when the projectile comes to a stop." );
		Asset.AddEntry_Path( "projTrailEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Projectile Trail FX"  ).SetToolTip( "This FX is attached to and trailed behind the projectile model." );
		Asset.AddEntry_Int( "projIgnitionDelay", 0, 0, 10000 ).SetTitle( "Projectile Ignition Delay" ).SetToolTip( "How long after launch to wait for rocket to ignite." );
		Asset.AddEntry_Path( "projIgnitionEffect", "" ).SetTitle( "Projectile Ignition FX"  ).SetToolTip( "This FX is played when a projectile's rocket first ignites." ).SetRelativePath( "share/raw/" );
		Asset.AddEntry_Int( "projectileRepulsedSpeed", 0, 0, 50000 ).SetTitle( "Projectile Repulsed Speed" ).SetToolTip( "The speed the projectile travels after getting repulsed (inches/sec). Not used if 0." );
		Asset.AddEntry_String( "projtileRepulsedSound", "" ).SetTitle( "Projectile Repulsed Sound" ).SetToolTip( "The sound to play when the projectile is repulsed" );		
		Asset.AddEntry_CheckBox( "timedDetonation", false ).SetTitle( "Projectile Timed Detonation" ).SetToolTip( "If checked, the grenade will detonate after the fuse time has passed." );
		Asset.AddEntry_CheckBox( "noCrumpleMissile", false ).SetTitle( "Projectile No Crumple Missile" ).SetToolTip( "Projectile will bounce no matter its velocity." );
		Asset.AddEntry_CheckBox( "forceBounce", false ).SetTitle( "Projectile Force Bounce" ).SetToolTip( "Projectile will bounce." );
		Asset.AddEntry_CheckBox( "noBounce", false ).SetTitle( "Projectile No Bounce" ).SetToolTip( "Projectile will never bounce." );
		Asset.AddEntry_Float( "customFloat1", 0, 0, 1 ).SetTitle( "Force Underwater Bounce Impact FX" ).SetToolTip( "Projectile will play bounce impact FX even underwater." );
		Asset.AddEntry_AssetCombo( "grenadeWeapon", "grenadeweapon" ).SetTitle( "Projectile Spawned grenade" ).SetToolTip( "grenade weapon name that will be spawned on impact." );
		Asset.AddEntry_Float( "fuseTime", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "Projectile Fuse Time" ).SetToolTip( "The length of time from when the grenade is thrown to when it explodes." );	
		Asset.AddEntry_Float( "aiFuseTime", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "Projectile AI Fuse Time" ).SetToolTip( "The length of time from when the grenade is thrown to when it explodes for AI." );	
		Asset.AddEntry_CheckBox( "projPassThroughActorsAndPlayers", false ).SetTitle( "Projectile Pass Through Actors And Players" ).SetToolTip( "Enables the projectile to damage and pass through Actors and Players" );
		Asset.AddEntry_CheckBox( "customBool5", false ).SetTitle( "Projectile Pass Through Enemy Actors And Players" ).SetToolTip( "Enables the projectile to damage and pass through Enemy Actors and Players" );
		Asset.AddEntry_CheckBox( "projImpales", false ).SetTitle( "Projectile Impales AI" ).SetToolTip( "Enables the projectile to impale AI against surfaces" );
		Asset.AddEntry_Float( "impaleImpactDecel", 0.3, 0, 100 ).SetStep( 0.1 ).SetTitle( "Projectile Impact Deceleration" ).SetToolTip( "Multiply the projectile velocity by this amount when it impales something" );	
		Asset.AddEntry_Float( "impaleImpactDecelTime", 0.4, 0, 100 ).SetStep( 0.1 ).SetTitle( "Projectile Impact Deceleration Time" ).SetToolTip( "Time in seconds over which to decelerate the projectile when it impales" );	
		Asset.AddEntry_CheckBox( "fuseStartsOnImpact", false ).SetTitle( "Projectile Fuse Starts on Impact" ).SetToolTip( "Fuse time doesn't start until an impact occurs" );
		Asset.AddEntry_Int( "proximityDetonation", 0, 0, 10000 ).SetTitle( "Projectile Proximity Detonation Distance" ).SetToolTip( "The grenade detones when a target is within this distance. Use 0 to disable proximity, > 0 distance to enable" );
		Asset.AddEntry_Int( "projectileKickback", 64, 0, 10000 ).SetTitle( "Projectile Kickback" ).SetToolTip( "Amount of kickback given to the person firing the weapon." );
		Asset.AddEntry_Int( "splitProjectileCount", 0, 0, 10 ).SetTitle( "Split Projectile Count" ).SetToolTip( "Splits the projectile into this many identical parts on the first bounce." );
		Asset.AddEntry_Float( "splitProjectileAngle", 15, 0, 180 ).SetStep( 1.0 ).SetTitle( "Split Projectile Angle" ).SetToolTip( "Angle at which the projectiles split off from the original" );	
		Asset.AddEntry_String( "splitWeapon", "" ).SetTitle( "Split Weapon Name" ).SetToolTip( "When the projectile splits these projectiles are spawned." );
		Asset.AddEntry_Float( "timeToAccelerate", 0.0, 0, 100 ).SetStep( 0.1 ).SetTitle( "Projectile Acceleration Time" ).SetToolTip( "Time in seconds over which to accelerate the projectile" );	
		Asset.AddEntry_Float( "customFloat2", 0, 0, 1 ).SetTitle( "Projectile Slowdown When Fired Underwater" ).SetToolTip( "Projectile will be slowed initially when fired underwater." );

		// Robotech Guidance Settings

		Asset.BeginCategory( "Projectile.Robotech Guidance Settings" );
		{
			Asset.AddEntry_Float( "robotechMaxPitch", 90, 0, 180 ).SetStep( 1 ).SetTitle( "Robotech Max Pitch" ).SetToolTip( "Max pitch in degress that missile can wander off of target" );
			Asset.AddEntry_Float( "robotechMaxYaw", 90, 0, 180 ).SetStep( 1 ).SetTitle( "Robotech Max Yaw" ).SetToolTip( "Max yaw in degress that missile can wander off of target" );
			Asset.AddEntry_Float( "robotechFrequency", 0.2, 0, 99999 ).SetStep( 0.1 ).SetTitle( "Robotech Frequency" ).SetToolTip( "The frequency that the missile makes a complete circuit" );
			Asset.AddEntry_Float( "robotechVariancePitch", 0, 0, 180 ).SetStep( 1 ).SetTitle( "Robotech Pitch Variance" ).SetToolTip( "Applies a random variance to the pitch when fired" );
			Asset.AddEntry_Float( "robotechVarianceYaw", 0, 0, 180 ).SetStep( 1 ).SetTitle( "Robotech Yaw Variance" ).SetToolTip( "Applies a random variance to the yaw when fired" );
			Asset.AddEntry_Float( "robotechVarianceFrequency", 0.0, 0.0, 99999 ).SetStep( 0.1 ).SetTitle( "Robotech Frequency Variance" ).SetToolTip( "Applies a random variance to the frequency when fired" );
		}
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammo Options

	Asset.BeginCategory( "Ammo Options" );
	{
		Asset.AddEntry_CheckBox( "armorPiercing", false ).SetTitle( "Armor Piercing" ).SetHints( "NOWARNINGS" ).SetToolTip( "Does damage to armored targets if checked." );
		Asset.AddEntry_CheckBox( "explodeOnGround", false ).SetTitle( "Explode On Ground" ).SetToolTip( "The grenade will wait until it hits the ground to explode." );
		Asset.AddEntry_CheckBox( "doAnnihilate", false ).SetTitle( "Do Annihilate" ).SetToolTip( "This gun will gib and annihilate if checked" );
		Asset.AddEntry_CheckBox( "doBlowback", false ).SetTitle( "Do Blowback" ).SetToolTip( "This will trigger blowback death anims" );
		Asset.AddEntry_Combo( "damageType", "normal | annihilator | bow_partial_charge | bow_full_charge | fireflies | energy_weapon" ).SetTitle( "Damage Type" ).SetToolTip( "Sets a damage type to be used in the playeranim_death.script logic when MOD is not melee or splash" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Type Options

	Asset.BeginCategory( "Type Options" );
	{
		Asset.AddEntry_CheckBox( "boltAction", false ).SetTitle( "Bolt Action" ).SetToolTip( "Turn this on for bolt-action weapons only. Animation control." );
		Asset.AddEntry_Int( "shotsBeforeRechamber", 0, 0, 255 ).SetTitle( "Shots Before Rechamber" ).SetToolTip( "Number of shots fired before we play the rechamber animation." );
		Asset.AddEntry_CheckBox( "dualWield", false ).SetTitle( "Dual Wield" ).SetToolTip( "This a dual wield weapon." );
		Asset.AddEntry_CheckBox( "canUseInVehicle", false ).SetTitle( "Usable In Vehicles" ).SetToolTip( "Allow Map and killstreaks to be used in vehicle (MP Only)" );
		Asset.AddEntry_CheckBox( "useAltTagFlash", false ).SetTitle( "FX Use Alt Tag Flash" ).SetToolTip( "Use for weapons that need a different location for tag_flash on the world model. (grenade launchers, flamethrower attachment, etc.)" );
		Asset.AddEntry_CheckBox( "isCarriedKillstreakWeapon", false ).SetTitle( "isCarriedKillstreakWeapon" ).SetToolTip( "Check if this is a killstreak weapon that the player can equip. (minigun, tv guided missile, etc.)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Melee Fields

	Asset.BeginCategory( "Melee Fields" );
	{
		Asset.AddEntry_CheckBox( "useAsMelee", false ).SetTitle( "Use As Melee" ).SetToolTip( "This weapon will be used for melee attacks, ensure melee animation fields are filled in this weapon." );
		Asset.AddEntry_CheckBox( "meleeServerResponse", false ).SetTitle( "Server Response Charge" ).SetToolTip( "Does a server validated melee charge." );
		Asset.AddEntry_Float( "meleeChargeRange", 0.0, 0.0, 1000.0 ).SetTitle( "Melee Charge Range" ).SetToolTip( "Range away from the target melee assist will occur. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "meleeLungeRange", 0.0, 0.0, 1000.0 ).SetTitle( "Melee Lunge Range" ).SetToolTip( "The attacker will lunge for melee from this far away. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "meleeChargeMinRange", 70.0, 0.0, 1000.0 ).SetTitle( "Melee Charge Min Range" ).SetToolTip( "Min range away from the target melee assist will occur. If zero defualt dvar will be used." );
		Asset.AddEntry_Float( "meleeTime", 0.7, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee" ).SetToolTip( "Rate of fire in seconds per melee attack." );
		Asset.AddEntry_Float( "meleeAltTime", 0.7, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Alt" ).SetToolTip( "Rate of fire in seconds per melee alt attack." );
		Asset.AddEntry_Float( "meleeDelay", 0.25, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee attack actually happening." );
		Asset.AddEntry_Float( "meleeAltAnimTime", 0, 0.0, 10.0 ).SetTitle( "Melee Alt Anim Time" ).SetToolTip( "If a second melee is performed within this time window, the alt melee anim will play, if anim is defined, 0.0 to disable." );
		Asset.AddEntry_Float( "meleePowerTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power" ).SetToolTip( "Rate of fire in seconds per melee power attack (right trigger)." );
		Asset.AddEntry_Float( "meleePowerDelay", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Power Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee power attack (right trigger) actually happening." );
		Asset.AddEntry_Float( "meleeChargeTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge" ).SetToolTip( "Rate of fire in seconds per melee charge attack." );
		Asset.AddEntry_Float( "meleeChargeAltTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Alt" ).SetToolTip( "Rate of fire in seconds per melee charge alt attack." );
		Asset.AddEntry_Float( "meleeChargeDelay", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Charge Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the melee charge attack actually happening." );
		Asset.AddEntry_Float( "meleeEndFatalAnimEarlyTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee End Fatal Anim Early" ).SetToolTip( "Amount in seconds that you would like the fatal animation to end early if this melee weapon uses a server result." );
		Asset.AddEntry_Float( "meleeQueueMeleeEarlyTime", 0.0, 0.0, 10.0 ).SetStep( 0.05 ).SetTitle( "Melee Queue Melee Early" ).SetToolTip( "Amount in seconds that you would like to allow the melee to be queued before the fire melee animation has finished." );
		Asset.AddEntry_Int( "meleeDamage", 25, 0, 10000 ).SetTitle( "Melee Damage" ).SetToolTip( "Damage per melee hit." );
		Asset.AddEntry_Int( "meleeFromBehindDamage", 0, 0, 20000 ).SetTitle( "Melee From Behind Damage" ).SetToolTip( "Damage when you hit another player from behind.  If less than meleeDamage, meleeDamage will be used." );

		Asset.AddEntry_CheckBox( "meleeJuke", false ).SetTitle( "Melee Juke" ).SetToolTip( "Do a juke to start a melee attack." );
		Asset.AddEntry_Int( "meleeJukeTime", 1000, 10, 10000 ).SetTitle( "Melee Juke Time (ms)" ).SetToolTip( "Melee juke time in ms" );
		Asset.AddEntry_Int( "meleeJukeAccelTime", 0, 0, 10000 ).SetTitle( "Melee Juke Acceleration Time (ms)" ).SetToolTip( "Melee juke acceleration time in ms" );
		Asset.AddEntry_Int( "meleeJukeDecelTime", 250, 10, 10000 ).SetTitle( "Melee Juke Deceleration Time (ms)" ).SetToolTip( "Melee juke deceleration time in ms" );
		Asset.AddEntry_Float( "meleeJukeSpeed", 500, 10, 10000 ).SetTitle( "Melee Juke Speed" ).SetToolTip( "Melee juke speed" );
		Asset.AddEntry_CheckBox( "meleeJukeIgnoreActors", false ).SetTitle( "Melee Juke Ignore Actors" ).SetToolTip( "Ignore actor collisions on melee juke." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reload Options
	
	Asset.BeginCategory( "Reload Options" );
	{
		Asset.AddEntry_CheckBox( "noPartialReload", false ).SetTitle( "No Partial Reload" ).SetToolTip( "When noPartialReload is set for a weapon, it can not be reloaded unless reloadAmmoAdd amount of ammo can be put into the gun. If reloadAmmoAdd is 0, it's treated as the weapon's clip size." );
		Asset.AddEntry_CheckBox( "segmentedReload", false ).SetTitle( "Segmented Reload" ).SetToolTip( "Turn on for weapons that reload X rounds at a time (Lee-Enfield, bolt-action sniper rifles), set reload amounts in Reload Ammo Add and Reload Start Add." );	
		Asset.AddEntry_CheckBox( "rechamberWhileAds", true ).SetTitle( "ADS Rechamber" ).SetToolTip( "Weapon can be rechambered while in ADS." );
		Asset.AddEntry_CheckBox( "noADSAutoReload", false ).SetTitle( "No ADS Auto-Reload" ).SetToolTip( "Disallow auto-reloading while the weapon is in ADS." );
		Asset.AddEntry_CheckBox( "reloadWhileAds", false ).SetTitle( "ADS Reload" ).SetToolTip( "Weapon can be reloaded while in ADS." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Options
	
	Asset.BeginCategory( "ADS Options" );
	{
		Asset.AddEntry_CheckBox( "aimDownSight", false ).SetTitle( "ADS" ).SetToolTip( "Must be turned on for proper viewmodel appearance of a weapon that can be Aimed Down the Sight (ADS)." );
		Asset.AddEntry_CheckBox( "adsFire", false ).SetTitle( "ADS Fire Only" ).SetToolTip( "Can only be fired ADS.  Firing from the hip brings up ADS." );
		Asset.AddEntry_CheckBox( "noAdsWhenMagEmpty", false ).SetTitle( "No ADS With Empty Magazine" ).SetToolTip( "Disallow ADS when magazine is empty." );
		Asset.AddEntry_CheckBox( "keepCrosshairWhenADS", false ).SetTitle( "keepCrosshairWhenADS" ).SetToolTip( "Keep the crosshairs on-screen when ADS." );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Attachment Perks ( unused )
	
	Asset.BeginCategory( "Attachment Perks" );
	{
		Asset.AddEntry_CheckBox( "silenced", false ).SetTitle( "Silenced" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon is considered silenced." );
		Asset.AddEntry_CheckBox( "infraRed", false ).SetTitle( "InfraRed" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon uses Infra-Red vision." );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
 		// Weapon Perks
	
	Asset.AddEntry_Text( "mods", "" ).SetTitle( "Weapon Perks" ).SetHints( "NOWARNINGS" ).SetToolTip( "specialties that this weapon will have, one per line" ).Show( false );
	
	Asset.BeginCategory( "Weapon Perks" );
	{
		Asset.ShowEntry( "mods" );
	}
	
 	
	// Crosshair Options
	
	Asset.BeginCategory( "Crosshair Options" );
	{
		Asset.AddEntry_Float( "enemyCrosshairRange", 0, 0.0, 10000 ).SetTitle( "Enemy Crosshair Range" ).SetToolTip( "The range in at which friendly names appear and friendly or enemy changes your crosshair color." );
		Asset.AddEntry_CheckBox( "crosshairColorChange", true ).SetTitle( "Crosshair Color Change" ).SetToolTip( "Change crosshair color if pointing at friendly or enemy" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Lock On Options
	
	Asset.BeginCategory( "Lock On Options" );
	{	
		Asset.AddEntry_CheckBox( "requireLockonToFire", false ).SetTitle( "Require Lock On" ).SetToolTip( "Player cannot fire the weapon until script has granted them a lock-on." );
		Asset.AddEntry_Int( "lockOnSpeed", 0, 0, 10000 ).SetTitle( "Lock On Speed" ).SetToolTip( "Lock on speed in miliseconds." );
		Asset.AddEntry_Int( "lockOnMinRange", 0, 10, 10000 ).SetTitle( "Lock On Min Range" ).SetToolTip( "Min range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRange", 0, 0, 10000 ).SetTitle( "Lock On Max Range" ).SetToolTip( "Max range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRangeNoLineOfSight", 0, 0, 10000 ).SetTitle( "Lock On Max Range No Line of Sight" ).SetToolTip( "Max range for locking on when there is no line of sight" );
		Asset.AddEntry_Int( "lockOnScreenRadius", 25, 0, 10000 ).SetTitle( "Lock On Screen Radius" ).SetToolTip( "Screen size for soft target lockon" );
		Asset.AddEntry_Float( "lockOnRadius", 0, 0, 500 ).SetTitle( "Lock On Radius" ).SetToolTip( "Lock on radius in pixels." );			
		Asset.AddEntry_Float( "lockOnLossRadius", 0, 0, 500 ).SetTitle( "Lock On Loss Radius" ).SetToolTip( "Lock on loss radius in pixels." );			

		//Asset.AddEntry_Float( "lockOnTimeMultInCover", 1, 1, 10 ).SetTitle( "Lock On Time Multiplier for Cover" ).SetToolTip( "Lock on time multiplier while target is in cover" );
		Asset.AddEntry_Int( "lockOnLostSightPivotTimeout", 2000, 0, 10000 ).SetTitle( "Lock On Loss Timeout" ).SetToolTip( "If the player loses sight of the Pivot Point for this long, the Lock-On is lost" );
		Asset.AddEntry_Int( "lockOnRequiredMsgSuppressAfterFireTime", 0, 0, 10000 ).SetTitle( "Lock On Required Message Suppress After Fire Time" ).SetToolTip( "The window of time in which the lock on required message will not appear after the player fires the weapon (in milliseconds)" );

		Asset.AddEntry_Float( "pivotTargetAttractMin", 0, 0, 1 ).SetTitle( "Pivot Target Attracion Min" ).SetToolTip( "Minimum attraction of pivot point to target" );
		Asset.AddEntry_Float( "pivotTargetAttractMax", 0.65, 0, 1 ).SetTitle( "Pivot Target Attracion Max" ).SetToolTip( "Maximum attraction of pivot point to target" );
		Asset.AddEntry_Float( "pivotTargetAttractMinAng", 0, 0, 180 ).SetTitle( "Pivot Target Attracion Min Angle" ).SetToolTip( "Screen angle at which minimum attraction of pivot point to target is applied" );
		Asset.AddEntry_Float( "pivotTargetAttractMaxAng", 15, 0, 180 ).SetTitle( "Pivot Target Attracion Max Angle" ).SetToolTip( "Screen angle at which maximum attraction of pivot point to target is applied" );

		Asset.AddEntry_Float( "targetTetherHorzAng", 15, 0, 180 ).SetTitle( "Lock On Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetTetherVertAng", 9, 0, 180 ).SetTitle( "Lock On Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetLostHorzAng", 20, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is immediately lost" );
		Asset.AddEntry_Float( "targetLostVertAng", 15, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is immediately lost" );

		Asset.AddEntry_Float( "pivotCurveStartDist", 60.0, 0.0, 10000.0 ).SetTitle( "Curve Start Distance" ).SetToolTip( "Distance the bullet travels before it starts to curve." );
		Asset.AddEntry_Int( "lockOnReticleFadeTime", 750, 0, 10000 ).SetTitle( "Lock On Reticle Fade Time" ).SetToolTip( "Time it takes the reticle to fade when locking on" );
		Asset.AddEntry_Float( "lockOnReticleMinAlpha", 0.15, 0.0, 1.0 ).SetTitle( "Lock On Reticle Fade Min Alpha" ).SetToolTip( "Lowest reticle fade level when locking on." );

		Asset.AddEntry_Path( "reticleSeekingLockOn", "" ).SetTitle( "Lock On Locking Reticle" ).SetToolTip( "Reticle displayed while locking." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticleLockOn", "" ).SetTitle( "Lock On Locked Reticle" ).SetToolTip( "Reticle displayed while locked." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotLocked", "" ).SetTitle( "Locked Pivot Marker" ).SetToolTip( "Locked Pivot Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotInvalid", "" ).SetTitle( "Invalid Pivot Marker" ).SetToolTip( "Invalid Pivot Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotTarget", "" ).SetTitle( "Tartget Center Marker" ).SetToolTip( "Target Center Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotSides", "" ).SetTitle( "Target Side Marker" ).SetToolTip( "Target Side Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotLine", "" ).SetTitle( "Pivot Line" ).SetToolTip( "Pivot Line." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_String( "luigiLockOnWidget", "" ).SetTitle( "LUIGI Lock On Widget" ).SetToolTip( "The name of the LUIGI widget to use as the lock on widget." );

	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Grapple Options
	
	Asset.BeginCategory( "Grapple Options" );
	{
		Asset.AddEntry_CheckBox( "grappleWeapon", false ).SetTitle( "Grapple Weapon" ).SetHints( "Grappling hook weapon" ).SetToolTip( "This weapon shoots a grappling hook to pull the player to remote locations." );
		Asset.AddEntry_CheckBox( "grappleWeaponHoldTrigger", false ).SetTitle( "Grapple trigger hold" ).SetHints( "Grappling hook trigger hold" ).SetToolTip( "Trigger must be held down to grapple." );

		Asset.AddEntry_Float( "grappleReelOutSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelOutSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelInSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInAccelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInAccelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInDecelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInDecelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherHorzAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherHorzAng" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherVertAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherVertAng" ).SetToolTip( "Still in development" );

		Asset.AddEntry_Path( "reticleGrapple", "" ).SetTitle( "reticleGrapple" ).SetToolTip( "Still in development" ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_String( "grappleStartTag", "" ).SetTitle( "Grapple Start Tag" ).SetToolTip( "World model tag name the grapple object will start from." );

		Asset.AddEntry_Float( "grappleWobbleTime", 0.5, 0, 10 ).SetTitle( "Grapple wobble time" ).SetToolTip( "Time for a full wobble rotation in seconds." );
		Asset.AddEntry_Float( "grappleWobbleMaxAng", 0, 0, 180 ).SetTitle( "Grapple Wobble Max Angle" ).SetToolTip( "Maximum wobble angle" );
		Asset.AddEntry_Float( "grappleWobbleAngTime", 0.2, 0, 10 ).SetTitle( "Grapple wobble angle time" ).SetToolTip( "Time for a full zero to max to negative max to zero angle cycle in milliseconds." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Movement, Sprint, Turning
	
	Asset.BeginCategory( "Movement, Sprint, Turning" );
	{
		Asset.AddEntry_Float( "moveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Move Speed Scale" ).SetToolTip( "When using this weapon, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "adsMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Scale" ).SetToolTip( "When using this weapon and in ADS, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "jumpMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Jump Move Speed Scale" ).SetToolTip( "When using this weapon and jumping, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "firingSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Firing Speed Scale" ).SetToolTip( "When firing this weapon, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "ADS Firing Speed Scale" ).SetToolTip( "When firing this weapon and in ADS, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "sprintFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Sprint Firing Speed Scale" ).SetToolTip( "When firing this weapon and in sprint, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeIn", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time In" ).SetToolTip( "Time to lerp from regular MoveSpeedScale to ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeOut", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time Out" ).SetToolTip( "Time to lerp to regular MoveSpeedScale from ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "sprintDurationScale", 1, 0.0, 5.0 ).SetTitle( "Sprint Duration Scale" ).SetToolTip( "When sprinting with this weapon, sprint duration is multiplied by this amount." );
		Asset.AddEntry_Float( "sprintRestoreDelay", 0.0, 0.0, 2.0 ).SetTitle( "Sprint Restore Delay" ).SetToolTip( "When sprinting with this weapon, returning to sprint after ads or firing is delayed by this amount." );
		Asset.AddEntry_Float( "maxHorTurnSpeed", 0, 0.0, 720.0 ).SetTitle( "Yaw Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Float( "maxVertTurnSpeed", 0, 0.0, 720.0 ).SetTitle( "Pitch Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Int( "gunMaxPitch", 30, 0, 80 ).SetTitle( "Max Gun Pitch" ).SetToolTip( "Maximum allowed vertical ascent of the viewmodel due to recoil (degrees)." );
		Asset.AddEntry_Int( "gunMaxYaw", 30, 0, 80 ).SetTitle( "Max Gun Yaw" ).SetToolTip( "Maximum allowed horizontal travel of the viewmodel due to recoil (degrees)." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Flamethrower Details ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Aim Assist ( Console Only )
	
	Asset.BeginCategory( "Aim Assist ( Console Only )" );
	{
		Asset.AddEntry_Float( "autoAimRange", 1600, 0, 8000 ).SetTitle( "Auto Aim Range" ).SetToolTip( "(Console only.) The range in world units up to which entering ADS will lock-on to enemies. (1 world unit = 1 inch)" );
		Asset.AddEntry_Float( "aimAssistRange", 3200, 0, 8000 ).SetTitle( "Aim Assist Range" ).SetToolTip( "(Console only.) The range in world units up to which the crosshair will stick to targets. (1 world unit = 1 inch) " );
		Asset.AddEntry_Float( "aimAssistRangeAds", 3200, 0, 8000 ).SetTitle( "Aim Assist Range ADS" ).SetToolTip( "(Console only.) The range in world units up to which the crosshair will stick to targets in ADS. (1 world unit = 1 inch)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Heating (for infrared)
	
	Asset.BeginCategory( "Heating" );
	{
		Asset.AddEntry_CheckBox( "overheatWeapon", false ).SetTitle( "Overheating Weapon" ).SetToolTip( "This weapon can overheat" );
		Asset.AddEntry_Float( "overheatRate", 60, 0, 100 ).SetTitle( "Heating Rate" ).SetToolTip( "Percent of heat added per shot for this weapon" );
		Asset.AddEntry_Float( "cooldownRate", 30, 0, 100 ).SetTitle( "Cooldown Rate" ).SetToolTip( "Percent of heat that is bled off per second for this weapon" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammunition
	
	Asset.BeginCategory( "Ammunition" );
	{
		Asset.AddEntry_Int( "burstCount", 1, 1, 7 ).SetTitle( "Burst Count" ).SetToolTip( "Specifies how many bullets shot by either regular or auto burst fire." );
		Asset.AddEntry_CheckBox( "sharedAmmo", false ).SetTitle( "Shared Ammo" ).SetToolTip( "Sets this gun to use a shared ammo pool" );
		Asset.AddEntry_String( "ammoName", "" ).SetTitle( "Ammo Name" ).SetToolTip( "Allows different weapons to share the same ammo pool." );
		Asset.AddEntry_String( "clipName", "" ).SetTitle( "Clip Name" ).SetToolTip( "Allows different weapons to share clips. Used for weapons that have a selective fire option, and would therefore need to use the same type of clip." );
		Asset.AddEntry_CheckBox( "ammoCountClipRelative", false ).SetTitle( "Ammo Count Clip Relative" ).SetToolTip( "Start, Max, and Drop ammo will be based on clip size.  So a 3 in Max Ammo will be (3 * Clip Size)" );
		Asset.AddEntry_Int( "clipSize", 10, 0, 2147483647 ).SetTitle( "Clip Size" ).SetToolTip( "Specifies how many bullets per clip/magazine." );
		Asset.AddEntry_CheckBox( "clipOnly", false ).SetTitle( "Clip Only" ).SetToolTip( "Used for weapons that use clips only" );
		Asset.AddEntry_CheckBox( "dontTakeClipOnlyWeaponIfEmpty", false ).SetTitle( "Don't Take Clip Only Weapon If Empty" ).SetToolTip( "Provides a method of disabling taking of clip only weapons when they are empty." );
		Asset.AddEntry_Int( "maxAmmo", 100, 0, 2147483647 ).SetStep( 10 ).SetTitle( "Max Stock Ammo" ).SetToolTip( "Max stock ammo the player can collect for this weapon, clip isn't reflected in this number. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "startAmmo", 0, 0, 2147483647 ).SetTitle( "Start Ammo" ).SetToolTip( "How much ammo the player gets when starting with this weapon. One clip/magazine from this amount will be already in the weapon. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "dropAmmoMin", 0, 0, 2147483647 ).SetTitle( "Drop Min" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains at least this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );	
		Asset.AddEntry_Int( "dropAmmoMax", 0, 0, 2147483647 ).SetTitle( "Drop Max" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains no more than this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "dropClipAmmoMin", 0, 0, 1000 ).SetTitle( "Drop Clip Min" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains at least this much ammo in the clip." );
		Asset.AddEntry_Int( "dropClipAmmoMax", 1000, 0, 1000 ).SetTitle( "Drop Clip Max" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains no more than this much ammo in the clip." );
		Asset.AddEntry_Int( "maxInstancesAllowed", 0, 0, 20 ).SetTitle( "Max Instances Allowed" ).SetToolTip( "Destroy the oldest instance when there are already this many out when a new one spawns." );
		Asset.AddEntry_Int( "reloadAmmoAdd", 0, 0, 999 ).SetTitle( "Reload Ammo Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add when reloading with some amount of bullets still remaining in the weapon." );	
		Asset.AddEntry_Int( "reloadStartAdd", 0, 0, 999 ).SetTitle( "Reload Start Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add for the first reload segment (ie: when weapon is empty.)" );	
		Asset.AddEntry_Float( "lowAmmoWarningThreshold", 0.33, 0, 1 ).SetStep( 0.1 ).SetTitle( "Clip-Ammo Low Warning %" ).SetToolTip( "The game optionally displays low-ammo warnings when remaining clip ammo goes below this percentage." );
		Asset.AddEntry_CheckBox( "cancelAutoHolsterWhenEmpty", false ).SetTitle( "Do Not Auto-Holster When Empty" ).SetToolTip( "When weapons are empty, they are normally auto-swapped to the next usable weapon in the player's inventory.  This disables that." );
		Asset.AddEntry_CheckBox( "suppressAmmoReserveDisplay", false ).SetTitle( "Hide Display of Reserve Ammo" );
		Asset.AddEntry_CheckBox( "retrievable", false ).SetTitle( "Retrievable" ).SetToolTip( "Grenade can be picked up and returned to the owner's inventory." );
		Asset.AddEntry_CheckBox( "dieOnRespawn", false ).SetTitle( "Die On Respawn" ).SetToolTip( "Grenade will exist and be active until the player respawns." );
		Asset.AddEntry_Combo( "stickiness", "Don't stick | Stick to all | Stick to all, except ai and clients | Stick to all, except vehicles | Stick to ground | Stick to ground, maintain yaw | Stick to flesh" ).SetTitle( "Stickiness" ).SetToolTip( "Stickiness of the projectile, if not explode on impact." );					
		Asset.AddEntry_Combo( "stickorientation", "No Change | Flat | Flat Maintain Direction" ).SetTitle( "Stick Orientation" ).SetToolTip( "Orientation the projectile should stick in." );					
		Asset.AddEntry_CheckBox( "rotate", false ).SetTitle( "Rotate when thrown" );
		Asset.AddEntry_Combo( "rotateType", "Rotate both axis, grenade style | Rotate one axis, blade style | Rotate like a cylinder" ).SetTitle( "Rotate Type" );
		Asset.AddEntry_CheckBox( "hasDetonator", false ).SetTitle( "Has Detonator" ).SetToolTip( "If checked, detonator animations will play when the player presses the detonate button, and a \"detonate\" notify will occur on the player in script." );
		Asset.AddEntry_CheckBox( "allowsDetonateDuringReload", false ).SetTitle( "Allow Detonate on Reload" ).SetToolTip( "If checked, allows the detonator to function during and interrupt the reload sequence." );
		Asset.AddEntry_CheckBox( "unlimitedAmmo", false ).SetTitle("Unlimited Ammo" ).SetToolTip( "This weapon does not use ammo" );
		Asset.AddEntry_CheckBox( "bBoxTrace", false ).SetTitle( "Use Box Trace" ).SetToolTip( "Force weapon to use capsule trace, if plantable it will always do a capsule trace. Will not give you bone locations against players. " );
		Asset.AddEntry_CheckBox( "bBoxTraceSymmetrical", false ).SetTitle( "Force symmetrical trace" ).SetToolTip( "Force the origin of the trace to be in the middle of the trace volume instead at the bottom" );
		Asset.AddEntry_CheckBox( "bBoxTraceAgainstPlayersAI", false ).SetTitle( "Use Box Trace VS Players/AI" ).SetToolTip( "EXPENSIVE. Does a secondary trace to search against capsule traces on players/ai.  If the secondary trace hits you will not get body part information on the hit." );
		Asset.AddEntry_Int( "boxTraceSize", 0, 0, 100 ).SetTitle( "Box Trace Size" ).SetToolTip( "Size in each direction to use when doing a box trace, caused by either 'Force use box trace' and/or 'plantable'. 0 means it will use the dvar 'missilePlantableSize'" );
		Asset.AddEntry_CheckBox( "bAuxiliaryTrace", false ).SetTitle( "Use auxiliary bullet traces" ).SetToolTip( "This weapon will generate auxiliaryTraceCount more traces with auxiliaryTraceRadius offset that it any trace hits a surface it will impact. " );
		Asset.AddEntry_Int( "auxiliaryTraceCount", 4, 1, 6 ).SetTitle( "Auxiliary bullet trace count" ).SetToolTip( "This weapon will generate auxiliaryTraceCount more traces with auxiliaryTraceRadius offset that it any trace hits a surface it will impact. " );
		Asset.AddEntry_Float( "auxiliaryTraceRadius", 5, 0, 32 ).SetStep( 1 ).SetTitle( "Auxiliary bullet trace offset radius" ).SetToolTip( "This weapon will generate auxiliaryTraceCount more traces with auxiliaryTraceRadius offset that it any trace hits a surface it will impact. " );
		Asset.AddEntry_CheckBox( "doGibbing", false ).SetTitle( "Do Gibbing" ).SetToolTip( "This gun will gib enemy if checked" );
		Asset.AddEntry_CheckBox( "doGibbingOnMelee", false ).SetTitle( "Do Gibbing On Melee" ).SetToolTip( "This gun melee will gib enemy if checked" );
		Asset.AddEntry_Float( "maxGibDistance", 1000.0, 0, 20000 ).SetTitle( "Max Gib Distance" );
		Asset.AddEntry_Float( "gibChance", 0.3, 0, 1 ).SetTitle( "Gib Chance" ).SetToolTip( "Chance that lethal damage will produce a gib" );
	
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stack Fire	

	Asset.BeginCategory( "Stack Fire" );
	{
		Asset.AddEntry_Int( "stackFire", 0, 0, 8 ).SetTitle( "Stack Fire" ).SetToolTip( "Specifies the number of rounds this weapon can fire at once" );
		Asset.AddEntry_Float( "stackFireAccuracyDecay", 0, 0, 10 ).SetTitle( "Accuracy Decay" ).SetToolTip( "Specifies the amount that each round reduces accuraccy by:  spread*=[n]^[number of rounds-1]" );
		Asset.AddEntry_Float( "stackFireSpread", 15, 0, 90 ).SetTitle( "Spread Angle" ).SetToolTip( "Specifies the spread in degrees for stacked fire" );
		Asset.AddEntry_String( "stackSound", "" ).SetTitle( "Stack Sound" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Charge Shot	

	Asset.BeginCategory( "Charge Shot" );
	{
		Asset.AddEntry_CheckBox( "chargeShotFireWhenQueueReachesMax", false ).SetTitle( "Charge Shot Fire When Queue Reaches Max" ).SetToolTip( "Whether to fire the charge shot weapon automatically when it reaches max bullet queue" );
		Asset.AddEntry_CheckBox( "chargeShotCancelIfTriggerReleasedBeforeMinTime", false ).SetTitle( "Charge Shot Cancel If Trigger Released Before Min Time" ).SetToolTip( "If the trigger is released before min time is reached, cancel the shot" );
		Asset.AddEntry_Int( "chargeShotMaxLevel", 0, 0, 10 ).SetTitle( "Charge Shot Number Of Levels" ).SetToolTip( "Specifies how many levels exist for the charge shot.  Need one weapon per level. This value should be the same in all the weapons." );
		Asset.AddEntry_Float( "chargeShotMaxTime", 0, 0, 10000 ).SetTitle( "Charge Shot Total Time" ).SetToolTip( "Total time needed to fully charge the shot.  This value should be the same in all the weapons." );
		Asset.AddEntry_Float( "chargeShotMinTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Minimum Charge Shot Time" ).SetToolTip( "Minimum length of the charge shot before it can be fired" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reloadable Fuel Tank	( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Overheating ( unused )

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Auto turret scanning ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Indicators
	
	Asset.BeginCategory( "Indicators" );
	{
		Asset.AddEntry_Int( "indicatorRadius", 0, 0, 10000 ).SetTitle( "Indicator Radius" ).SetStep( 10 ).SetToolTip( "Indicator radius, distance from the grenade the indicator will show. if zero, default will be used. (Max of cg_hudGrenadeIconMaxRangeFrag or damage radius)" );
		Asset.AddEntry_CheckBox( "showIndicator", false ).SetTitle( "Show Indicator" ).SetToolTip( "Show grenade indicator icon. If unchecked, default values will be used. (frag grenades always show indicators)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Tracer
	
	Asset.BeginCategory( "Tracer" );
	{
		Asset.AddEntry_AssetCombo( "tracerType", "tracer" ).SetTitle( "Tracer Type" );
		Asset.AddEntry_AssetCombo( "enemyTracerType", "tracer" ).SetTitle( "Enemy tracer Type" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Grapple Options
	
	Asset.BeginCategory( "Grapple Options" );
	{
		Asset.AddEntry_CheckBox( "grappleWeapon", false ).SetTitle( "Grapple Weapon" ).SetHints( "Grappling hook weapon" ).SetToolTip( "This weapon shoots a grappling hook to pull the player to remote locations." );

		Asset.AddEntry_Float( "grappleReelOutSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelOutSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelInSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInAccelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInAccelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInDecelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInDecelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherHorzAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherHorzAng" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherVertAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherVertAng" ).SetToolTip( "Still in development" );

		Asset.AddEntry_Path( "reticleGrapple", "" ).SetTitle( "reticleGrapple" ).SetToolTip( "Still in development" ).SetRelativePath( "pc/main/" );
		//Asset.AddEntry_AssetCombo( "projectileModel", "xmodel" ).SetTitle( "Grapple Model" ).SetToolTip( "Define the model to be used for the grapple projectile" );
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Location Damage
	
	Asset.BeginCategory( "Location Damage" );
	{
		Asset.AddEntry_CheckBox( "customBool2", false ).SetTitle( "Force Damage Hit Location (e.g. headshots)" ).SetToolTip( "Forces the specification of a damage hit location. Useful for getting headshots with projectile weapons; non-guided recommended." );
		Asset.AddEntry_Float( "locNone", 1, 0, 10 ).SetStep( 0.1 ).SetTitle( "None" ).SetToolTip( "Unrelated to weapon. Used for damage that's not location based, such as grenades or falling.  Included here for completeness." );
		Asset.AddEntry_Float( "locHelmet", 4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Helmet" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locHead", 4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Head" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locNeck", 5, 0, 10 ).SetStep( 0.1 ).SetTitle( "Neck" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoUpper", 1, 0, 10 ).SetStep( 0.1 ).SetTitle( "Upper Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoMid", 1, 0, 10 ).SetStep( 0.1 ).SetTitle( "Mid Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locTorsoLower", 0.9, 0, 10 ).SetStep( 0.1 ).SetTitle( "Lower Torso" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftArmUpper", 0.8, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Upper Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightArmUpper", 0.8, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Upper Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftArmLower", 0.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Lower Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightArmLower", 0.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Lower Arm" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftHand", 0.4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Hand" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightHand", 0.4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Hand" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftLegUpper", 0.8, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Upper Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightLegUpper", 0.8, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Upper Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftLegLower", 0.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Lower Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightLegLower", 0.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Lower Leg" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locLeftFoot", 0.4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Left Foot" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locRightFoot", 0.4, 0, 10 ).SetStep( 0.1 ).SetTitle( "Right Foot" ).SetToolTip( "Damage per-bullet multiplier." );
		Asset.AddEntry_Float( "locGun", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Gun" ).SetToolTip( "Damage per-bullet multiplier." );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// State Timers
	
	Asset.BeginCategory( "State Timers" );
	{
		Asset.AddEntry_Float( "introFireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Intro Fire" ).SetToolTip( "Rate of fire in seconds per round during 'intro fire'. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Int( "introFireLength", 0, 0, 200 ).SetTitle( "Intro Fire Rounds" ).SetToolTip( "How many rounds to fire at the 'Intro Fire' rate before reverting to normal fire." );
		Asset.AddEntry_Float( "fireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire" ).SetToolTip( "Rate of fire in seconds per round. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "lastFireTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Last Shot" ).SetToolTip( "Rate of fire in seconds per round for the last bullet. If zero, the standard fire rate is applied. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "fireDelay", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the weapon actually firing." );
		Asset.AddEntry_Float( "detonateTime", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Detonate" ).SetToolTip( "Length of the detonate animation." );
		Asset.AddEntry_Float( "detonateDelay", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Detonate Delay" ).SetToolTip( "Delay in seconds between pressing the detonate button and the detonation actually happening." );
		Asset.AddEntry_Float( "holdFireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Hold Fire" ).SetToolTip( "Length of the hold fire (pullback) animation." );
		Asset.AddEntry_Float( "burstFireDelay", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Burst Fire Delay" ).SetToolTip( "Delay in seconds between burst fires.  This is in addition to the fire time from the last shot." );
		Asset.AddEntry_Float( "jamFireTime", 0.05, 0, 10 ).SetStep( 0.05 ).SetTitle( "Jam Fire Time" ).SetToolTip( "Rate of fire in seconds per round that when exceeded causes jamming issues" );
		Asset.AddEntry_Float( "spinUpTime", 1, 0, 10 ).SetTitle( "Spin Up Time" ).SetToolTip( "Time it takes for a minigun weapon to spin up to firing speed from zero." );
		Asset.AddEntry_Float( "spinDownTime", 1, 0, 10 ).SetTitle( "Spin Down Time" ).SetToolTip( "Time it takes for a minigun weapon to spin down to zero from firing speed." );
		Asset.AddEntry_Float( "spinRate", 1, 0, 90 ).SetTitle( "Spin Rate" ).SetToolTip( "Angle in degrees that the minigun spins per frame at full speed" );
		Asset.AddEntry_Float( "reloadTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload" ).SetHints( "NOWARNINGS" ).SetToolTip( "The number of seconds over which the non-empty reload animation will be played.  In segmented reload weapons, this is the animation that loops to give the player ammo." );
		Asset.AddEntry_Float( "reloadEmptyTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "The number of seconds over which the empty reload animation will be played." );
		Asset.AddEntry_Float( "reloadAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Add" ).SetToolTip( "During an partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadQuickTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadQuickEmptyTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Empty"  ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine empty reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadQuickAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Add" ).SetHints( "NOWARNINGS" ).SetToolTip( "During a quick partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadStartAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start Add" ).SetToolTip( "TODO NEEDS EXPLANATION" );
		Asset.AddEntry_Float( "reloadStartTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "reloadEndTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload End" ).SetToolTip( "For a segmented reload weapon, the number of seconds over which the reload end animation will be played." );
		Asset.AddEntry_Float( "reloadEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Add Time" ).SetToolTip( "During an empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadQuickEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Empty Add Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "During a quick empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadSpecialComboTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) The number of seconds over which the non-empty reload animation will be played.  In segmented reload weapons, this is the animation that loops to give the player ammo." );
		Asset.AddEntry_Float( "reloadSpecialComboEmptyTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Empty Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) The number of seconds over which the empty reload animation will be played." );
		Asset.AddEntry_Float( "reloadSpecialComboAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Add" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During an partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickEmptyTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Empty"  ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine empty reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Add" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During a quick partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadSpecialComboEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Empty Add Time" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During an empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadSpecialComboQuickEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Special Combo Quick Empty Add Time" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) During a quick empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadShowRocketTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "...show rocket" ).SetToolTip( "At this point and onward in the Reload anim, the attached rocket xmodel will be shown." ); 
		Asset.AddEntry_Float( "rechamberTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "rechamberBoltTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber Bolt" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "dropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "raiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "firstRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "First Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Raise" ).SetHints( "NOWARNINGS" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Raise" ).SetHints( "NOWARNINGS" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "chargeSprintOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Charge Sprint Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );		
		Asset.AddEntry_Float( "sprintOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintCombatTime", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Combat Time" ).SetToolTip( "Time it takes to fire from sprint when using sprint fire perk." );
		Asset.AddEntry_Float( "sprintCombatCooldownTime", 1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Combat Cooldown" ).SetToolTip( "Time to remain in sprint combat mode after firing." );
		Asset.AddEntry_Float( "lowReadyInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "contFireOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Cont. Fire Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlInTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlForwardTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Forward" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlBackTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Back" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlRightTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Right" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlLeftTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Left" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlOutFireTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Out Fire" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "crawlOutTime", 0.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Crawl Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapCancelTime", 0.016, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Cancel" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "leapOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Leap Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "diveOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Dive Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimFromLandTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Transition From Land Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimIdleLoopTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Idle Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatCooldownTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat Cooldown Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimCombatOutTime", 0.2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Combat Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingForwardTime", 1.15, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Forward Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingBackwardTime", 0.95, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Backward Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingLeftTime", 1.05, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Left Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingRightTime", 1.15, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Right Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimMovingOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Moving Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintInTime", 0.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintLoopTime", 1.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintSurfaceLoopTime", 1.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Surface Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimSprintOutTime", 0.25, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Sprint Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimToLandTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Transition To Land Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Drop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "wallRunOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "WallRun Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpCancelTime", 0.016, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Cancel" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "doubleJumpOutTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "DoubleJump Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleNoTargetTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple No Target Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleStartTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple Start Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleAnchorAscendTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple Anchor For Ascend Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleAscendEndTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple Ascend End Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleAnchorYankTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple Anchor For Yank Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "grappleYankEndTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Grapple Yank End Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );

		Asset.AddEntry_Float( "weaponSwitchCancelTransitionTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Weapon Switch Cancel Transition Time" ).SetToolTip( "Transition time to use in response to a YY weapon switch cancel." );
		Asset.AddEntry_Float( "castInTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast In Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castLoopTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castOutTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Out Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castOutHitTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Out Hit Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sprint Movement Settings
	
	Asset.BeginCategory( "Sprint Movement Settings" );
	{
		Asset.AddEntry_Float( "sprintOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "sprintOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "sprintRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "sprintRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "sprintScale", 1, 0.01, 10 ).SetStep( 0.01 ).SetTitle( "MoveSpeed Scale" ).SetToolTip( "A multiplier applied to xy movement of the viewmodel during sprint higher is faster" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// LowReady Movement Settings
	
	Asset.BeginCategory( "LowReady Movement Settings" );
	{
		Asset.AddEntry_Float( "lowReadyOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "lowReadyOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "lowReadyOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "lowReadyRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "lowReadyRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "lowReadyRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Riding Vehicle Settings
	
	Asset.BeginCategory( "Riding Vehicle Settings" );
	{
		Asset.AddEntry_Float( "rideOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player rides a vehicle, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "rideOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "rideRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is riding a vehicle. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "rideRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Dive to Prone Movement Settings
	
	Asset.BeginCategory( "Dive to Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "dtpOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "dtpOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "dtpRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "dtpRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "dtpScale", 1, 0.01, 10 ).SetStep( 0.1 ).SetTitle( "MoveSpeed Scale" ).SetToolTip( "A multiplier applied to xy movement of the viewmodel during dive to prone higher is faster" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Mantle Movement Settings
	
	Asset.BeginCategory( "Mantle Movement Settings" );
	{
		Asset.AddEntry_Float( "mantleOfsF", 0, -300, 300 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleOfsR", 0, -300, 300 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleOfsU", 0, -300, 300 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotP", 0, -300, 300 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotY", 0, -300, 300 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "mantleRotR", 0, -300, 300 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Player Slide Movement Settings
	
	Asset.BeginCategory( "Player Slide Movement Settings" );
	{
		Asset.AddEntry_Float( "slideOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "slideOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "slideOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "slideRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "slideRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "slideRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Strafe Movement Settings
	
	Asset.BeginCategory( "Strafe Movement Settings" );	
	{
		Asset.AddEntry_Float( "strafeMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is strafing. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "strafeMoveR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is strafing. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "strafeMoveU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is strafing. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "strafeRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is strafing. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "strafeRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is strafing. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "strafeRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is strafing. (+/- for left/right respectively)" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stand Movement Settings
	
	Asset.BeginCategory( "Stand Movement Settings" );
	{
		Asset.AddEntry_Float( "standMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "standMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "standRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "standRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "standMoveMinSpeed", 110, 0, 3000 ).SetStep( 1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posMoveRate", 4, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Move Rate" ).SetToolTip( "Controls speed of viewmodel translation while moving in stand and crouch, transitions between stand and crouch, and crouch into prone." );
		Asset.AddEntry_Float( "standRotMinSpeed", 110, 0, 1000 ).SetStep( 0.1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posRotRate", 5, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Rot Rate" ).SetToolTip( "Rotational speed of viewmodel in standing and crouching. If this is set in the prone section, a value should be entered here so that the viewmodel is able to rotate back to normal in crouch and stand." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crouch Movement Settings

	Asset.BeginCategory( "Crouch Movement Settings" );	
	{
		Asset.AddEntry_Float( "duckedMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "duckedMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "duckedRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "duckedRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedOfsF", -2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "duckedOfsR", 2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "duckedOfsU", -0.2, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "duckedMoveMinSpeed", 60, 0, 3000 ).SetStep( 1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "duckedRotMinSpeed", 60, 0, 1000 ).SetStep( 1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Prone Movement Settings

	Asset.BeginCategory( "Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "proneMoveF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Forward" ).SetToolTip( "Viewmodel will translate forward/backward by this amount if the player is moving in this stance. (+/- for forward/backward respectively)" );
		Asset.AddEntry_Float( "proneMoveR", 1, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Right" ).SetToolTip( "Viewmodel will translate horizontally by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneMoveU", -1.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Move Up" ).SetToolTip( "Viewmodel will translate vertically by this amount if the player is moving in this stance. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "proneRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is moving in this stance. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "proneRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is moving in this stance. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneOfsF", -6, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player changes to this stance, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "proneOfsR", 3.5, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "proneOfsU", 0.8, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player changes to this stance, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "proneMoveMinSpeed", 0, 0, 3000 ).SetStep( 0.1 ).SetTitle( "Move Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posProneMoveRate", 10, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Move Rate" ).SetToolTip( "Controls the speed of viewmodel translation while moving in this stance and changing to crouched." );
		Asset.AddEntry_Float( "proneRotMinSpeed", 0, 0, 1000 ).SetStep( 0.1 ).SetTitle( "Rot Min Speed" ).SetToolTip( "Not used." );
		Asset.AddEntry_Float( "posProneRotRate", 10, 0, 300 ).SetStep( 0.1 ).SetTitle( "Pos Rot Rate" ).SetToolTip( "Controls the speed of viewmodel rotation while moving in this stance." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Idle Settings // Check this...
	
	Asset.BeginCategory( "Idle Settings" );
	{
		Asset.AddEntry_Int( "hipIdleAmount", 80, 0, 150 ).SetStep( 0.1 ).SetTitle( "Hip Amount" ).SetToolTip( "Strength of viewmodel wavering motion when in hipfire position." );
		Asset.AddEntry_Int( "adsIdleAmount", 25, 0, 150 ).SetStep( 0.1 ).SetTitle( "ADS Amount" ).SetToolTip( "Strength of range of viewmodel (or sniper rifle overlay) wavering motion when in ADS." );
		Asset.AddEntry_Float( "hipIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "Hip Speed" ).SetToolTip( "How fast the viewmodel wavers in hipfire position within Hip Amount." );
		Asset.AddEntry_Float( "adsIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "ADS Speed" ).SetToolTip( "How fast the viewmodel wavers in ADS within ADS Amount." );
		Asset.AddEntry_Float( "idleSpeedFromFireTransitionTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Idle Speed From Fire Transition Time" ).SetToolTip( "The time it takes to lerp back up to full idle speed after firing, the EF_FIRING flag, is done" );
		Asset.AddEntry_Float( "idleCrouchFactor", 0.5, 0, 1 ).SetStep( 0.01 ).SetTitle( "Crouch Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
		Asset.AddEntry_Float( "idleProneFactor", 0.15, 0, 1 ).SetStep( 0.01 ).SetTitle( "Prone Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// ADS Settings

	Asset.BeginCategory( "ADS Settings" );		
	{
		Asset.AddEntry_Float( "adsSpread", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Spread" ).SetToolTip( "Size of bullet spread cone when firing in ADS mode. Bullets will project randomly within the confines of the cone." );
		Asset.AddEntry_Float( "adsAimPitch", 0, -30, 30 ).SetStep( 0.1 ).SetTitle( "Aim Pitch" ).SetToolTip( "Adjusts the pitch of the viewmodel in ADS. Defaults to 0, -6 is perfectly centered." );
		Asset.AddEntry_Float( "adsTransInTime", 0.3, 0, 10 ).SetStep( 0.05 ).SetTitle( "Trans In Time" ).SetToolTip( "Time it will take to switch from hipfire to ADS." );
		Asset.AddEntry_Float( "adsTransOutTime", 0.6, 0, 10 ).SetStep( 0.05 ).SetTitle( "Trans Out Time" ).SetToolTip( "Time it will take to switch from ADS to hipfire." );
		Asset.AddEntry_Float( "adsReloadTransTime", 0.6, 0, 5 ).SetStep( 0.01 ).SetTitle( "Reload Trans Time" ).SetToolTip( "Time it takes once you start the reload to re-enter ADS. (ie: It allows you to finish up reloading while you enter ADS." );
		Asset.AddEntry_Float( "adsCrosshairInFrac", 1, 0, 1 ).SetStep( 0.05 ).SetTitle( "Crosshair In Frac" ).SetToolTip( "Fraction of the hipfire-to-ADS transition time over which the crosshair disappears." );
		Asset.AddEntry_Float( "adsCrosshairOutFrac", 0.2, 0, 1 ).SetStep( 0.05 ).SetTitle( "Crosshair Out Frac" ).SetToolTip( "Fraction of the ADS-to-hipfire transition time over which the crosshair appears." );

		Asset.AddEntry_Float( "adsTurnRateScalar", 1, 0.01, 10 ).SetTitle( "ADS Turn Rate Scalar" ).SetToolTip( "Scalar to turn rate that is applied when in ADS." );
		Asset.AddEntry_Float( "adsFlinchScalar", 1, 0.01, 10 ).SetTitle( "ADS Flinch Scalar" ).SetToolTip( "Scalar to the Damage Flinch that is applied when in ADS." );
		Asset.AddEntry_Float( "adsFiringFlinchScalar", 1, 0.01, 10 ).SetTitle( "ADS Firing Flinch Scalar" ).SetToolTip( "Scalar to the Damage Flinch that is applied when in ADS and firing." );
		Asset.AddEntry_Float( "adsWallRunBobScalar", 1, 0.01, 10 ).SetTitle( "ADS Wall Run Bob Scalar" ).SetToolTip( "Scalar to wall run bob that is applied when in ADS." );

		Asset.AddEntry_Float( "adsAdditiveFallScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Fall Scalar" ).SetToolTip( "Scalar to additive fall anim that is applied when in ADS." );
		Asset.AddEntry_Float( "adsAdditiveJumpScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Jump Scalar" ).SetToolTip( "Scalar to additive jump anim that is applied when in ADS." );
		Asset.AddEntry_Float( "adsAdditiveJumpLandScalar", 1, 0.01, 10 ).SetTitle( "ADS Additive Jump Land Scalar" ).SetToolTip( "Scalar to additive jump land anim that is applied when in ADS." );
		
		Asset.AddEntry_Float( "adsZoom1_focalLength", 20, 15, 600 ).SetTitle( "High Zoom Focal Length" ).SetToolTip( "High Zoom Focal length when in ADS." );
		Asset.AddEntry_Float( "adsZoom2_focalLength", 20, 15, 600 ).SetTitle( "Med Zoom Focal Length" ).SetToolTip( "Med Zoom Focal length when in ADS." );
		Asset.AddEntry_Float( "adsZoom3_focalLength", 20, 15, 600 ).SetTitle( "Low Zoom Focal Length" ).SetToolTip( "Low Zoom Focal length when in ADS." );
		
				
		Asset.AddEntry_Float( "adsZoom1_fStop", 24, 1.2, 120 ).SetTitle( "High Zoom F-Stop" ).SetToolTip( "High Zoom F-Stop when in ADS." );
		Asset.AddEntry_Float( "adsZoom2_fStop", 24, 1.2, 120 ).SetTitle( "Med Zoom F-Stop" ).SetToolTip( "Med Zoom F-Stop when in ADS." );
		Asset.AddEntry_Float( "adsZoom3_fStop", 24, 1.2, 120 ).SetTitle( "Low Zoom F-Stop" ).SetToolTip( "Low Zoom F-Stop when in ADS." );
		
		Asset.AddEntry_String( "adsZoomSound", "" ).SetTitle( "ADS Zoom Sound" ).SetToolTip( "Sound emitted when zoom toggled." );
		Asset.AddEntry_Float( "adsZoomInFrac", 0.5, 0, 1 ).SetStep( 0.05 ).SetTitle( "Zoom In Frac" ).SetToolTip( "Fraction of the hipfire-to-ADS transition time over which the FOV zoom-in FX happens." );
		Asset.AddEntry_Float( "adsZoomOutFrac", 0.1, 0, 1 ).SetStep( 0.05 ).SetTitle( "Zoom Out Frac" ).SetToolTip( "Fraction of the ADS-to-hipfire transition time over which the FOV zoom-out FX happens." );
		Asset.AddEntry_Float( "adsBobFactor", 1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Bob Factor" ).SetToolTip( "Strength of viewmodel bobbing due to player movement when using this weapon." );
		Asset.AddEntry_Float( "adsViewBobMult", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "View Bob Mult" ).SetToolTip( "Bob Factor multiplier for view bobbing due to player movement when using this weapon in ADS." );
		Asset.AddEntry_Float( "adsViewErrorMin", 0, 0, 90 ).SetStep( 0.1 ).SetTitle( "Min View Error" ).SetToolTip( "Min View Error." );
		Asset.AddEntry_Float( "adsViewErrorMax", 0, 0, 90 ).SetStep( 0.1 ).SetTitle( "Max View Error" ).SetToolTip( "Max View Error." );

		Asset.AddEntry_CheckBox( "adsSwayViewInsteadOfGun", false ).SetTitle( "ADS Sway View Instead of Gun" ).SetToolTip( "Makes the view sway with the gun locked to it, instead of the view locked and the gun swaying like a typical weapons. This is the old behavior from overlay based sniper rifles, but without requiring an overlay" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Hip Spread Settings
	
	Asset.BeginCategory( "Hip Spread Settings" );
	{
		Asset.AddEntry_Float( "hipSpreadStandMin", 4, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Min" ).SetToolTip( "Smallest diameter the crosshairs can contract to." );
		Asset.AddEntry_Float( "hipSpreadMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while standing." );
		Asset.AddEntry_Float( "hipSpreadDecayRate", 1.5, 0, 50 ).SetStep( 0.05 ).SetTitle( "Decay Rate" ).SetToolTip( "Rate at which the crosshairs try to return to the Min hip spread size." );
		Asset.AddEntry_Float( "hipSpreadDuckedMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Min" ).SetToolTip( "Size of the crosshairs at rest when crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Crouch Decay" ).SetToolTip( "Multiplier of Decay Rate for crouched stance, controlling how fast the crosshairs return to Crouch Min." );
		Asset.AddEntry_Float( "hipSpreadProneMin", 2, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Min" ).SetToolTip( "Size of the crosshairs at rest when prone." );
		Asset.AddEntry_Float( "hipSpreadProneMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while prone." );
		Asset.AddEntry_Float( "hipSpreadProneDecay", 1.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Prone Decay" ).SetToolTip( "Multiplier of Decay Rate for prone stance, controlling how fast the crosshairs return to Prone Min." );
		Asset.AddEntry_Float( "hipSpreadSlideMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Min" ).SetToolTip( "Size of the crosshairs at rest when sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Slide Decay" ).SetToolTip( "Multiplier of Decay Rate for sliding stance, controlling how fast the crosshairs return to Slide Min." );
		Asset.AddEntry_Float( "hipSpreadFireAdd", 0.25, 0, 1 ).SetStep( 0.1 ).SetTitle( "Fire Add" ).SetToolTip( "Amount by which the crosshairs expand per bullet fired." );
		Asset.AddEntry_Float( "hipSpreadMoveAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Move Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadSprintAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Sprint Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadTurnAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Turn Add" ).SetToolTip( "Rate of crosshair expansion due to player panning the view in any direction." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Gun Kick Settings
	
	Asset.BeginCategory( "Gun Kick Settings" );
	{
		Asset.AddEntry_Float( "hipGunKickPitchMin", -5, -100, 100 ).SetTitle( "Hip Pitch Min" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Pitch." );
		Asset.AddEntry_Float( "adsGunKickPitchMin", -30, -100, 100 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickPitchMax", -3, -100, 100 ).SetTitle( "Hip Pitch Max" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Pitch." );
		Asset.AddEntry_Float( "adsGunKickPitchMax", -20, -100, 100 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMin", -15, -100, 100 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMin", -17, -100, 100 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMax", 15, -100, 100 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMax", 17, -100, 100 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickAccel", 250, 0, 1000 ).SetTitle( "Hip Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in hipfire. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "adsGunKickAccel", 250, 0, 1000 ).SetTitle( "ADS Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in ADS. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "hipGunKickSpeedMax", 500, 0, 10000 ).SetTitle( "Hip Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in hipfire." );
		Asset.AddEntry_Float( "adsGunKickSpeedMax", 1000, 0, 10000 ).SetTitle( "ADS Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in ADS." );
		Asset.AddEntry_Float( "hipGunKickSpeedDecay", 15, 0, 100 ).SetTitle( "Hip Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in hipfire." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickSpeedDecay", 10, 0, 100 ).SetTitle( "ADS Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in ADS." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "hipGunKickStaticDecay", 1, 0, 100 ).SetTitle( "Hip Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickStaticDecay", 1, 0, 100 ).SetTitle( "ADS Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// View Kick Settings
	
	Asset.BeginCategory( "View Kick Settings" );
	{
		Asset.AddEntry_Float( "hipViewKickPitchMin", 20, -200, 200 ).SetTitle( "Hip Pitch Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMin", 20, -200, 200 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickPitchMax", 40, -200, 200 ).SetTitle( "Hip Pitch Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMax", 95, -200, 200 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMin", -15, -200, 200 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMin", -10, -200, 200 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMax", 15, -200, 200 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMax", 30, -200, 200 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickCenterSpeed", 2000, 10, 10000 ).SetStep( 10 ).SetTitle( "Hip Center Speed" ).SetToolTip( "Speed with which the view continuously attempts to recenter in hipfire." );
		Asset.AddEntry_Float( "adsViewKickCenterSpeed", 2000, 10, 10000 ).SetStep( 10 ).SetTitle( "ADS Center Speed" ).SetToolTip( "Speed with which the view continuously attempts to recenter in ADS." );
		Asset.AddEntry_Float( "adsViewKickCenterDuckedScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Crouch Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in crouch stance." );
		Asset.AddEntry_Float( "adsViewKickCenterProneScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Prone Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in prone stance." );
		Asset.AddEntry_Float( "hipViewKickMinMagnitude", 30, 0, 200 ).SetTitle( "Hip Min Kick Magnitude" ).SetToolTip( "Minimum amount of kick applied when hip firing." );		
		Asset.AddEntry_Float( "adsViewKickMinMagnitude", 30, 0, 200 ).SetTitle( "ADS Min Kick Magnitude" ).SetToolTip( "Minimum amount of kick applied when ADS firing" );
		Asset.AddEntry_Float( "kickAlignedInputScalar", 1, 0.1, 10 ).SetTitle( "Kick Aligned Input Scalar" ).SetToolTip( "Scales the gun and view kick if the user's view input is aligned to the kick direction." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "kickOpposedInputScalar", 1, 0.1, 10 ).SetTitle( "Kick Opposed Input Scalar" ).SetToolTip( "Scales the gun and view kick if the user's view input is opposed to the kick direction." ).SetStep( 0.1 );

	
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sway Settings
	
	Asset.BeginCategory( "Sway Settings" );
	{
		Asset.AddEntry_Float( "swayMaxAngle", 30, 0, 180 ).SetTitle( "Max Angle" ).SetToolTip( "Max angle change that will be applied to the hipfire viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayMaxAngle", 30, 0, 180 ).SetTitle( "ADS Max Angle" ).SetToolTip( "Max angle change that will be applied to the ADS viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayLerpSpeed", 6, 1, 50 ).SetTitle( "Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayLerpSpeed", 6, 1, 50 ).SetTitle( "ADS Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayTransitionLerpSpeed", 0, 0, 50 ).SetTitle( "ADS Transition Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp during ADS transition. Zero means unused." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayPitchScale", 0.1, -2, 2 ).SetTitle( "Pitch Scale" ).SetToolTip( "Amount of pitch change in the viewmodel to apply to the sway pitch in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayPitchScale", 0.1, -2, 2 ).SetTitle( "ADS Pitch Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayYawScale",  0.1, -2, 2 ).SetTitle( "Yaw Scale" ).SetToolTip( "ADS Yaw Scale" ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayYawScale",  0.1, -2, 2 ).SetTitle( "ADS Yaw Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayHorizScale", 0.1, -2, 2 ).SetTitle( "Horiz Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayHorizScale", 0.1, -2, 2 ).SetTitle( "ADS Horiz Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayVertScale", 0.1, -2, 2 ).SetTitle( "Vert Scale" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayVertScale", 0.1, -2, 2 ).SetTitle( "ADS Vert Scale" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayShellShockScale", 5, 0, 20 ).SetTitle( "Shell Shock Scale" ).SetToolTip( "This scale gets applied to the weapon sway while you're in shell shock." ).SetStep( 0.05 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Mountable Weaponry ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// AI Settings

	Asset.BeginCategory( "AI Settings" );
	{
		Asset.AddEntry_Float( "fightDist", 720, 1, 100000 ).SetTitle( "Fight Distance" ).SetToolTip( "Aggro radius. AI using this weapon try to fight enemies detected in this radius. Center of this circle constantly traces along AI's path up to maxdist." );
		Asset.AddEntry_Float( "maxDist", 1400, 1, 100000 ).SetTitle( "Max Distance" ).SetToolTip( "Effective range radius. AI must get to this distance before opening fire on their target with this weapon." );
		Asset.AddEntry_FileCombo( "aiVsAiAccuracyGraph", "share/raw/accuracy/aivsai/", "" ).SetTitle( "AI Vs. AI Accuracy" ).SetToolTip( "Graph file for in-game editing of the non-linear accuracy curve used by the AI for this weapon against another AI." );
		Asset.AddEntry_FileCombo( "aiVsPlayerAccuracyGraph", "share/raw/accuracy/aivsplayer/", "" ).SetTitle( "AI Vs. Player Accuracy" ).SetToolTip( "Graph file for in-game editing of the non-linear accuracy curve used by the AI for this weapon against the player." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reticle Settings

	Asset.BeginCategory( "Reticle Settings" );	
	{
		Asset.AddEntry_AssetCombo( "reticleCenter", "image" ).SetTitle( "Center Reticle" ).SetToolTip( "Center Reticle." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Int( "reticleCenterSize", 32, 1, 480 ).SetTitle( "Center Size" ).SetToolTip( "Center Size." );	
		Asset.AddEntry_Path( "reticleSide", "" ).SetTitle( "Side Reticle" ).SetToolTip( "Side Reticle." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Int( "reticleSideSize", 16, 1, 480 ).SetTitle( "Side Size" ).SetToolTip( "Side Size." );
		Asset.AddEntry_Float( "hipReticleSidePos", 0, 0, 1 ).SetTitle( "Side Position" ).SetToolTip( "Side Position." );
		Asset.AddEntry_Int( "reticleMinOfs", 4, 0, 480 ).SetTitle( "Min Offset" ).SetToolTip( "Min Offset." );
		Asset.AddEntry_String( "reticleWidget", "" ).SetTitle( "Reticle LUIGI Widget" ).SetToolTip( "The LUIGI widget name for this weapons reticle (case sensitive)." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Overlay Settings
	
	Asset.BeginCategory( "ADS Overlay Settings" );
	{
		Asset.AddEntry_String( "adsOverlayShader", "" ).SetTitle( "Shader" ).SetToolTip( "Overlay for sniper rifles in ADS. Uses a quarter circle image to construct a full scope view." );
		Asset.AddEntry_Combo( "adsOverlayReticle", "none | crosshair" ).SetTitle( "Reticle" ).SetToolTip( "Selects a preset image?" );
		Asset.AddEntry_Combo( "adsOverlayInterface", "none | Javelin" ).SetTitle( "Reticle" ).SetToolTip( "Selects a preset image?" );
		Asset.AddEntry_Int( "adsOverlayWidth", 320, 1, 640 ).SetTitle( "Width" );
		Asset.AddEntry_Int( "adsOverlayHeight", 240, 1, 480 ).SetTitle( "Height" );
		Asset.AddEntry_Float( "adsOverlayAlphaScale", 1, 1, 100 ).SetTitle( "Alpha Scale" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XModels
	
	Asset.BeginCategory( "XModels" );
	{
		Asset.AddEntry_AssetCombo( "gunModel", "xmodel" ).SetTitle( "View Gun 1" );
		Asset.AddEntry_String( "viewmodelTag", "" ).SetTitle( "View Gun Tag" ).SetToolTip( "Name of the tag you want the viewmodel to be attached at. If blank, the default will be used (tag_weapon1 for left hand DW weapons, tag_knife_attach for melee weapons, tag_weapon otherwise)." );
		Asset.AddEntry_AssetCombo( "worldModel", "xmodel" ).SetTitle( "World Gun 1" );
		Asset.AddEntry_AssetCombo( "stowedModel", "xmodel" ).SetTitle( "StowedWorldModel" ).SetToolTip( "This model will be used for weapons stowed on the back. If this field is empty, World Gun 1 will be used" );
		Asset.AddEntry_String( "worldModelTagRight", "" ).SetTitle( "World Model Tag (First Gun)" ).SetToolTip( "This is the tag the gun will get attached. In a situation where there are two guns this is the first gun" );
		Asset.AddEntry_String( "worldModelTagLeft", "" ).SetTitle( "World Model Tag (Second Gun)" ).SetToolTip( "This is the tag the second or dual wield gun will get attached." );
		Asset.AddEntry_CheckBox( "useDroppedModelAsStowed", false ).SetTitle( "StowedModelAsDropped" ).SetToolTip( "If checked then the Dropped model will be the same as the Alt stowed World Model" );
		Asset.AddEntry_String( "stowedModelTag", "" ).SetTitle( "Stowed Tag" ).SetToolTip( "Name of the tag you want the stowed gun to be attached at. If blank, the default will be used (tag_stowed_back)." );
		Asset.AddEntry_Vector3( "stowedModelOffsetsF", "stowedModelOffsetsR", "stowedModelOffsetsU", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Offset" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "stowedModelOffsetsPitch", "stowedModelOffsetsYaw", "stowedModelOffsetsRoll", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Rotation" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "handModel", "xmodel" ).SetTitle( "Default view Hand" );
		Asset.AddEntry_CheckBox( "isHandModelOverridable", true ).SetTitle( "Update Hand Model From Script" ).SetToolTip( "If checked then the hand model can be updated from script" );
		Asset.AddEntry_CheckBox( "useOnlyAltWeaoponHideTagsInAltMode", false ).SetTitle( "Only Alt Weapon Tags n Alt Mode" ).SetToolTip( "If checked, then weapon will only use hidetags for altweapon when in altmode instead of merging parents hide tags." );
		Asset.AddEntry_AssetCombo( "worldClipModel", "xmodel" ).SetTitle( "World Clip Model" );
		Asset.AddEntry_AssetCombo( "rocketModel", "xmodel" ).SetTitle( "rocketModel" ).SetToolTip( "When the weapon has ammo in its clip, this model will be attached to the xmodel." );
		Asset.AddEntry_Text( "hideTags", "" ).SetTitle( "Hide Tags" ).SetToolTip( "name of tags to hide on this model.  one per line" );
		Asset.AddEntry_CheckBox( "customBool0", false ).SetTitle( "Hide tag_clip when empty" ).SetToolTip( "If the ammo is zero , this weapon will hide its tag_clip" );	
		Asset.AddEntry_CheckBox( "bShowModelInEachHand", false ).SetTitle( "Show Model In Each Hand" ).SetToolTip( "Displays weapon model on both left and right tags.  This should not be used as a substitute for a full dual wield weapon when complete right and left hand firing is needed." );
		Asset.AddEntry_CheckBox( "customBool4", false ).SetTitle( "Use Left Hand Version of World Model" ).SetToolTip( "When Show Model In Each Hand is also set, this will use worldModelName + '_left' if it can be found instead of worldModel." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Camo
	
	Asset.BeginCategory( "Camo" );
	{
		Asset.AddEntry_AssetCombo( "camo", "weaponcamotable" ).SetTitle( "Weapon Camo Table" ); // HV - Should be weaponcamotable and not weaponcamo directly, title reflects to this as well now
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ladder Sight
	
	Asset.BeginCategory( "Ladder Sight" );
	{
		Asset.AddEntry_CheckBox( "bDynamicLadderSight", false ).SetTitle( "Dynamic Ladder Sight" ).SetToolTip( "Gun has a dynamic ladder sight." );
		Asset.AddEntry_Float( "fDynamicLadderSightDefaultOffset", 0, -20, 20 ).SetTitle( "Default Offset" ).SetToolTip( "Height difference between camera position and default tag position." );;
		Asset.AddEntry_Float( "fDynamicLadderSightADSDistanceFromCamera", 0, -100, 100 ).SetTitle( "ADS Distance From Camera" ).SetToolTip( "Distance of the ladder sight tag from the camera when in ADS." );
		Asset.AddEntry_Float( "fDynamicLadderSightMinPitchClamp", -15, -90, 90 ).SetTitle( "Min Pitch Clamp" ).SetToolTip( "Effectively limits how low the sight will drop by clamping the upward pitch angle (negative value)." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

 	// Attachements
	
	Asset.BeginCategory( "Attachments" );
	{
		for ( int i = 1; i <= 5; i++ )
		{
			string Title;
			bool Visible = true;
			switch ( i-1 )
			{
				case 0: Title = "Optic 1"; 	 						break;
				case 1: Title = "Optic 1 ADS"; 	Visible = false;	break;
				case 2: Title = "Optic 2"; 	 						break;
				case 3: Title = "Ironsights"; 						break;
				case 4: Title = "Clip"; 							break;
			}
				
			Asset.BeginCategory( "Attachments." + Title );
			{
				Asset.AddEntry_AssetCombo( "attachViewModel" + i, "xmodel" ).SetHints( "NOWARNINGS" ).SetTitle( "Attachment View Model" );
				Asset.AddEntry_BoneCombo( "attachViewModelTag" + i, "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "View Model Tag" );
				Asset.AddEntry_Vector3( "attachViewModelOffsetX" + i, "attachViewModelOffsetY" + i, "attachViewModelOffsetZ" + i, 0, 0, 0, -10000, 10000 ).SetTitle( "View Offset Position" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).SetLabels( "Forward", "Right", "Up", "" );
				Asset.AddEntry_Vector3( "attachViewModelOffsetPitch" + i, "attachViewModelOffsetYaw" + i, "attachViewModelOffsetRoll" + i, 0, 0, 0, -180, 180 ).SetTitle( "View Offset Angles" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).SetLabels( "Pitch  ", "Yaw", "Roll", "" );

				Asset.AddEntry_AssetCombo( "attachWorldModel" + i, "xmodel" ).SetTitle( "Attachment World Model" ).SetHints( "NOWARNINGS" ).SetStep( 0.01f ).Show( Visible );
				Asset.AddEntry_BoneCombo( "attachWorldModelTag" + i, "worldModel" ).SetTitle( "World Model Tag" ).SetHints( "NOWARNINGS" ).Show( Visible );
				Asset.AddEntry_Vector3( "attachWorldModelOffsetX" + i, "attachWorldModelOffsetY" + i, "attachWorldModelOffsetZ" + i, 0, 0, 0, -10000, 10000 ).SetTitle( "World Offset Position" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).Show( Visible ).SetLabels( "Forward", "Right", "Up", "" );
				Asset.AddEntry_Vector3( "attachWorldModelOffsetPitch" + i, "attachWorldModelOffsetYaw" + i, "attachWorldModelOffsetRoll" + i, 0, 0, 0, -180, 180 ).SetTitle( "World Offset Angles" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" ).Show( Visible ).SetLabels( "Pitch  ", "Yaw", "Roll", "" );
			}
		}
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XAnims
	
	Asset.BeginCategory( "XAnims", 0.1, 0.2, 0.8, "Icon_animation.png" );
	{
		Asset.AddEntry_AssetCombo( "idleAnim", "xanim" ).SetTitle( "Idle" ).SetHints( "NOWARNINGS" );	
		Asset.AddEntry_AssetCombo( "emptyIdleAnim", "xanim" ).SetTitle( "Empty Idle" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireIntroAnim", "xanim" ).SetTitle( "Fire Intro" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireAnim", "xanim" ).SetTitle( "Fire" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fireDelayAnim", "xanim" ).SetTitle( "Fire Delay" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lastShotAnim", "xanim" ).SetTitle( "Last Shot" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "holdFireAnim", "xanim" ).SetTitle( "Hold Fire" );
		Asset.AddEntry_AssetCombo( "holdFireLoopAnim", "xanim" ).SetTitle( "Hold Fire Loop" );
		Asset.AddEntry_AssetCombo( "holdFireCancelAnim", "xanim" ).SetTitle( "Hold Fire Cancel" );
		Asset.AddEntry_AssetCombo( "detonateAnim", "xanim" ).SetTitle( "Detonate" );
		Asset.AddEntry_AssetCombo( "rechamberAnim", "xanim" ).SetTitle( "Rechamber" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadAnim", "xanim" ).SetTitle( "Reload" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadEmptyAnim", "xanim" ).SetTitle( "Reload Empty Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadStartAnim", "xanim" ).SetTitle( "Reload Start" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadEndAnim", "xanim" ).SetTitle( "Reload End" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadQuickAnim", "xanim" ).SetTitle( "Reload Quick" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "reloadQuickEmptyAnim", "xanim" ).SetTitle( "Reload Quick Empty" ).SetHints( "NOWARNINGS" ).SetToolTip( "Dual Magazine empty reload animation" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboAnim", "xanim" ).SetTitle( "Reload Special Combo" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboEmptyAnim", "xanim" ).SetTitle( "Reload Special Combo Empty Anim" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboQuickAnim", "xanim" ).SetTitle( "Reload Special Combo Quick" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip)" );
		Asset.AddEntry_AssetCombo( "reloadSpecialComboQuickEmptyAnim", "xanim" ).SetTitle( "Reload Special Combo Quick Empty" ).SetHints( "NOWARNINGS" ).SetToolTip( "(Special Combo anims are used if the weapon has grip, fastreload, and extclip) Dual Magazine empty reload animation" );
		Asset.AddEntry_AssetCombo( "raiseAnim", "xanim" ).SetTitle( "Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "dropAnim", "xanim" ).SetTitle( "Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "firstRaiseAnim", "xanim" ).SetTitle( "First Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "altRaiseAnim", "xanim" ).SetTitle( "Alt Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "altDropAnim", "xanim" ).SetTitle( "Alt Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsAltRaiseAnim", "xanim" ).SetTitle( "Ads Alt Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsAltDropAnim", "xanim" ).SetTitle( "Ads Alt Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "quickRaiseAnim", "xanim" ).SetTitle( "Quick Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "quickDropAnim", "xanim" ).SetTitle( "Quick Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "emptyRaiseAnim", "xanim" ).SetTitle( "Empty Raise" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "emptyDropAnim", "xanim" ).SetTitle( "Empty Drop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintInAnim", "xanim" ).SetTitle( "Sprint In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintLoopAnim", "xanim" ).SetTitle( "Sprint Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintOutAnim", "xanim" ).SetTitle( "Sprint Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintInEmptyAnim", "xanim" ).SetTitle( "Sprint In Empty" ).SetHints( "NOWARNINGS" ); // HV - Added spaces between words - 1180 / 1182
		Asset.AddEntry_AssetCombo( "sprintLoopEmptyAnim", "xanim" ).SetTitle( "Sprint Loop Empty" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "sprintOutEmptyAnim", "xanim" ).SetTitle( "Sprint Out Empty" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lowReadyInAnim", "xanim" ).SetTitle( "Low Ready In" ).SetHints( "NOWARNINGS" ); // HV - Fixed from xmodel to xanim, added NOWARNINGS - 1183 / 1185
		Asset.AddEntry_AssetCombo( "lowReadyLoopAnim", "xanim" ).SetTitle( "Low Ready Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lowReadyOutAnim", "xanim" ).SetTitle( "Low Ready Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "contFireInAnim", "xanim" ).SetTitle( "Cont. Fire In" ).SetHints( "NOWARNINGS" ).SetToolTip( "In to fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "contFireLoopAnim", "xanim" ).SetTitle( "Cont. Fire Loop" ).SetHints( "NOWARNINGS" ).SetToolTip( "Looping fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "crawlInAnim", "xanim" ).SetTitle( "Crawl In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlForwardAnim", "xanim" ).SetTitle( "Crawl Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlBackAnim", "xanim" ).SetTitle( "Crawl Back" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlRightAnim", "xanim" ).SetTitle( "Crawl Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlLeftAnim", "xanim" ).SetTitle( "Crawl Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlOutAnim", "xanim" ).SetTitle( "Crawl Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyInAnim", "xanim" ).SetTitle( "Crawl Empty In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyForwardAnim", "xanim" ).SetTitle( "Crawl Empty Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyBackAnim", "xanim" ).SetTitle( "Crawl Empty Back" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyRightAnim", "xanim" ).SetTitle( "Crawl Empty Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyLeftAnim", "xanim" ).SetTitle( "Crawl Empty Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "crawlEmptyOutAnim", "xanim" ).SetTitle( "Crawl Empty Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmInAnim", "xanim" ).SetTitle( "TRM Drop to Reach High" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOutAnim", "xanim" ).SetTitle( "TRM Hand Contact to Mantle High" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmInLowAnim", "xanim" ).SetTitle( "TRM Drop to Reach Low" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOutLowAnim", "xanim" ).SetTitle( "TRM Hand Contact to Mantle Low" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverAnim", "xanim" ).SetTitle( "TRM Over" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverLeftAnim", "xanim" ).SetTitle( "TRM Over Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "trmOverRightAnim", "xanim" ).SetTitle( "TRM Over Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "contFireOutAnim", "xanim" ).SetTitle( "Cont. Fire Out" ).SetHints( "NOWARNINGS" ).SetToolTip( "Out of fire anim used by continuous fire weapons" );
		Asset.AddEntry_AssetCombo( "adsFireAnim", "xanim" ).SetTitle( "ADS Fire" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsFireDelayAnim", "xanim" ).SetTitle( "ADS Fire Delay" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsFireIntroAnim", "xanim" ).SetTitle( "ADS Fire Intro" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsLastShotAnim", "xanim" ).SetTitle( "ADS Last Shot" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsRechamberAnim", "xanim" ).SetTitle( "ADS Rechamber" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsUpAnim", "xanim" ).SetTitle( "ADS Up" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsDownAnim", "xanim" ).SetTitle( "ADS Down" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "adsUpOtherScopeAnim", "xanim" ).SetTitle( "ADS Up - Other Scope" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "walkAnim", "xanim" ).SetTitle( "Additive Walk" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jumpAnim", "xanim" ).SetTitle( "Additive Jump" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jumpLandAnim", "xanim" ).SetTitle( "Additive Jump Land" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeLeftAnim", "xanim" ).SetTitle( "Additive Juke Left" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeRightAnim", "xanim" ).SetTitle( "Additive Juke Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeForwardAnim", "xanim" ).SetTitle( "Additive Juke Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeBackwardAnim", "xanim" ).SetTitle( "Additive Juke Backward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeLeftADSAnim", "xanim" ).SetTitle( "Additive Juke Left ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeRightADSAnim", "xanim" ).SetTitle( "Additive Juke Right ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeForwardADSAnim", "xanim" ).SetTitle( "Additive Juke Forward ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "jukeBackwardADSAnim", "xanim" ).SetTitle( "Additive Juke Backward ADS" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "fallAnim", "xanim" ).SetTitle( "Additive Fall" ).SetHints( "NOWARNINGS" );		
		Asset.AddEntry_AssetCombo( "slide_in", "xanim" ).SetTitle( "Slide In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_in_air", "xanim" ).SetTitle( "Slide In Air" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_loop", "xanim" ).SetTitle( "Slide Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "slide_out", "xanim" ).SetTitle( "Slide Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_in", "xanim" ).SetTitle( "Leap In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_loop", "xanim" ).SetTitle( "Leap Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_cancel", "xanim" ).SetTitle( "Leap Cancel" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "leap_out", "xanim" ).SetTitle( "Leap Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunInAnim", "xanim" ).SetTitle( "Wall Run In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunLoopAnim", "xanim" ).SetTitle( "Wall Run Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "wallRunOutAnim", "xanim" ).SetTitle( "Wall Run Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpIn", "xanim" ).SetTitle( "DoubleJump In" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpLoop", "xanim" ).SetTitle( "DoubleJump Loop" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpCancel", "xanim" ).SetTitle( "DoubleJump Cancel" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "doubleJumpOut", "xanim" ).SetTitle( "DoubleJump Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "meleeAnim", "xanim" ).SetTitle( "Melee" );
		Asset.AddEntry_AssetCombo( "meleeAltAnim", "xanim" ).SetTitle( "Melee Alt Anim" );
		Asset.AddEntry_AssetCombo( "meleeMissAnim", "xanim" ).SetTitle( "Melee Miss" ).SetToolTip( "This is played on a basic melee attack miss." );
		Asset.AddEntry_AssetCombo( "meleeAnimEmpty", "xanim" ).SetTitle( "Melee Empty" );
		Asset.AddEntry_AssetCombo( "meleePowerAnim", "xanim" ).SetTitle( "Melee Power" ).SetToolTip( "The anim played for a melee power attack (right trigger)" );
		Asset.AddEntry_AssetCombo( "meleeChargeAnim", "xanim" ).SetTitle( "Melee Charge" ).SetToolTip( "The anim played for a melee charge" );
		Asset.AddEntry_AssetCombo( "meleeChargeAltAnim", "xanim" ).SetTitle( "Melee Charge Alt Anim" ).SetToolTip( "The alt anim played for a melee charge" );
		Asset.AddEntry_AssetCombo( "meleeChargeAnimAbove", "xanim" ).SetTitle( "Melee Charge Above" ).SetToolTip( "The anim played for a melee charge from Above" );
		Asset.AddEntry_AssetCombo( "meleeChargeAnimHit", "xanim" ).SetTitle( "Melee Charge Hit" ).SetToolTip( "The anim played for a melee charge non-fatal hit (Default or from the front)" );
		Asset.AddEntry_AssetCombo( "meleeChargeAnimFatal", "xanim" ).SetTitle( "Melee Charge Fatal" ).SetToolTip( "The anim played for a melee charge fatal hit (Default or from the front)" );
		Asset.AddEntry_AssetCombo( "meleeChargeAnimMiss", "xanim" ).SetTitle( "Melee Charge Miss" ).SetToolTip( "The anim played for a melee charge miss (Default or from the front)" );
		Asset.AddEntry_AssetCombo( "meleeChainStrike0", "xanim" ).SetTitle( "Chain Melee Strike 0" ).SetToolTip( "The anim played for a chain melee strike 0" );
		Asset.AddEntry_AssetCombo( "meleeChainStrike1", "xanim" ).SetTitle( "Chain Melee Strike 1" ).SetToolTip( "The anim played for a chain melee strike 1" );
		Asset.AddEntry_AssetCombo( "meleeChainStrike2", "xanim" ).SetTitle( "Chain Melee Strike 2" ).SetToolTip( "The anim played for a chain melee strike 2" );
		Asset.AddEntry_AssetCombo( "swimTransitionFromLand", "xanim" ).SetTitle( "Swim Transition From Land" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimIdleLoop", "xanim" ).SetTitle( "Swim Idle Loop" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimCombatIdleIn", "xanim" ).SetTitle( "Swim Combat Idle In" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimCombatIdle", "xanim" ).SetTitle( "Swim Combat Idle" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimCombatOut", "xanim" ).SetTitle( "Swim Combat Out" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimCombatFire", "xanim" ).SetTitle( "Swim Combat Fire" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimCombatAdsFire", "xanim" ).SetTitle( "Swim Combat ADS Fire" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimMovingIn", "xanim" ).SetTitle( "Swim Moving In" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimMovingForward", "xanim" ).SetTitle( "Swim Moving Forward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimMovingBackward", "xanim" ).SetTitle( "Swim Moving Backward" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimMovingRight", "xanim" ).SetTitle( "Swim Moving Right" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimMovingLeft", "xanim" ).SetTitle( "Swim Moving Left" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimMovingOut", "xanim" ).SetTitle( "Swim Moving Out" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimSprintIn", "xanim" ).SetTitle( "Swim Sprint In" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimSprintLoop", "xanim" ).SetTitle( "Swim Sprint Loop" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimSprintSurfaceLoop", "xanim" ).SetTitle( "Swim Sprint Surface Loop" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimSprintOut", "xanim" ).SetTitle( "Swim Sprint Out" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimTransitionToLand", "xanim" ).SetTitle( "Swim Transition To Land" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimRaise", "xanim" ).SetTitle( "Swim Pullout" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimQuickRaise", "xanim" ).SetTitle( "Swim Quick Pullout" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimDrop", "xanim" ).SetTitle( "Swim Putaway" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimDiveIn", "xanim" ).SetTitle( "Swim Dive In" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimDiveLoop", "xanim" ).SetTitle( "Swim Dive Loop" ).SetHints( "NOWARNINGS" );
        Asset.AddEntry_AssetCombo( "swimDiveOut", "xanim" ).SetTitle( "Swim Dive Out" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castIn", "xanim" ).SetTitle( "Cast Ability In Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castLoop", "xanim" ).SetTitle( "Cast Ability Loop Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castOut", "xanim" ).SetTitle( "Cast Ability Out Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castOutHit", "xanim" ).SetTitle( "Cast Ability Out Hit Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveIn", "xanim" ).SetTitle( "Cast Passive Ability In Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveLoop", "xanim" ).SetTitle( "Cast Passive Ability Loop Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castPassiveOut", "xanim" ).SetTitle( "Cast Passive Ability Out Anim" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "castAbility", "xanim" ).SetTitle( "Cast Ability" ).SetHints( "NOWARNINGS" );

		Asset.BeginCategory( "Grapple" );
		{
			Asset.AddEntry_AssetCombo( "grappleNoTarget", "xanim" ).SetTitle( "Grapple fire with no target anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleStart", "xanim" ).SetTitle( "Grapple start reeling out line anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleExtendLoop", "xanim" ).SetTitle( "Grapple reel out loop anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleAnchorAscend", "xanim" ).SetTitle( "Grapple anchor set to ascend anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleAscendLoop", "xanim" ).SetTitle( "Grapple ascend loop anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleAscendEnd", "xanim" ).SetTitle( "Grapple ascend end anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleAnchorYank", "xanim" ).SetTitle( "Grapple anchor set to yank anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleYankLoop", "xanim" ).SetTitle( "Grapple yank loop anim" ).SetHints( "NOWARNINGS" );
			Asset.AddEntry_AssetCombo( "grappleYankEnd", "xanim" ).SetTitle( "Grapple yank end anim" ).SetHints( "NOWARNINGS" );
		}
}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Effects
	
	Asset.BeginCategory( "FX" );
	{
		Asset.AddEntry_Path( "viewFlashEffect", "" ).SetTitle( "View Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldFlashEffect", "" ).SetTitle( "World Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewShellEjectEffect", "" ).SetTitle( "View Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldShellEjectEffect", "" ).SetTitle( "World Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewFireDelayStartEffect", "" ).SetTitle( "View Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldFireDelayStartEffect", "" ).SetTitle( "World Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewLastShotEjectEffect", "" ).SetTitle( "View Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldLastShotEjectEffect", "" ).SetTitle( "World Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldClipDropEffect", "" ).SetTitle( "World Clip Drop FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_AssetCombo( "enemyDeathFxSet", "tagfx").SetTitle( "Enemy Death FX Table" ).SetToolTip( "TagFXSet the enemy when killed." );
		
		Asset.AddEntry_Path( "viewPersistentEffect1", "" ).SetTitle( "Persistent View FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentViewModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent View Model Tag" );
		Asset.AddEntry_AssetCombo( "viewPersistentEffectSet", "tagfx").SetTitle( "Persistent View FX Table" ).SetToolTip( "TagFXSet played on the viewmodel." );
		Asset.AddEntry_Path( "worldPersistentEffect1", "" ).SetTitle( "Persistent World FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentWorldModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent World Model Tag" );
		Asset.AddEntry_AssetCombo( "worldPersistentEffectSet", "tagfx").SetTitle( "Persistent World FX Table" ).SetToolTip( "TagFXSet played on the world model." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Impacts
	
	Asset.BeginCategory( "Impacts" );
	{
		Asset.AddEntry_AssetCombo( "normalImpactsFxTable", "impactsfxtable" ).SetTitle( "Explosion FX Table" ).SetHints( "Normal Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsFxTable", "impactsfxtable" ).SetTitle( "Exit Impacts FX Table" ).SetHints( "Exit Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "bounceImpactsFXTable", "impactsfxtable" ).SetTitle( "Bounce-Stick Impacts FX Table" ).SetHints( "Bounce or Stick Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "dudImpactsFXTable", "impactsfxtable" ).SetTitle( "Dud Impacts FX Table" ).SetHints( "Dud Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "normalImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Enter Impacts Sounds Table" ).SetHints( "Enter Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Exit Impacts Sounds Table" ).SetHints( "Exit Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "bounceImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Bounce-Stick Impacts Sounds Table" ).SetHints( "Bounce or Stick Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "dudImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Dud Impacts Sounds Table" ).SetHints( "Dud Impact Sounds for this weapon" );
		Asset.AddEntry_Path( "movementDirectionFinalImpactEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Stick Impact FX"  ).SetToolTip( "Spawns an FX at the final point of impact facing the opposite of the direction of movement FX" );
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Sounds
	
	Asset.BeginCategory( "Sounds", 0, 0.5, 0, "Icon_Sound.png" );
	{
		Asset.AddEntry_AssetCombo( "sharedWeaponSounds", "sharedweaponsounds" ).SetTitle( "sharedWeaponSounds" ).SetToolTip( "Use this to specify the sharedWeaponSounds asset for this weapon." );
		Asset.AddEntry_String( "pickupSound", "fly_shoulder_pickup_npc" ).SetTitle( "Pickup" );
		Asset.AddEntry_String( "pickupSoundPlayer", "fly_shoulder_pickup_plr" ).SetTitle( "Pickup (Player)" );
		Asset.AddEntry_String( "ammoPickupSound", "" ).SetTitle( "Ammo Pickup" );
		Asset.AddEntry_String( "ammoPickupSoundPlayer", "" ).SetTitle( "Ammo Pickup (Player)" );
		Asset.AddEntry_String( "projectileSound", "" ).SetTitle( "Projectile Loop" ).SetToolTip( "Looping sound played on the projectile until it becomes stationary." );;
		Asset.AddEntry_String( "projectileFireSound", "" ).SetTitle( "Projectile One-Shot" ).SetToolTip( "One shot sound played on the projectile when its fired." );
		Asset.AddEntry_String( "fireSound", "" ).SetTitle( "Fire" );
		Asset.AddEntry_String( "fireSoundPlayer", "" ).SetTitle( "Fire (Player)" ).SetToolTip( "Fire sound used by player. If not defined, player will play normal 'Fire' that is used by the AI." );
		Asset.AddEntry_String( "lastShotSound", "" ).SetTitle( "Last Shot" ); // HV - Fixed title to not include (Player)
		Asset.AddEntry_String( "lastShotSoundPlayer", "" ).SetTitle( "Last Shot (Player)" ).SetToolTip( "Last Shot sound used by player. If not defined, player will play normal 'Last Shot' that is used by the AI." );
		Asset.AddEntry_String( "emptyFireSound", "wpn_generic_dryfire_npc" ).SetTitle( "Empty Fire" );
		Asset.AddEntry_String( "emptyFireSoundPlayer", "wpn_generic_dryfire_plr" ).SetTitle( "Empty Fire (Player)" ).SetToolTip( "Empty Fire sound used by player. If not defined, player will play normal 'Empty Fire' that is used by the AI." );
		Asset.AddEntry_String( "fireBurstSound", "" ).SetTitle( "Fire Burst NPC" );
		Asset.AddEntry_String( "fireBurstSoundPlayer", "" ).SetTitle( "Fire Burst (Player)" ).SetToolTip( "Burst fire sound used by player." );	
		Asset.AddEntry_String( "startFireSound", "" ).SetTitle( "Start Fire" );
		Asset.AddEntry_String( "startFireSoundPlayer", "" ).SetTitle( "Start Fire (Player)" );
		Asset.AddEntry_String( "loopFireSound", "" ).SetTitle( "Loop Fire" );
		Asset.AddEntry_String( "loopFireSoundPlayer", "" ).SetTitle( "Loop Fire (Player)" );
		Asset.AddEntry_String( "loopFireEndSound", "" ).SetTitle( "Loop Fire End" );
		Asset.AddEntry_String( "loopFireEndSoundPlayer", "" ).SetTitle( "Loop Fire End (Player)" );
		Asset.AddEntry_String( "crackSound", "" ).SetTitle( "Crack" );
		Asset.AddEntry_String( "fireDelayStartSound", "" ).SetTitle( "Fire Delay Start" );
		Asset.AddEntry_String( "fireDelayStartSoundPlayer", "" ).SetTitle( "Fire Delay Start (Player)" ).SetToolTip( "Sound used by player when firing a weapon that uses Fire Delay" );
		Asset.AddEntry_String( "rechamberSound", "" ).SetTitle( "Rechamber" );
		Asset.AddEntry_String( "rechamberSoundPlayer", "" ).SetTitle( "Rechamber (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Rechamber' that is used by the AI." );
		Asset.AddEntry_String( "reloadSound", "" ).SetTitle( "Reload" );
		Asset.AddEntry_String( "reloadSoundPlayer", "" ).SetTitle( "Reload (Player)" ).SetToolTip( "Reload sound used by player. If not defined, player will play normal 'Reload' that is used by the AI." );
		Asset.AddEntry_String( "reloadEmptySound", "" ).SetTitle( "Reload Empty" );
		Asset.AddEntry_String( "reloadEmptySoundPlayer", "" ).SetTitle( "Reload Empty (Player)" ).SetToolTip( "Reload Empty sound used by player. If not defined, player will play normal 'Reload Empty' that is used by the AI." );
		Asset.AddEntry_String( "reloadStartSound", "" ).SetTitle( "Reload Start" );
		Asset.AddEntry_String( "reloadStartSoundPlayer", "" ).SetTitle( "Reload Start (Player)" ).SetToolTip( "Reload Start sound used by player. If not defined, player will play normal 'Reload Start' that is used by the AI." );
		Asset.AddEntry_String( "reloadEndSound", "" ).SetTitle( "Reload End" );
		Asset.AddEntry_String( "reloadEndSoundPlayer", "" ).SetTitle( "Reload End (Player)" ).SetToolTip( "Reload End sound used by player. If not defined, player will play normal 'Reload End' that is used by the AI." );
		Asset.AddEntry_String( "altSwitchSound", "" ).SetTitle( "Alt Switch" );
		Asset.AddEntry_String( "altSwitchSoundPlayer", "" ).SetTitle( "Alt Switch (Player)" );
		Asset.AddEntry_String( "raiseSound", "fly_shoulder_raise_npc" ).SetTitle( "Raise" );
		Asset.AddEntry_String( "raiseSoundPlayer", "fly_shoulder_raise_plr" ).SetTitle( "Raise (Player)" );
		Asset.AddEntry_String( "adsRaiseSoundPlayer", "fly_generic_ads_plr" ).SetTitle( "ADS Raise Player" );
		Asset.AddEntry_String( "adsLowerSoundPlayer", "fly_generic_ads_lower_plr" ).SetTitle( "ADS Lower Player" );
		Asset.AddEntry_String( "firstRaiseSound", "fly_shoulder_first_raise_npc" ).SetTitle( "First Raise" );
		Asset.AddEntry_String( "firstRaiseSoundPlayer", "fly_shoulder_first_raise_plr" ).SetTitle( "First Raise (Player)" );
		Asset.AddEntry_String( "putawaySound", "fly_shoulder_down_npc" ).SetTitle( "Put Away" );
		Asset.AddEntry_String( "putawaySoundPlayer", "fly_shoulder_down_plr" ).SetTitle( "Put Away (Player)" );
		Asset.AddEntry_String( "detonateSound", "" ).SetTitle( "Detonate" );
		Asset.AddEntry_String( "detonateSoundPlayer", "" ).SetTitle( "Detonate (Player)" ).SetToolTip( "Detonate sound used by player. If not defined, player will play normal 'Detonate' that is used by the AI." );
		Asset.AddEntry_String( "projIgnitionSound", "" ).SetTitle( "Projectile Ignition" );
		Asset.AddEntry_String( "shellCasing", "" ).SetTitle( "Shell Casing" );
		Asset.AddEntry_String( "shellCasingPlayer", "" ).SetTitle( "Shell Casing (Player)" );	
		Asset.AddEntry_String( "holdFireSound", "" ).SetTitle( "Hold Fire" );
		Asset.AddEntry_String( "holdFireSoundPlayer", "" ).SetTitle( "Hold Fire (Player)" ).SetToolTip( "Hold fire sound used by player. If not defined, player will play normal 'Fire' that is used by the AI." );
		Asset.AddEntry_String( "chargeShotMaxSound", "" ).SetTitle( "Charge Shot Max" );
		Asset.AddEntry_String( "chargeShotMaxSoundPlayer", "" ).SetTitle( "Charge Shot Max(Player)" ).SetToolTip( "Sound played when charge shot weapon reaches max. If not defined, player will play normal 'Fire' that is used by the AI." );
		Asset.AddEntry_String( "lockonSeekerSearchSound", "" ).SetTitle( "Seeker Searching Sound" ).SetToolTip( "Seeker search sound" );
		Asset.AddEntry_CheckBox( "lockonSeekerSearchSoundLoops", false ).SetTitle( "Seeker Searching Sound Loops" ).SetToolTip( "Seeker search is looping sound" );
		Asset.AddEntry_String( "lockonSeekerLockedSound", "" ).SetTitle( "Seeker Locked Sound" ).SetToolTip( "Seeker locked sound" );
		Asset.AddEntry_CheckBox( "lockonSeekerLockedSoundLoops", false ).SetTitle( "Seeker Locked Sound Loops" ).SetToolTip( "Seeker lock is looping sound" );
		Asset.AddEntry_String( "lockonTargetLockedSound", "" ).SetTitle( "Target Locked Sound" ).SetToolTip( "Target hears this sound when locked" );
		Asset.AddEntry_CheckBox( "lockonTargetLockedSoundLoops", false ).SetTitle( "TargetLocked Sound Loops" ).SetToolTip( "Target locked is looping sound" );
		Asset.AddEntry_String( "lockonTargetFiredOnSound", "" ).SetTitle( "Target Fired On Sound" ).SetToolTip( "Target hears this sound when fired on" );
		Asset.AddEntry_CheckBox( "lockonTargetFiredOnSoundLoops", false ).SetTitle( "Target Fired On Sound Loops" ).SetToolTip( "Target fired is looping sound" );
		Asset.AddEntry_String( "whizbySound", "" ).SetTitle( "Whizby" );
		Asset.AddEntry_Float( "whizbyRange", 300, 0, 10000 ).SetTitle( "Whizby Sound Range" ).SetToolTip( "The max range that a player will hear a whizby" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Rumbles
	
	Asset.BeginCategory( "Rumbles" );
	{
		Asset.AddEntry_AssetCombo( "fireRumble", "rumble" ).SetTitle( "Fire Rumble" );
		Asset.AddEntry_AssetCombo( "fireDelayRumble", "rumble" ).SetTitle( "Fire Delay Rumble" );
		Asset.AddEntry_AssetCombo( "reloadRumble", "rumble" ).SetTitle( "Reload Rumble" );
		Asset.AddEntry_AssetCombo( "explosionRumble", "rumble" ).SetTitle( "Explosion Rumble" );
		Asset.AddEntry_AssetCombo( "holdFireRumble", "rumble" ).SetTitle( "Hold Fire Rumble" );
		Asset.AddEntry_AssetCombo( "chargeShotMaxLoopRumble", "rumble" ).SetTitle( "Charge Shot Max Loop Rumble" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Weapon Rest
	
	Asset.BeginCategory( "Weapon Rest" );
	{
		Asset.AddEntry_CheckBox( "disableWeaponRest", false ).SetTitle( "Disable Weapon Rest" ).SetToolTip( "Disable the rest state for this weapon." );	
		Asset.AddEntry_Vector3( "weaponRestPitch", "weaponRestYaw", "weaponRestRoll", 10.0, 30.0, -20.0, -90, 90 ).SetTitle( "WeaponRest angles while centered" ).SetStep( 0.1f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "weaponRestLookingUpPitch", "weaponRestLookingUpYaw", "weaponRestLookingUpRoll", -5.0, 25.0, 10.0, -90, 90 ).SetTitle( "WeaponRest angles while looking up" ).SetStep( 1.0f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "weaponRestLookingDownPitch", "weaponRestLookingDownYaw", "weaponRestLookingDownRoll", 10.0, 20.0, 0.0, -90, 90 ).SetTitle( "WeaponRest angles while looking down" ).SetStep( 1.0f ).SetHints( "NOWARNINGS" );
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// User Interface
 
	Asset.BeginCategory( "User Interface" );
	{
		Asset.AddEntry_AssetCombo( "hudIcon", "image" ).SetTitle( "Hud Icon" );
		Asset.AddEntry_Combo( "hudIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_AssetCombo( "killIcon", "image" ).SetTitle( "Kill Icon" );
		Asset.AddEntry_Combo( "killIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_CheckBox( "flipKillIcon", true ).SetTitle( " Flip:" ).SetToolTip( "Used for weapons that need to have their kill icon horizontally flipped before displaying. (For MP obituaries)." );
		Asset.AddEntry_AssetCombo( "impactKillIcon", "image" ).SetTitle( "Impact Kill Icon" );
		Asset.AddEntry_AssetCombo( "dpadIcon", "image" ).SetTitle( "DPad Icon" ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Combo( "dpadIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_CheckBox( "noAmmoOnDpadIcon", true ).SetTitle( "No Ammo On Dpad" ).SetToolTip( "Dont show ammo on the dpad icon" );
		Asset.AddEntry_AssetCombo( "ammoCounterIcon", "image" ).SetTitle( "Ammo Counter Icon" );
		Asset.AddEntry_Combo( "ammoCounterIconRatio", "4:1 | 1:1" ).SetTitle( " Aspect:" );	
		Asset.AddEntry_Combo( "ammoCounterClip", "None | Magazine | ShortMagazine | Shotgun | Rocket | Beltfed | AltWeapon" ).SetTitle( "Ammo Counter Clip Style" );
		Asset.AddEntry_AssetCombo( "fireTypeIcon", "image" ).SetTitle( "Fire Type Icon" );
		Asset.AddEntry_String( "fireTypeString", "" ).SetTitle( "Fire Type String" );
		Asset.AddEntry_AssetCombo( "indicatorIcon", "image" ).SetTitle( "Indicator Icon" );
		Asset.AddEntry_AssetCombo( "weaponHeadObjective", "objective" ).SetTitle( "Head Objective" ).SetToolTip( "Used for the ingame icon displayed nearby friendly equipment/grenades." );
		Asset.AddEntry_Float( "weaponHeadObjectiveHeight", 20, 0, 200 ).SetTitle( "Head Objective Height" ).SetStep( 1.0 );
		Asset.AddEntry_AssetCombo( "crateObjective", "objective" ).SetTitle( "Crate Objective" ).SetToolTip( "Used for the ingame icon displayed above a crate." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
		
	// Parallel Bounce Factors
		
	Asset.BeginCategory( "Parallel Bounce Factors" );
	{
		string tool_tip = "Parallel + Perpendicular should be less then or equal to 1";
		Asset.AddEntry_Float( "parallelDefaultBounce", 0.5, 0, 1 ).SetTitle( "default" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelAsphaltBounce", 0.5, 0, 1 ).SetTitle( "asphalt" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelBarkBounce", 0.5, 0, 1 ).SetTitle( "bark" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelBrickBounce", 0.5, 0, 1 ).SetTitle( "brick" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelCarpetBounce", 0.5, 0, 1 ).SetTitle( "carpet" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelCeramicBounce", 0.5, 0, 1 ).SetTitle( "ceramic" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelClothBounce", 0.5, 0, 1 ).SetTitle( "cloth" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelConcreteBounce", 0.5, 0, 1 ).SetTitle( "concrete" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelCushionBounce", 0.5, 0, 1 ).SetTitle( "cushion" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelDirtBounce", 0.5, 0, 1 ).SetTitle( "dirt" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelFleshBounce", 0.5, 0, 1 ).SetTitle( "flesh" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelFoliageBounce", 0.5, 0, 1 ).SetTitle( "foliage" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelFruitBounce", 0.5, 0, 1 ).SetTitle( "fruit" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelGlassBounce", 0.5, 0, 1 ).SetTitle( "glass" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelGrassBounce", 0.5, 0, 1 ).SetTitle( "grass" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelGravelBounce", 0.5, 0, 1 ).SetTitle( "gravel" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelIceBounce", 0.5, 0, 1 ).SetTitle( "ice" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMetalBounce", 0.5, 0, 1 ).SetTitle( "metal" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMudBounce", 0.5, 0, 1 ).SetTitle( "mud" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelPaintedMetalBounce", 0.5, 0, 1 ).SetTitle( "painted metal" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelPaperBounce", 0.5, 0, 1 ).SetTitle( "paper" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelPlasterBounce", 0.5, 0, 1 ).SetTitle( "plaster" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelPlasticBounce", 0.5, 0, 1 ).SetTitle( "plastic" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelRockBounce", 0.5, 0, 1 ).SetTitle( "rock" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelRubberBounce", 0.5, 0, 1 ).SetTitle( "rubber" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelSandBounce", 0.5, 0, 1 ).SetTitle( "sand" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelSnowBounce", 0.5, 0, 1 ).SetTitle( "snow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelWaterBounce", 0.5, 0, 1 ).SetTitle( "water" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelWoodBounce", 0.5, 0, 1 ).SetTitle( "wood" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelRiotShieldBounce", 0.5, 0, 1 ).SetTitle( "riotshield" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMetalThinBounce", 0.5, 0, 1 ).SetTitle( "MetalThin" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMetalHollowBounce", 0.5, 0, 1 ).SetTitle( "MetalHollow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMetalCatwalkBounce", 0.5, 0, 1 ).SetTitle( "MetalCatwalk" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelMetalCarBounce", 0.5, 0, 1 ).SetTitle( "MetalCar" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelGlassCarBounce", 0.5, 0, 1 ).SetTitle( "GlassCar" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelGlassBulletproofBounce", 0.5, 0, 1 ).SetTitle( "GlassBulletproof" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelWaterShallowBounce", 0.5, 0, 1 ).SetTitle( "WaterShallow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "parallelBodyArmorBounce", 0.5, 0, 1 ).SetTitle( "BodyArmor" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "bounceRandomness", 0, 0, 360 ).SetTitle( "Random rotation to skew bounce vector" ).SetStep( 1 );
	}
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
		
	// Perpendicular Bounce Factors
		
	Asset.BeginCategory( "Perpendicular Bounce Factors" );
	{
		string tool_tip = "Parallel + Perpendicular should be less then or equal to 1";
		Asset.AddEntry_CheckBox( "perpendicularBounceUpOnly", false ).SetTitle( "Perpendicular Bounce Straight Up Only" ).SetToolTip( "Perpendicular scaling applies to world up instead of the bounce normal.  Disconnects perpendicular from parallel so each could be up to 1." );
		Asset.AddEntry_Float( "perpendicularDefaultBounce", 0.5, 0, 1 ).SetTitle( "default" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularAsphaltBounce", 0.5, 0, 1 ).SetTitle( "asphalt" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularBarkBounce", 0.5, 0, 1 ).SetTitle( "bark" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularBrickBounce", 0.5, 0, 1 ).SetTitle( "brick" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularCarpetBounce", 0.5, 0, 1 ).SetTitle( "carpet" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularCeramicBounce", 0.5, 0, 1 ).SetTitle( "ceramic" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularClothBounce", 0.5, 0, 1 ).SetTitle( "cloth" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularConcreteBounce", 0.5, 0, 1 ).SetTitle( "concrete" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularCushionBounce", 0.5, 0, 1 ).SetTitle( "cushion" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularDirtBounce", 0.5, 0, 1 ).SetTitle( "dirt" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularFleshBounce", 0.5, 0, 1 ).SetTitle( "flesh" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularFoliageBounce", 0.5, 0, 1 ).SetTitle( "foliage" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularFruitBounce", 0.5, 0, 1 ).SetTitle( "fruit" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularGlassBounce", 0.5, 0, 1 ).SetTitle( "glass" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularGrassBounce", 0.5, 0, 1 ).SetTitle( "grass" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularGravelBounce", 0.5, 0, 1 ).SetTitle( "gravel" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularIceBounce", 0.5, 0, 1 ).SetTitle( "ice" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMetalBounce", 0.5, 0, 1 ).SetTitle( "metal" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMudBounce", 0.5, 0, 1 ).SetTitle( "mud" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularPaintedMetalBounce", 0.5, 0, 1 ).SetTitle( "painted metal" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularPaperBounce", 0.5, 0, 1 ).SetTitle( "paper" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularPlasterBounce", 0.5, 0, 1 ).SetTitle( "plaster" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularPlasticBounce", 0.5, 0, 1 ).SetTitle( "plastic" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularRockBounce", 0.5, 0, 1 ).SetTitle( "rock" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularRubberBounce", 0.5, 0, 1 ).SetTitle( "rubber" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularSandBounce", 0.5, 0, 1 ).SetTitle( "sand" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularSnowBounce", 0.5, 0, 1 ).SetTitle( "snow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularWaterBounce", 0.5, 0, 1 ).SetTitle( "water" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularWoodBounce", 0.5, 0, 1 ).SetTitle( "wood" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularRiotShieldBounce", 0.5, 0, 1 ).SetTitle( "riotshield" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMetalThinBounce", 0.5, 0, 1 ).SetTitle( "MetalThin" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMetalHollowBounce", 0.5, 0, 1 ).SetTitle( "MetalHollow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMetalCatwalkBounce", 0.5, 0, 1 ).SetTitle( "MetalCatwalk" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularMetalCarBounce", 0.5, 0, 1 ).SetTitle( "MetalCar" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularGlassCarBounce", 0.5, 0, 1 ).SetTitle( "GlassCar" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularGlassBulletproofBounce", 0.5, 0, 1 ).SetTitle( "GlassBulletproof" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularWaterShallowBounce", 0.5, 0, 1 ).SetTitle( "WaterShallow" ).SetStep( 0.01 ).SetToolTip( tool_tip );
		Asset.AddEntry_Float( "perpendicularBodyArmorBounce", 0.5, 0, 1 ).SetTitle( "BodyArmor" ).SetStep( 0.01 ).SetToolTip( tool_tip );		
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Depth of Field Settings
	
	Asset.BeginCategory( "Depth of Field Settings" );   
	{
		Asset.AddEntry_Float( "adsDofStart", 0, 0, 100 ).SetTitle( "ADS Start" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsDofEnd", 0, 0, 100 ).SetTitle( "ADS End" ).SetStep( 0.1 );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Grenade Preparation FX ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Underwater properties
	
	Asset.BeginCategory( "Underwater properties" );   
	{
		int fxFieldCount = 3;
		for ( int i = 0; i < fxFieldCount; i++ )
		{
			Asset.AddEntry_Path( "underwaterExplosionSurfaceFX" + i, "" ).SetTitle( "Underwater Explosion Surface FX " + i ).SetRelativePath( "share/raw" );

			// skip the last depth
			if ( i != (fxFieldCount - 1) )
			{
				Asset.AddEntry_Int( "underwaterExplosionSurfaceFXDepth" + i, 1, 1, 10000 ).SetStep( 10 ).SetTitle( "Underwater Explosion Surface FX Depth " + i );
			}
		}

		Asset.AddEntry_Float( "waterSwellRadius", 50, 1, 500 ).SetTitle( "Underwater Swell Radius" ).SetStep( 1 ).SetToolTip( "The radius of the water swell surface effect when this explodes underwater" );
		Asset.AddEntry_Float( "waterSwellForceScale", 1, -50, 50 ).SetTitle( "Underwater Swell Force Scale" ).SetStep( 0.1 ).SetToolTip( "Scales the height of the water swell surface effect when this explodes underwater" );
		Asset.AddEntry_Float( "waterSwellMaxDepth", 200, 0, 1000 ).SetTitle( "Max Depth for Underwater Swell" ).SetStep( 0.1 ).SetToolTip( "Maximum depth at which a explosion will cause a surface effect" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Left-Hand Grip Adjustment
	
	Asset.BeginCategory( "Left-Hand Grip Adjustment" );
	{
		Asset.AddEntry_Float( "ikLeftHandIdlePosF", 0, -180, 180 ).SetTitle( "Idle Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosR", 0, -180, 180 ).SetTitle( "Idle Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosU", 0, -180, 180 ).SetTitle( "Idle Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );	
		Asset.AddEntry_Float( "ikLeftHandOffsetF", 0, -180, 180 ).SetTitle( "Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetR", 0, -180, 180 ).SetTitle( "Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetU", 0, -180, 180 ).SetTitle( "Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandRotationP", 0, -180, 180 ).SetTitle( "Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandRotationY", 0, -180, 180 ).SetTitle( "Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandRotationR", 0, -180, 180 ).SetTitle( "Offset Roll" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_CheckBox( "usingLeftHandProneIK", false ).SetTitle( " Using Prone IK" ).SetToolTip( "Set to indicate that the prone IK values are being used.." );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetF", 0, -180, 180 ).SetTitle( "Prone Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetR", 0, -180, 180 ).SetTitle( "Prone Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneOffsetU", 0, -180, 180 ).SetTitle( "Prone Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandProneRotationP", 0, -180, 180 ).SetTitle( "Prone Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandProneRotationY", 0, -180, 180 ).SetTitle( "Prone Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandProneRotationR", 0, -180, 180 ).SetTitle( "Prone Offset Roll" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetF", 0, -180, 180 ).SetTitle( "Viewer Offset Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetR", 0, -180, 180 ).SetTitle( "Viewer Offset Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerOffsetU", 0, -180, 180 ).SetTitle( "Viewer Offset Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationP", 0, -180, 180 ).SetTitle( "Viewer Offset Pitch" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationY", 0, -180, 180 ).SetTitle( "Viewer Offset Yaw" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Float( "ikLeftHandUiViewerRotationR", 0, -180, 180 ).SetTitle( "Viewer Offset Roll" ).SetHints( "NOWARNINGS" );
	}

	Asset.BeginCategory( "Kill Cam Settings" );
	{
		Asset.AddEntry_AssetCombo( "killcambundle", "killcam" ).SetTitle( "KillCam Bundle" ).SetToolTip( "Killcam bundle controling the killcam settings for this weapon" );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Gadget Settings
	
	AddGadgetFields( Asset );
} 

