
void GenerateUI( asset Asset )
{
	// No UI entries

	Asset.AddEntry_Combo( "configstringFileType", "WEAPONFILE" ).Show( false );
	Asset.AddEntry_Int( "isCameraSensor", 0, 0, 1 ).Show( false );
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Misc 

	Asset.BeginCategory( "Misc" );
	{
		Asset.AddEntry_String( "displayName", "" ).SetTitle( "Display Name" ).SetToolTip( "Localization alias for weapon name displayed on HUD in game." );
		Asset.AddEntry_String( "modeName", "" ).SetTitle( "Mode Name" ).SetToolTip( "Localization alias for selective fire mode text displayed on HUD in game." );
		Asset.AddEntry_String( "parentWeaponName", "" ).SetTitle( "Stat Name" ).SetToolTip( "Name of parent weapon for weapon stats e.g. parent weapons for dogs_bite_mp is dogs_mp." );
		Asset.AddEntry_Combo( "playerAnimType", "default | m203 | radio | crossbow | ballisticknife | dualwield | none" ).SetTitle( "Player Anim Type" ).SetToolTip( "Select an Player Anim Type - specifies 'playerAnimType' in playeranim.script" );
		Asset.AddEntry_String( "altWeapon", "" ).SetTitle( "Alt Weapon Name" ).SetToolTip( "Weapon to switch to when this weapon's selective fire mode is switched in the game." );
		Asset.AddEntry_String( "DualWieldWeapon", "" ).SetTitle( "Dual Wield Weapon Name" ).SetToolTip( "Weapon that is dual wielded with this one." );
		Asset.AddEntry_String( "AIOverlayDescription", "" ).SetTitle( "AI Description" ).SetToolTip( "Localization alias for text shown when crosshair is placed over a friendly. Eg. Rifleman, Submachine Gunner, etc." );
		Asset.AddEntry_Combo( "inventoryType", "primary | offhand | item | altmode | dwlefthand" ).SetTitle( "Inventory" ).SetToolTip( "Select what sort of inventory this weapon is." );
		Asset.AddEntry_Combo( "weaponType", "projectile | bomb" ).SetTitle( "Type" ).SetToolTip( "Select a weapon type." );
		Asset.AddEntry_Combo( "weaponClass", "rocketlauncher | grenade | pistol | rifle | Killstreak Alt Stored Weapon" ).SetTitle( "Class" ).SetToolTip( "Select an appropriate class for this weapon." );		
		Asset.AddEntry_Combo( "impactType", "rocket_explode | none | bullet_small | bullet_large | bullet_ap | bullet_xtreme | shotgun | grenade_bounce | grenade_explode | rifle_grenade | projectile_dud | mortar_shell | tank_shell | bolt | blade" ).SetTitle( "Impact Type" ).SetToolTip( "The impact type, used to play impact effects based on surfacetype" );		
		Asset.AddEntry_Combo( "guidedMissileType", "None | Sidewinder | Hellfire | Javelin | Ballistic | WireGuided | TVGuided" ).UpdateOnChange( true ).SetTitle( "Missile guidance" ).SetToolTip( "Guided missile type" );
		Asset.AddEntry_Float( "maxSteeringAccel", 3000, 0, 1000000 ).Show( Asset.GetEntryValue( "guidedMissileType" ) != "None" ).SetTitle( "Max steering accel" ).SetToolTip( "The maximum acceleration with which the guided missile can steer (inches / sec^2)." );
		Asset.AddEntry_Combo( "fireType", "Full Auto | Single Shot | Burst | Auto Burst | Stacked Fire" ).SetTitle( "Fire Type" ).SetToolTip( "Behavior of the weapon when the trigger is held down." );				
		Asset.AddEntry_CheckBox( "nonStowedWeapon", false ).SetTitle( "Non Stowed Weapon" ).SetToolTip( "This weapon will not be drawn when it is stowed (basic knife for example)" );
		Asset.AddEntry_CheckBox( "doesFireDamage", false ).SetTitle( "Does Fire Damage" ).SetToolTip( "This weapon is considered to cause fire damage for some methods of death" );
		Asset.AddEntry_CheckBox( "skipBattlechatterKill", false ).SetTitle( "Skip Battlechatter Kill" ).SetToolTip( "This weapon will not 'kill' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipBattlechatterReload", false ).SetTitle( "Skip Battlechatter Reload" ).SetToolTip( "This weapon will not 'reload' battlechatter to play" );
		Asset.AddEntry_CheckBox( "skipLowAmmoVox", false ).SetTitle( "skip Low Ammo Vox" ).SetToolTip( "This weapon should skip playing low ammo warning voiceovers" );
		Asset.AddEntry_CheckBox( "forceDamageShellshockAndRumble", false ).SetTitle( "Force Damage Shellshock And Rumble" ).SetToolTip( "This weapon will force calling damageShellshockAndRumble on a player even if friendly fire settings will otherwise prevent damage to that player" );
		Asset.AddEntry_CheckBox( "isAIKillstreakDamage", false ).SetTitle( "Is AI Killstreak Damage" ).SetToolTip( "This weapon's killstreak damage is considered to be from AI" );
		Asset.AddEntry_CheckBox( "isHybridWeapon", false ).SetTitle( "Is HybridWeapon" ).SetToolTip( "This weapon is one half of a hybrid pairing" );
		Asset.AddEntry_CheckBox( "bShownRetrievable", false ).SetTitle( "Shown As Retrievable" ).SetToolTip( "This weapon is visible to the owner when retrievable" );
		Asset.AddEntry_CheckBox( "isScavengable", false ).SetTitle( "Is Scavengable" ).SetToolTip( "This weapon can receive additional ammo through the Scavenger system" );					//wasnt present b4, defaulting false
		Asset.AddEntry_CheckBox( "destroyableByTrophySystem", false ).SetTitle( "Destroyable By Trophy System" ).SetToolTip( "This weapon can be destroyed by the Trophy System" );
	
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammo Options

	Asset.BeginCategory( "Ammo Options" );
	{
		Asset.AddEntry_CheckBox( "armorPiercing", false ).SetTitle( "Armor Piercing" ).SetHints( "NOWARNINGS" ).SetToolTip( "Does damage to armored targets if checked." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Type Options

	Asset.BeginCategory( "Type Options" );
	{
		Asset.AddEntry_CheckBox( "boltAction", false ).SetTitle( "Bolt Action" ).SetToolTip( "Turn this on for bolt-action weapons only. Animation control." );
		Asset.AddEntry_CheckBox( "dualWield", true ).SetTitle( "Dual Wield" ).SetToolTip( "This a dual wield weapon." );
		Asset.AddEntry_CheckBox( "canUseInVehicle", false ).SetTitle( "Usable In Vehicles" ).SetToolTip( "Allow Map and killstreaks to be used in vehicle (MP Only)" );
		Asset.AddEntry_CheckBox( "useAltTagFlash", false ).SetTitle( "FX Use Alt Tag Flash" ).SetToolTip( "Use for weapons that need a different location for tag_flash on the world model. (grenade launchers, flamethrower attachment, etc.)" );
		Asset.AddEntry_CheckBox( "isCarriedKillstreakWeapon", false ).SetTitle( "isCarriedKillstreakWeapon" ).SetToolTip( "Check if this is a killstreak weapon that the player can equip. (minigun, tv guided missile, etc.)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Melee Fields ( unused )

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reload Options
	
	Asset.BeginCategory( "Reload Options" );
	{
		Asset.AddEntry_CheckBox( "noPartialReload", false ).SetTitle( "No Partial Reload" ).SetToolTip( "When noPartialReload is set for a weapon, it can not be reloaded unless reloadAmmoAdd amount of ammo can be put into the gun. If reloadAmmoAdd is 0, it's treated as the weapon's clip size." );
		Asset.AddEntry_CheckBox( "segmentedReload", false ).SetTitle( "Segmented Reload" ).SetToolTip( "Turn on for weapons that reload X rounds at a time (Lee-Enfield, bolt-action sniper rifles), set reload amounts in Reload Ammo Add and Reload Start Add." );	
		Asset.AddEntry_CheckBox( "rechamberWhileAds", true ).SetTitle( "ADS Rechamber" ).SetToolTip( "Weapon can be rechambered while in ADS." );
		Asset.AddEntry_CheckBox( "noADSAutoReload", false ).SetTitle( "No ADS Auto-Reload" ).SetToolTip( "Disallow auto-reloading while the weapon is in ADS." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Options
	
	Asset.BeginCategory( "ADS Options" );
	{
		Asset.AddEntry_CheckBox( "aimDownSight", false ).SetTitle( "ADS" ).SetToolTip( "Must be turned on for proper viewmodel appearance of a weapon that can be Aimed Down the Sight (ADS)." );
		Asset.AddEntry_CheckBox( "adsFire", false ).Show( false ).SetTitle( "ADS Fire Only" ).SetToolTip( "Can only be fired ADS.  Firing from the hip brings up ADS." );
		Asset.AddEntry_CheckBox( "noAdsWhenMagEmpty", false ).SetTitle( "No ADS With Empty Magazine" ).SetToolTip( "Disallow ADS when magazine is empty." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Miscellaneous Options
	
	Asset.BeginCategory( "Miscellaneous Options" );
	{
		Asset.AddEntry_CheckBox( "canUseUnderWater", true ).SetTitle( "Can Use Under Water" ).SetToolTip( "The weapon can be used under water." );
		Asset.AddEntry_CheckBox( "blocksProne", false ).SetTitle( "Cannot Go Prone" ).SetToolTip( "The player cannot go prone when they have this weapon equiped." );
		Asset.AddEntry_CheckBox( "avoidDropCleanup", false ).SetTitle( "No Auto-Cleanup of Dropped Weapon" ).SetToolTip( "Avoid having dropped weapons of this type deleted to make room for new ones." );
		Asset.AddEntry_CheckBox( "noThirdPersonDropsOrRaises", false ).SetTitle( "NoWeaponSwitches" ).SetToolTip( "No 3rd person Drop or Raise anims." );
		Asset.AddEntry_CheckBox( "isReviveWeapon", false ).SetTitle( "Revive Weapon" ).SetToolTip( "Weapon revives other players (ZM only)." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Attachment Perks ( unused )
	
	Asset.BeginCategory( "Attachment Perks" );
	{
			Asset.AddEntry_CheckBox( "silenced", false ).SetTitle( "Silenced" ).SetHints( "NOWARNINGS" ).SetToolTip( "This weapon is considered silenced." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crosshair Options
	
	Asset.BeginCategory( "Crosshair Options" );
	{
		Asset.AddEntry_Float( "enemyCrosshairRange", 0, 0, 10000 ).SetTitle( "Enemy Crosshair Range" ).SetToolTip( "The range in at which friendly names appear and friendly or enemy changes your crosshair color." );
		Asset.AddEntry_CheckBox( "crosshairColorChange", true ).SetTitle( "Crosshair Color Change" ).SetToolTip( "Change crosshair color if pointing at friendly or enemy" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Lock On Options
	
	Asset.BeginCategory( "Lock On Options" );
	{	
		Asset.AddEntry_CheckBox( "requireLockonToFire", false ).SetTitle( "Require Lock On" ).SetToolTip( "Player cannot fire the weapon until script has granted them a lock-on." );
		Asset.AddEntry_Int( "lockOnSpeed", 0, 0, 10000 ).SetTitle( "Lock On Speed" ).SetToolTip( "Lock on speed in miliseconds." );
		Asset.AddEntry_Int( "lockOnMinRange", 0, 10, 10000 ).SetTitle( "Lock On Min Range" ).SetToolTip( "Min range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRange", 0, 0, 10000 ).SetTitle( "Lock On Max Range" ).SetToolTip( "Max range for locking on" );
		Asset.AddEntry_Int( "lockOnMaxRangeNoLineOfSight", 0, 0, 10000 ).SetTitle( "Lock On Max Range No Line of Sight" ).SetToolTip( "Max range for locking on when there is no line of sight" );
		Asset.AddEntry_Int( "lockOnScreenRadius", 25, 0, 10000 ).SetTitle( "Lock On Screen Radius" ).SetToolTip( "Screen size for soft target lockon" );
		Asset.AddEntry_Float( "lockOnRadius", 0, 0, 500 ).SetTitle( "Lock On Radius" ).SetToolTip( "Lock on radius in pixels." );			

		//Asset.AddEntry_Float( "lockOnTimeMultInCover", 1, 1, 10 ).SetTitle( "Lock On Time Multiplier for Cover" ).SetToolTip( "Lock on time multiplier while target is in cover" );
		Asset.AddEntry_Int( "lockOnLostSightPivotTimeout", 2000, 0, 10000 ).SetTitle( "Lock On Loss Timeout" ).SetToolTip( "If the player loses sight of the Pivot Point for this long, the Lock-On is lost" );
		Asset.AddEntry_Int( "lockOnRequiredMsgSuppressAfterFireTime", 0, 0, 10000 ).SetTitle( "Lock On Required Message Suppress After Fire Time" ).SetToolTip( "The window of time in which the lock on required message will not appear after the player fires the weapon (in milliseconds)" );

		Asset.AddEntry_Float( "pivotTargetAttractMin", 0, 0, 1 ).SetTitle( "Pivot Target Attracion Min" ).SetToolTip( "Minimum attraction of pivot point to target" );
		Asset.AddEntry_Float( "pivotTargetAttractMax", 0.65, 0, 1 ).SetTitle( "Pivot Target Attracion Max" ).SetToolTip( "Maximum attraction of pivot point to target" );
		Asset.AddEntry_Float( "pivotTargetAttractMinAng", 0, 0, 180 ).SetTitle( "Pivot Target Attracion Min Angle" ).SetToolTip( "Screen angle at which minimum attraction of pivot point to target is applied" );
		Asset.AddEntry_Float( "pivotTargetAttractMaxAng", 15, 0, 180 ).SetTitle( "Pivot Target Attracion Max Angle" ).SetToolTip( "Screen angle at which maximum attraction of pivot point to target is applied" );

		Asset.AddEntry_Float( "targetTetherHorzAng", 15, 0, 180 ).SetTitle( "Lock On Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetTetherVertAng", 9, 0, 180 ).SetTitle( "Lock On Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is invalid but recoverable" );
		Asset.AddEntry_Float( "targetLostHorzAng", 20, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Horizontal" ).SetToolTip( "Screen angle at which target lock is immediately lost" );
		Asset.AddEntry_Float( "targetLostVertAng", 15, 0, 180 ).SetTitle( "Lock On Cancel Screen Angle Vertical" ).SetToolTip( "Screen angle at which target lock is immediately lost" );

		Asset.AddEntry_Float( "pivotCurveStartDist", 60.0, 0.0, 10000.0 ).SetTitle( "Curve Start Distance" ).SetToolTip( "Distance the bullet travels before it starts to curve." );
		Asset.AddEntry_Int( "lockOnReticleFadeTime", 750, 0, 10000 ).SetTitle( "Lock On Reticle Fade Time" ).SetToolTip( "Time it takes the reticle to fade when locking on" );
		Asset.AddEntry_Float( "lockOnReticleMinAlpha", 0.15, 0.0, 1.0 ).SetTitle( "Lock On Reticle Fade Min Alpha" ).SetToolTip( "Lowest reticle fade level when locking on." );

		Asset.AddEntry_Path( "reticleLockOn", "" ).SetTitle( "Lock On Reticle" ).SetToolTip( "Lock On Reticle." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotLocked", "" ).SetTitle( "Locked Pivot Marker" ).SetToolTip( "Locked Pivot Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotInvalid", "" ).SetTitle( "Invalid Pivot Marker" ).SetToolTip( "Invalid Pivot Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotTarget", "" ).SetTitle( "Tartget Center Marker" ).SetToolTip( "Target Center Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotSides", "" ).SetTitle( "Target Side Marker" ).SetToolTip( "Target Side Marker." ).SetRelativePath( "pc/main/" );
		Asset.AddEntry_Path( "reticlePivotLine", "" ).SetTitle( "Pivot Line" ).SetToolTip( "Pivot Line." ).SetRelativePath( "pc/main/" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Grapple Options
	
	Asset.BeginCategory( "Grapple Options" );
	{
		Asset.AddEntry_CheckBox( "grappleWeapon", false ).SetTitle( "Grapple Weapon" ).SetHints( "Grappling hook weapon" ).SetToolTip( "This weapon shoots a grappling hook to pull the player to remote locations." );

		Asset.AddEntry_Float( "grappleReelOutSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelOutSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInSpeed", 1000, 0, 10000 ).SetTitle( "grappleReelInSpeed" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInAccelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInAccelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleReelInDecelTime", 0.25, 0, 3 ).SetTitle( "grappleReelInDecelTime" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherHorzAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherHorzAng" ).SetToolTip( "Still in development" );
		Asset.AddEntry_Float( "grappleMagnetTetherVertAng", 90, 0, 180 ).SetTitle( "grappleMagnetTetherVertAng" ).SetToolTip( "Still in development" );

		Asset.AddEntry_Path( "reticleGrapple", "" ).SetTitle( "reticleGrapple" ).SetToolTip( "Still in development" ).SetRelativePath( "pc/main/" );
		//Asset.AddEntry_AssetCombo( "projectileModel", "xmodel" ).SetTitle( "Grapple Model" ).SetToolTip( "Define the model to be used for the grapple projectile" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Movement, Sprint, Turning
	
	Asset.BeginCategory( "Movement, Sprint, Turning" );
	{
		Asset.AddEntry_Float( "moveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Move Speed Scale" ).SetToolTip( "When using this weapon, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "adsMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Scale" ).SetToolTip( "When using this weapon and in ADS, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "jumpMoveSpeedScale", 1.0, 0.0, 5.0 ).SetTitle( "Jump Move Speed Scale" ).SetToolTip( "When using this weapon and jumping, player movement speed is multiplied by this amount." );
		Asset.AddEntry_Float( "firingSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Firing Speed Scale" ).SetToolTip( "When firing this weapon, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "ADS Firing Speed Scale" ).SetToolTip( "When firing this weapon and in ADS, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "sprintFiringSpeedScale", 0.0, 0.0, 5.0 ).SetTitle( "Sprint Firing Speed Scale" ).SetToolTip( "When firing this weapon and in sprint, player movement speed is multiplied by this amount (if non-zero, normal scalars are used otherwise)." );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeIn", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time In" ).SetToolTip( "Time to lerp from regular MoveSpeedScale to ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "adsMoveSpeedTransitionTimeOut", 0.0, 0.0, 5.0 ).SetTitle( "ADS Move Speed Transition Time Out" ).SetToolTip( "Time to lerp to regular MoveSpeedScale from ADS MoveSpeedScale (or the Firing variants when firing). 0 will behave like games previous to BO3" );
		Asset.AddEntry_Float( "sprintDurationScale", 1, 0.0, 5.0 ).SetTitle( "Sprint Duration Scale" ).SetToolTip( "When sprinting with this weapon, sprint duration is multiplied by this amount." );
		Asset.AddEntry_Float( "maxHorTurnSpeed", 0, 0.0, 720.0 ).SetTitle( "Yaw Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Float( "maxVertTurnSpeed", 0, 0.0, 720.0 ).SetTitle( "Pitch Turn Speed Max" ).SetToolTip( "When using this weapon, player turn speed is capped at this amount." );
		Asset.AddEntry_Int( "gunMaxPitch", 30, 0, 80 ).SetTitle( "Max Gun Pitch" ).SetToolTip( "Maximum allowed vertical ascent of the viewmodel due to recoil (degrees)." );
		Asset.AddEntry_Int( "gunMaxYaw", 30, 0, 80 ).SetTitle( "Max Gun Yaw" ).SetToolTip( "Maximum allowed horizontal travel of the viewmodel due to recoil (degrees)." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Flamethrower Details ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Aim Assist ( Console Only ) ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Ammunition
	
	Asset.BeginCategory( "Ammunition" );
	{
		Asset.AddEntry_Int( "burstCount", 1, 1, 7 ).SetTitle( "Burst Count" ).SetToolTip( "Specifies how many bullets shot by either regular or auto burst fire." );
		Asset.AddEntry_String( "ammoName", "" ).SetTitle( "Ammo Name" ).SetToolTip( "Allows different weapons to share the same ammo pool." );
		Asset.AddEntry_String( "clipName", "" ).SetTitle( "Clip Name" ).SetToolTip( "Allows different weapons to share clips. Used for weapons that have a selective fire option, and would therefore need to use the same type of clip." );
		Asset.AddEntry_Int( "clipSize", 10, 0, 2147483647 ).SetTitle( "Clip Size" ).SetToolTip( "Specifies how many bullets per clip/magazine." );
		Asset.AddEntry_CheckBox( "clipOnly", false ).SetTitle( "Clip Only" ).SetToolTip( "Used for weapons that use clips only" );
		Asset.AddEntry_Int( "maxAmmo", 100, 0, 2147483647 ).SetStep( 10 ).SetTitle( "Max Stock Ammo" ).SetToolTip( "Max stock ammo the player can collect for this weapon, clip isn't reflected in this number. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "startAmmo", 0, 0, 2147483647 ).SetTitle( "Start Ammo" ).SetToolTip( "How much ammo the player gets when starting with this weapon. One clip/magazine from this amount will be already in the weapon. No effect on AI.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "dropAmmoMin", 0, 0, 2147483647 ).SetTitle( "Drop Min" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains at least this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );	
		Asset.AddEntry_Int( "dropAmmoMax", 0, 0, 2147483647 ).SetTitle( "Drop Max" ).SetToolTip( "When dropped by AI/player/hand-placed in editor, contains no more than this much ammo. Not limited to real-life clip/magazine size.  Affected by 'Ammo Clip Count Relative' field." );
		Asset.AddEntry_Int( "reloadAmmoAdd", 0, 0, 999 ).SetTitle( "Reload Ammo Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add when reloading with some amount of bullets still remaining in the weapon." );	
		Asset.AddEntry_Int( "reloadStartAdd", 0, 0, 999 ).SetTitle( "Reload Start Add" ).SetToolTip( "For weapons with Segmented Reload turned on. Amount to add for the first reload segment (ie: when weapon is empty.)" );	
		Asset.AddEntry_Int( "maxInstancesAllowed", 0, 0, 20 ).SetTitle( "Max Instances Allowed" ).SetToolTip( "Destroy the oldest instance when there are already this many out when a new one spawns." );
		Asset.AddEntry_Float( "lowAmmoWarningThreshold", 0.33, 0, 1 ).SetStep( 0.1 ).SetTitle( "Clip-Ammo Low Warning %" ).SetToolTip( "The game optionally displays low-ammo warnings when remaining clip ammo goes below this percentage." );
		Asset.AddEntry_CheckBox( "cancelAutoHolsterWhenEmpty", false ).SetTitle( "Do Not Auto-Holster When Empty" ).SetToolTip( "When weapons are empty, they are normally auto-swapped to the next usable weapon in the player's inventory.  This disables that." );
		Asset.AddEntry_CheckBox( "suppressAmmoReserveDisplay", false ).SetTitle( "Hide Display of Reserve Ammo" );
		Asset.AddEntry_CheckBox( "retrievable", false ).SetTitle( "Retrievable" ).SetToolTip( "Grenade can be picked up and returned to the owner's inventory." );
		Asset.AddEntry_CheckBox( "dieOnRespawn", false ).SetTitle( "Die On Respawn" ).SetToolTip( "Grenade will exist and be active until the player respawns." );
		Asset.AddEntry_Combo( "stickiness", "Don't stick | Stick to all | Stick to all, except ai and clients | Stick to ground | Stick to ground, maintain yaw | Stick to flesh" ).SetTitle( "Stickiness" ).SetToolTip( "Stickiness of the projectile, if not explode on impact." );					
		Asset.AddEntry_CheckBox( "unlimitedAmmo", false ).SetTitle("Unlimited Ammo" ).SetToolTip( "This weapon does not use ammo" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stack Fire	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reloadable Fuel Tank	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Overheating

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Auto turret scanning
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Damage
	
	Asset.BeginCategory( "Damage" );
	{
		Asset.AddEntry_Int( "damage", 0, 0, 10000 ).SetTitle( "Max Dmg" ).SetToolTip( "Damage per-bullet, applied up to Max Dmg Range. Damage falls off linearly from Max Dmg Range until reaching Min Dmg at Min Dmg Range." );
		Asset.AddEntry_Int( "explosionRadius", 300, 0, 10000 ).SetStep( 10 ).SetTitle( "Explosion Radius" ).SetToolTip( "Damage radius (1 world unit = 1 inch)" );
		Asset.AddEntry_Int( "explosionInnerDamage", 10, 0, 10000 ).SetTitle( "Inner Damage" ).SetToolTip( "Damage at center of explosion" );
		Asset.AddEntry_Int( "explosionOuterDamage", 10, 0, 10000 ).SetTitle( "Outer Damage" ).SetToolTip( "Damage at outside edge of explosion" );
		Asset.AddEntry_CheckBox( "projImpactExplode", true ).SetTitle( "Impact Explode" ).SetToolTip( "Projectile explodes on impact" );
		Asset.AddEntry_CheckBox( "sentientImpactExplode", false ).SetTitle( "Impact Sentient Explosion" ).SetToolTip( "Projectile explodes on impact with an Sentient" );
		Asset.AddEntry_Float( "damageConeAngle", 180, 0, 180 ).Show( false );
		Asset.AddEntry_Float( "vehicleProjectileDamageScalar", 1, 0, 1000 ).SetTitle( "Vehicle Projectile Damage Scalar" ).SetToolTip( "Scales the damage this weapon does to vehicles." );
		Asset.AddEntry_Float( "vehicleProjectileSplashDamageScalar", 1, 0, 1000 ).SetTitle( "Vehicle Projectile Splash Damage Scalar" ).SetToolTip( "Scales the splash damage this weapon does to vehicles." );
		Asset.AddEntry_CheckBox( "bImpactDamageOnlyActorsAndPlayers", false ).SetTitle( "Impact Damage Only Players/Actors" ).SetToolTip( "This will not impact damage anything but players or AI.  Everything else it will splash damage only." );
	
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Indicators
	
	Asset.BeginCategory( "Indicators" );
	{
		Asset.AddEntry_Int( "indicatorRadius", 0, 0, 10000 ).SetTitle( "Indicator Radius" ).SetStep( 10 ).SetToolTip( "Indicator radius, distance from the grenade the indicator will show. if zero, default will be used. (Max of cg_hudGrenadeIconMaxRangeFrag or damage radius)" );
		Asset.AddEntry_CheckBox( "showIndicator", false ).SetTitle( "Show Indicator" ).SetToolTip( "Show grenade indicator icon. If unchecked, default values will be used. (frag grenades always show indicators)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Tracer
	
	Asset.BeginCategory( "Tracer" );
	{
		Asset.AddEntry_AssetCombo( "tracerType", "tracer" ).SetTitle( "Tracer Type" );
		Asset.AddEntry_AssetCombo( "enemyTracerType", "tracer" ).SetTitle( "Enemy tracer Type" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Projectile	
	
	Asset.BeginCategory( "Projectile" );
	{
		Asset.AddEntry_Int( "projectileSpeed", 600, 0, 50000 ).SetTitle( "Projectile Speed" ).SetToolTip( "The speed the projectile travels (inches/sec)" );
		Asset.AddEntry_Int( "projectileSpeedRelativeUp", 0, 0, 10000 ).SetTitle( "Player's View Upwards" ).SetToolTip( "The amount of verticle velocity the projectile is given in the direction that the player is looking" );
		Asset.AddEntry_Int( "projectileSpeedUp", 0, 0, 10000 ).SetTitle( "Extra Verticle Speed" ).SetToolTip( "Vertical speed added to grenades" );
		Asset.AddEntry_Int( "projectileActivateDist", 0, 0, 10000 ).SetTitle( "Activate Distance" ).SetToolTip( "Distance the projectile must travel before it will explode." );
		Asset.AddEntry_Float( "projectileLifetime", 30, 0, 10000 ).SetStep( 0.1 ).SetTitle( "Lifetime" ).SetToolTip( "The time (in seconds) after which the projectile will explode in the air, if it hasn't hit anything yet" );
		Asset.AddEntry_Int( "destabilizeDistance", 30000, 0, 32000 ).SetStep( 10 ).SetTitle( "Destabilize Distance" ).SetToolTip( "The distance the projectile goes before becoming unstable" );
		Asset.AddEntry_Float( "destabilizationRateTime", 0, 0, 10 ).SetStep( 0.01 ).SetTitle( "Destabilize Rate (time)" ).SetToolTip( "The time between 'instability' course changes" );
		Asset.AddEntry_Float( "destabilizationCurvatureMax", 10, 0, 10000000 ).SetStep( 0.01 ).SetTitle( "Destabilize Angle Max" ).SetToolTip( "The maximum curvature in degrees per second" );
		Asset.AddEntry_AssetCombo( "projectileModel", "xmodel" ).SetTitle( "Projectile Model" ).SetToolTip( "Define the model to be used for the projectile" );
		Asset.AddEntry_Combo( "projExplosionType", "grenade | rocket | flashbang | smoke | heavy explosive | fire | napalmblob | napalmbloblight | bolt | none" ).SetTitle( "Explosion Type" ).SetToolTip( "Defines the type of effect that will be played. Effects are defined in fx/iw_impacts.csv" );
		Asset.AddEntry_CheckBox( "projExplosionEffectForceNormalUp", false ).SetTitle( "FX Force straight-up normal vector" );
		Asset.AddEntry_Path( "projExplosionEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Explosion FX" ).SetToolTip( "Defines the effect that will be played when the projectile explodes. It will also play the effects that are defined in fx/iw_impacts.csv" );	
		Asset.AddEntry_String( "projExplosionSound", "" ).SetTitle( "Explosion Sound" ).SetToolTip( "The sound the projectile will play when it impacts" );
		Asset.AddEntry_Path( "projTrailEffect", "" ).SetRelativePath( "share/raw" ).SetTitle( "Trail FX" ).SetToolTip( "This effect is attached to and trailed behind the projectile model." );
		Asset.AddEntry_Int( "projIgnitionDelay", 0, 0, 10000 ).SetTitle( "Ignition Delay" ).SetToolTip( "How long after launch to wait for rocket to ignite." );
		Asset.AddEntry_Path( "projIgnitionEffect", "" ).SetTitle( "Ignition FX" ).SetToolTip( "This effect is played when a projectile's rocket first ignites." ).SetRelativePath( "share/raw/" );
		Asset.AddEntry_Int( "projectileDLight", 200, 0, 1000 ).SetStep( 10 ).SetTitle( "Dynamic Light Radius" ).SetToolTip( "Set the radius (in inches) of the light to follow the projectile." );
		Asset.AddEntry_Float( "projectileRed", 0.75, 0, 1 ).SetStep( 0.1 ).SetTitle( "Red" ).SetToolTip( "Sets the Rec value of the dynamic light (0-255)." );	
		Asset.AddEntry_Float( "projectileGreen", 0.3, 0, 1 ).SetStep( 0.1 ).SetTitle( "Green" ).SetToolTip( "Sets the Green value of the dynamic light (0-255)." );	
		Asset.AddEntry_Float( "projectileBlue", 0, 0, 1 ).SetStep( 0.1 ).SetTitle( "Blue" ).SetToolTip( "Sets the Blue value of the dynamic light (0-255)." );	
		Asset.AddEntry_CheckBox( "timedDetonation", false ).SetTitle( "Timed Detonation" ).SetToolTip( "If checked, the grenade will detonate after the fuse time has passed." );
		Asset.AddEntry_CheckBox( "noCrumpleMissile", false ).SetTitle( "No Crumple Missile" ).SetToolTip( "Projectile will bounce no matter its velocity." );
		Asset.AddEntry_CheckBox( "forceBounce", false ).SetTitle( "Force Bounce" ).SetToolTip( "Projectile will bounce." );
		Asset.AddEntry_String( "grenadeWeapon", "" ).SetTitle( "Spawned grenade" ).SetToolTip( "grenade weapon name that will be spawned on impact." );
		Asset.AddEntry_Float( "fuseTime", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "Fuse Time" ).SetToolTip( "The length of time from when the grenade is thrown to when it explodes." );	
		Asset.AddEntry_Float( "aiFuseTime", 0, 0, 100 ).SetStep( 0.1 ).SetTitle( "AI Fuse Time" ).SetToolTip( "The length of time from when the grenade is thrown to when it explodes for AI." );	
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Location Damage ( unused )
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// State Timers
	
	Asset.BeginCategory( "State Timers" );
	{
		Asset.AddEntry_Float( "introFireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Intro Fire" ).SetToolTip( "Rate of fire in seconds per round during 'intro fire'. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Int( "introFireLength", 0, 0, 200 ).SetTitle( "Intro Fire Rounds" ).SetToolTip( "How many rounds to fire at the 'Intro Fire' rate before reverting to normal fire." );
		Asset.AddEntry_Float( "fireTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire" ).SetToolTip( "Rate of fire in seconds per round. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "lastFireTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Last Shot" ).SetToolTip( "Rate of fire in seconds per round for the last bullet. If zero, the standard fire rate is applied. It's good to keep this in multiples of 0.016 for sound. If 0.016 then it's 3750 rounds a minute." );
		Asset.AddEntry_Float( "fireDelay", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Fire Delay" ).SetToolTip( "Delay in seconds between pressing the fire button and the weapon actually firing." );
		Asset.AddEntry_Float( "reloadTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload" ).SetToolTip( "The number of seconds over which the non-empty reload animation will be played.  In segmented reload weapons, this is the animation that loops to give the player ammo." );
		Asset.AddEntry_Float( "reloadEmptyTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Time" ).SetToolTip( "The number of seconds over which the empty reload animation will be played." );
		Asset.AddEntry_Float( "reloadAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Add" ).SetToolTip( "During an partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "reloadEmptyAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Empty Add Time" ).SetToolTip( "During an empty reload, when the gun will literally get more ammo (ammo counter fills up). Uses Reload Add if set to zero." );
		Asset.AddEntry_Float( "reloadShowRocketTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "...show rocket" ).SetToolTip( "At this point and onward in the Reload anim, the attached rocket xmodel will be shown." ); 
		Asset.AddEntry_Float( "reloadStartAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start Add" ).SetToolTip( "TODO NEEDS EXPLANATION" );
		Asset.AddEntry_Float( "reloadStartTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Start" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "reloadEndTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload End" ).SetToolTip( "For a segmented reload weapon, the number of seconds over which the reload end animation will be played." );
		Asset.AddEntry_Float( "reloadQuickTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick" ).SetToolTip( "Dual Magazine reload animation will be scaled by this time." );
		Asset.AddEntry_Float( "reloadQuickAddTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Reload Quick Add" ).SetToolTip( "During a quick partial reload, when the gun will literally get more ammo (ammo counter fills up)." );
		Asset.AddEntry_Float( "rechamberTime", 0.1, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "rechamberBoltTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Rechamber Bolt" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "dropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "raiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "firstRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "First Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "altRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Alt Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "adsAltRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ads Alt Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "quickRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Quick Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyDropTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Drop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "emptyRaiseTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Empty Raise" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "sprintOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Sprint Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyLoopTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Loop" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "lowReadyOutTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Low Ready Out" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "slideInTime", 0.5, 0, 10 ).SetStep( 0.05 ).SetTitle( "Slide In" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "swimIdleLoopTime", 2, 0, 10 ).SetStep( 0.05 ).SetTitle( "Swim Idle Loop Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
		Asset.AddEntry_Float( "castTime", 1.0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Ability Cast Time" ).SetToolTip( "How long this weapon state will last. The viewmodel animations will get scaled to match the times set." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sprint Movement Settings
	
	Asset.BeginCategory( "Sprint Movement Settings" );
	{
		Asset.AddEntry_Float( "sprintOfsF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintOfsR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintOfsU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintRotR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "sprintScale", 1, 0.01, 10 ).Show( false );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// LowReady Movement Settings
	
	Asset.BeginCategory( "LowReady Movement Settings" );
	{
		Asset.AddEntry_Float( "lowReadyOfsF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "lowReadyOfsR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "lowReadyOfsU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "lowReadyRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "lowReadyRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "lowReadyRotR", 0, -300, 300 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Riding Vehicle Settings
	
	Asset.BeginCategory( "Riding Vehicle Settings" );
	{
		Asset.AddEntry_Float( "rideOfsF", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Forward" ).SetToolTip( "When the player rides a vehicle, the viewmodel will slide forward by this amount. (-ive for backward)" );
		Asset.AddEntry_Float( "rideOfsR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Right" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate horizontally by this amount. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideOfsU", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Offset Up" ).SetToolTip( "When the player rides a vehicle, the viewmodel will translate vertically by this amount. (+/- for up/down respectively)" );
		Asset.AddEntry_Float( "rideRotP", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Pitch" ).SetToolTip( "Viewmodel will pitch by this amount if the player is riding a vehicle. (+/- for down/up respectively)" );
		Asset.AddEntry_Float( "rideRotY", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Yaw" ).SetToolTip( "Viewmodel will yaw by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
		Asset.AddEntry_Float( "rideRotR", 0, -300, 300 ).SetStep( 0.1 ).SetTitle( "Rot Roll" ).SetToolTip( "Viewmodel will roll by this amount if the player is riding a vehicle. (+/- for left/right respectively)" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Dive to Prone Movement Settings
	
	Asset.BeginCategory( "Dive to Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "dtpOfsF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpOfsR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpOfsU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpRotR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "dtpScale", 1, 0.01, 10 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Mantle Movement Settings
	
	Asset.BeginCategory( "Mantle Movement Settings" );
	{
		Asset.AddEntry_Float( "mantleOfsF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "mantleOfsR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "mantleOfsU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "mantleRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "mantleRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "mantleRotR", 0, -300, 300 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

	// Player Slide Movement Settings
	
	Asset.BeginCategory( "Player Slide Movement Settings" );
	{
		Asset.AddEntry_Float( "slideOfsF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "slideOfsR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "slideOfsU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "slideRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "slideRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "slideRotR", 0, -300, 300 ).Show( false );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Strafe Movement Settings
	
	Asset.BeginCategory( "Strafe Movement Settings" );	
	{
		Asset.AddEntry_Float( "strafeMoveF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "strafeMoveR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "strafeMoveU", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "strafeRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "strafeRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "strafeRotR", 0, -300, 300 ).Show( false );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Stand Movement Settings
	
	Asset.BeginCategory( "Stand Movement Settings" );
	{
		Asset.AddEntry_Float( "standMoveF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standMoveR", 1, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standMoveU", -1.5, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standRotR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "standMoveMinSpeed", 110, 0, 3000 ).Show( false );
		Asset.AddEntry_Float( "posMoveRate", 4, 0, 300 ).Show( false );
		Asset.AddEntry_Float( "standRotMinSpeed", 110, 0, 1000 ).Show( false );
		Asset.AddEntry_Float( "posRotRate", 5, 0, 300 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Crouch Movement Settings

	Asset.BeginCategory( "Crouch Movement Settings" );	
	{
		Asset.AddEntry_Float( "duckedMoveF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedMoveR", 1, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedMoveU", -1.5, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedRotR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedOfsF", -2, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedOfsR", 2, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedOfsU", -0.2, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "duckedMoveMinSpeed", 60, 0, 3000 ).Show( false );
		Asset.AddEntry_Float( "duckedRotMinSpeed", 60, 0, 1000 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Prone Movement Settings

	Asset.BeginCategory( "Prone Movement Settings" );
	{
		Asset.AddEntry_Float( "proneMoveF", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneMoveR", 1, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneMoveU", -1.5, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneRotP", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneRotY", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneRotR", 0, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneOfsF", -6, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneOfsR", 3.5, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneOfsU", 0.8, -300, 300 ).Show( false );
		Asset.AddEntry_Float( "proneMoveMinSpeed", 0, 0, 3000 ).Show( false );
		Asset.AddEntry_Float( "posProneMoveRate", 10, 0, 300 ).Show( false );
		Asset.AddEntry_Float( "proneRotMinSpeed", 0, 0, 1000 ).Show( false );
		Asset.AddEntry_Float( "posProneRotRate", 10, 0, 300 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Idle Settings // Check this...
	
	Asset.BeginCategory( "Idle Settings" );
	{
		Asset.AddEntry_Int( "hipIdleAmount", 80, 0, 150 );
		Asset.AddEntry_Int( "adsIdleAmount", 25, 0, 150 ).SetStep( 0.1 ).SetTitle( "ADS Amount" ).SetToolTip( "Strength of range of viewmodel (or sniper rifle overlay) wavering motion when in ADS." );
		Asset.AddEntry_Float( "hipIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "Hip Speed" ).SetToolTip( "How fast the viewmodel wavers in hipfire position within Hip Amount." );
		Asset.AddEntry_Float( "adsIdleSpeed", 1, 0, 100 ).SetStep( 0.1 ).SetTitle( "ADS Speed" ).SetToolTip( "How fast the viewmodel wavers in ADS within ADS Amount." );
		Asset.AddEntry_Float( "idleSpeedFromFireTransitionTime", 0, 0, 10 ).SetStep( 0.05 ).SetTitle( "Idle Speed From Fire Transition Time" ).SetToolTip( "The time it takes to lerp back up to full idle speed after firing, the EF_FIRING flag, is done" );
		Asset.AddEntry_Float( "idleCrouchFactor", 0.5, 0, 1 ).SetStep( 0.01 ).SetTitle( "Crouch Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
		Asset.AddEntry_Float( "idleProneFactor", 0.15, 0, 1 ).SetStep( 0.01 ).SetTitle( "Prone Factor" ).SetToolTip( "Hip/ADS Amount multiplier for reducing viewmodel wavering when in this stance." );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// ADS Settings

	Asset.BeginCategory( "ADS Settings" );		
	{
		Asset.AddEntry_Float( "adsSpread", 0, 0, 10 ).Show( false );
		Asset.AddEntry_Float( "adsAimPitch", 0, -30, 30 ).Show( false );
		Asset.AddEntry_Float( "adsTransInTime", 0.3, 0, 10 ).Show( false );
		Asset.AddEntry_Float( "adsTransOutTime", 0.6, 0, 10 ).Show( false );
		Asset.AddEntry_Float( "adsReloadTransTime", 0.6, 0, 5 ).Show( false );
		Asset.AddEntry_Float( "adsCrosshairInFrac", 1, 0, 1 ).Show( false );
		Asset.AddEntry_Float( "adsCrosshairOutFrac", 0.2, 0, 1 ).Show( false );
		Asset.AddEntry_Float( "adsZoomFov1", 65, 10, 160 ).Show( false );
		Asset.AddEntry_Float( "adsZoomFov2", 65, 10, 160 ).Show( false );
		Asset.AddEntry_Float( "adsZoomFov3", 65, 10, 160 ).Show( false );
		Asset.AddEntry_String( "adsZoomSound", "" ).Show( false );
		Asset.AddEntry_Float( "adsZoomInFrac", 0.5, 0, 1 ).Show( false );
		Asset.AddEntry_Float( "adsZoomOutFrac", 0.1, 0, 1 ).Show( false );
		Asset.AddEntry_Float( "adsBobFactor", 1, 0, 10 ).Show( false );
		Asset.AddEntry_Float( "adsViewBobMult", 0, 0, 100 ).Show( false );
		Asset.AddEntry_Float( "adsViewErrorMin", 0, 0, 90 ).Show( false );
		Asset.AddEntry_Float( "adsViewErrorMax", 0, 0, 90 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Hip Spread Settings
	
	Asset.BeginCategory( "Hip Spread Settings" );
	{
		Asset.AddEntry_Float( "hipSpreadStandMin", 4, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Min" ).SetToolTip( "Smallest diameter the crosshairs can contract to." );
		Asset.AddEntry_Float( "hipSpreadMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Stand Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while standing." );
		Asset.AddEntry_Float( "hipSpreadDecayRate", 1.5, 0, 50 ).SetStep( 0.05 ).SetTitle( "Decay Rate" ).SetToolTip( "Rate at which the crosshairs try to return to the Min hip spread size." );
		Asset.AddEntry_Float( "hipSpreadDuckedMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Min" ).SetToolTip( "Size of the crosshairs at rest when crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Crouch Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while crouched." );
		Asset.AddEntry_Float( "hipSpreadDuckedDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Crouch Decay" ).SetToolTip( "Multiplier of Decay Rate for crouched stance, controlling how fast the crosshairs return to Crouch Min." );
		Asset.AddEntry_Float( "hipSpreadProneMin", 2, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Min" ).SetToolTip( "Size of the crosshairs at rest when prone." );
		Asset.AddEntry_Float( "hipSpreadProneMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Prone Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while prone." );
		Asset.AddEntry_Float( "hipSpreadProneDecay", 1.6, 0, 10 ).SetStep( 0.1 ).SetTitle( "Prone Decay" ).SetToolTip( "Multiplier of Decay Rate for prone stance, controlling how fast the crosshairs return to Prone Min." );
		Asset.AddEntry_Float( "hipSpreadSlideMin", 3, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Min" ).SetToolTip( "Size of the crosshairs at rest when sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideMax", 10, 0, 90 ).SetStep( 0.1 ).SetTitle( "Slide Max" ).SetToolTip( "Largest diameter the crosshairs can expand to while sliding." );
		Asset.AddEntry_Float( "hipSpreadSlideDecay", 1.375, 0, 10 ).SetStep( 0.1 ).SetTitle( "Slide Decay" ).SetToolTip( "Multiplier of Decay Rate for sliding stance, controlling how fast the crosshairs return to Slide Min." );
		Asset.AddEntry_Float( "hipSpreadFireAdd", 0.25, 0, 1 ).SetStep( 0.1 ).SetTitle( "Fire Add" ).SetToolTip( "Amount by which the crosshairs expand per bullet fired." );
		Asset.AddEntry_Float( "hipSpreadMoveAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Move Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadSprintAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Sprint Add" ).SetToolTip( "Rate of crosshair expansion due to player movement." );
		Asset.AddEntry_Float( "hipSpreadTurnAdd", 0, 0, 10 ).SetStep( 0.1 ).SetTitle( "Turn Add" ).SetToolTip( "Rate of crosshair expansion due to player panning the view in any direction." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Gun Kick Settings
	
	Asset.BeginCategory( "Gun Kick Settings" );
	{
		Asset.AddEntry_Float( "hipGunKickPitchMin", -5, -100, 100 ).SetTitle( "Hip Pitch Min" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Pitch." );
		Asset.AddEntry_Float( "adsGunKickPitchMin", -30, -100, 100 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickPitchMax", -3, -100, 100 ).SetTitle( "Hip Pitch Max" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Pitch." );
		Asset.AddEntry_Float( "adsGunKickPitchMax", -20, -100, 100 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick down/up'. Larger absolute numbers increase viewmodel climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMin", -15, -100, 100 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMin", -17, -100, 100 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickYawMax", 15, -100, 100 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100. Actual viewmodel angle will not exceed Max Gun Yaw." );
		Asset.AddEntry_Float( "adsGunKickYawMax", 17, -100, 100 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS viewmodel control. +/- sign means 'kick left/right'. Larger absolute numbers increase viewmodel yawing. From -100 to 100." );
		Asset.AddEntry_Float( "hipGunKickAccel", 250, 0, 1000 ).SetTitle( "Hip Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in hipfire. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "adsGunKickAccel", 250, 0, 1000 ).SetTitle( "ADS Accel" ).SetToolTip( "Rate at which viewmodel attempts to recenter in ADS. Directly opposes yaws and pitch accumulation." );
		Asset.AddEntry_Float( "hipGunKickSpeedMax", 500, 0, 10000 ).SetTitle( "Hip Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in hipfire." );
		Asset.AddEntry_Float( "adsGunKickSpeedMax", 1000, 0, 10000 ).SetTitle( "ADS Speed Max" ).SetToolTip( "Maximum deflection speed reached by the viewmodel in ADS." );
		Asset.AddEntry_Float( "hipGunKickSpeedDecay", 15, 0, 100 ).SetTitle( "Hip Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in hipfire." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickSpeedDecay", 10, 0, 100 ).SetTitle( "ADS Speed Decay" ).SetToolTip( "Strength of decay on viewmodel deflection speed in ADS." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "hipGunKickStaticDecay", 1, 0, 100 ).SetTitle( "Hip Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsGunKickStaticDecay", 1, 0, 100 ).SetTitle( "ADS Static Decay" ).SetToolTip( "Strength of decay on viewmodel recentering once it has stopped deflecting." ).SetStep( 0.1 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// View Kick Settings
	
	Asset.BeginCategory( "View Kick Settings" );
	{
		Asset.AddEntry_Float( "hipViewKickPitchMin", 20, -200, 200 ).SetTitle( "Hip Pitch Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMin", 20, -200, 200 ).SetTitle( "ADS Pitch Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickPitchMax", 40, -200, 200 ).SetTitle( "Hip Pitch Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickPitchMax", 95, -200, 200 ).SetTitle( "ADS Pitch Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick down/up'. Larger absolute numbers increase view kick climb/descent. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMin", -15, -200, 200 ).SetTitle( "Hip Yaw Min" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMin", -10, -200, 200 ).SetTitle( "ADS Yaw Min" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickYawMax", 15, -200, 200 ).SetTitle( "Hip Yaw Max" ).SetToolTip( "Hipfire view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "adsViewKickYawMax", 30, -200, 200 ).SetTitle( "ADS Yaw Max" ).SetToolTip( "ADS view kick control. -/+ sign means 'kick right/left'. Larger absolute numbers increase view kick yaw. From -100 to 100." );
		Asset.AddEntry_Float( "hipViewKickCenterSpeed", 2000, 10, 10000 ).SetStep( 10 ).SetTitle( "Hip Center Speed" ).SetToolTip( "Speed with which the view continuously attempts to recenter in hipfire." );
		Asset.AddEntry_Float( "adsViewKickCenterSpeed", 2000, 10, 10000 ).SetStep( 10 ).SetTitle( "ADS Center Speed" ).SetToolTip( "Speed with which the view continuously attempts to recenter in ADS." );
		Asset.AddEntry_Float( "adsViewKickCenterDuckedScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Crouch Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in crouch stance." );
		Asset.AddEntry_Float( "adsViewKickCenterProneScale", 1, 0, 100 ).SetStep( 0.05 ).SetTitle( "ADS Center Speed Prone Scale" ).SetHints( "NOWARNINGS" ).SetToolTip( "ADS Center Speed is scaled by this amount when in prone stance." );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Sway Settings
	
	Asset.BeginCategory( "Sway Settings" );
	{
		Asset.AddEntry_Float( "swayMaxAngle", 30, 0, 180 ).SetTitle( "Max Angle" ).SetToolTip( "Max angle change that will be applied to the hipfire viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayMaxAngle", 30, 0, 180 ).SetTitle( "ADS Max Angle" ).SetToolTip( "Max angle change that will be applied to the ADS viewmodel sway." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayLerpSpeed", 6, 1, 50 ).SetTitle( "Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayLerpSpeed", 6, 1, 50 ).SetTitle( "ADS Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayTransitionLerpSpeed", 0, 0, 50 ).SetTitle( "ADS Transition Lerp Speed" ).SetToolTip( "Speed at which the sway will lerp during ADS transition. Zero means unused." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayPitchScale", 0.1, -2, 2 ).SetTitle( "Pitch Scale" ).SetToolTip( "Amount of pitch change in the viewmodel to apply to the sway pitch in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayPitchScale", 0.1, -2, 2 ).SetTitle( "ADS Pitch Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayYawScale",  0.1, -2, 2 ).SetTitle( "Yaw Scale" ).SetToolTip( "ADS Yaw Scale" ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayYawScale",  0.1, -2, 2 ).SetTitle( "ADS Yaw Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway yaw in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayHorizScale", 0.1, -2, 2 ).SetTitle( "Horiz Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayHorizScale", 0.1, -2, 2 ).SetTitle( "ADS Horiz Scale" ).SetToolTip( "Amount of yaw change in the viewmodel to apply to the sway horizontal offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayVertScale", 0.1, -2, 2 ).SetTitle( "Vert Scale" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in hipfire." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "adsSwayVertScale", 0.1, -2, 2 ).SetTitle( "ADS Vert Scale" ).SetToolTip( "Amount of pitch change in the view model to apply to the sway vertical offset in ADS." ).SetStep( 0.05 );
		Asset.AddEntry_Float( "swayShellShockScale", 5, 0, 20 ).SetTitle( "Shell Shock Scale" ).SetToolTip( "This scale gets applied to the weapon sway while you're in shell shock." ).SetStep( 0.05 );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Mountable Weaponry ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// AI Settings

	Asset.BeginCategory( "AI Settings" );
	{
		Asset.AddEntry_Float( "fightDist", 720, 1, 100000 ).Show( false );
		Asset.AddEntry_Float( "maxDist", 1400, 1, 100000 ).Show( false );
		Asset.AddEntry_Path( "aiVsAiAccuracyGraph", "" ).Show( false );
		Asset.AddEntry_Path( "aiVsPlayerAccuracyGraph", "" ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Reticle Settings

	Asset.BeginCategory( "Reticle Settings" );	
	{
		Asset.AddEntry_Path( "reticleCenter", "" ).Show( false );
		Asset.AddEntry_Int( "reticleCenterSize", 32, 1, 480 ).Show( false );	
		Asset.AddEntry_Path( "reticleSide", "" ).Show( false );
		Asset.AddEntry_Int( "reticleSideSize", 16, 1, 480 ).Show( false );
		Asset.AddEntry_Float( "hipReticleSidePos", 0, 0, 1 ).Show( false );
		Asset.AddEntry_Int( "reticleMinOfs", 4, 0, 480 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// ADS Overlay Settings
	
	Asset.BeginCategory( "ADS Overlay Settings" );
	{
		Asset.AddEntry_String( "adsOverlayShader", "" ).Show( false );
		Asset.AddEntry_Combo( "adsOverlayReticle", "none | crosshair" ).Show( false );
		Asset.AddEntry_Combo( "adsOverlayInterface", "none | Javelin" ).Show( false );
		Asset.AddEntry_Int( "adsOverlayWidth", 320, 1, 640 ).Show( false );
		Asset.AddEntry_Int( "adsOverlayHeight", 240, 1, 480 ).Show( false );
		Asset.AddEntry_Float( "adsOverlayAlphaScale", 1, 1, 100 ).Show( false );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XModels
	
	Asset.BeginCategory( "XModels" );
	{
		Asset.AddEntry_AssetCombo( "gunModel", "xmodel" ).SetTitle( "View Gun" );
		Asset.AddEntry_String( "viewmodelTag", "" ).SetTitle( "View Gun Tag" ).SetToolTip( "Name of the tag you want the viewmodel to be attached at. If blank, the default will be used (tag_weapon1 for left hand DW weapons, tag_knife_attach for melee weapons, tag_weapon otherwise)." );
		Asset.AddEntry_AssetCombo( "worldModel", "xmodel" ).SetTitle( "World Gun" );
		Asset.AddEntry_AssetCombo( "stowedModel", "xmodel" ).SetTitle( "StowedWorldModel" ).SetToolTip( "This model will be used for weapons stowed on the back. If this field is empty, World Gun 1 will be used" );
		Asset.AddEntry_String( "worldModelTagRight", "" ).SetTitle( "World Model Tag (First Gun)" ).SetToolTip( "This is the tag the gun will get attached. In a situation where there are two guns this is the first gun" );
		Asset.AddEntry_String( "worldModelTagLeft", "" ).SetTitle( "World Model Tag (Second Gun)" ).SetToolTip( "This is the tag the second or dual wield gun will get attached." );
		Asset.AddEntry_CheckBox( "useDroppedModelAsStowed", false ).SetTitle( "StowedModelAsDropped" ).SetToolTip( "If checked then the Dropped model will be the same as the Alt stowed World Model" );
		Asset.AddEntry_String( "stowedModelTag", "" ).SetTitle( "Stowed Tag" ).SetToolTip( "Name of the tag you want the stowed gun to be attached at. If blank, the default will be used (tag_stowed_back)." );
		Asset.AddEntry_Vector3( "stowedModelOffsetsF", "stowedModelOffsetsR", "stowedModelOffsetsU", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Offset" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_Vector3( "stowedModelOffsetsPitch", "stowedModelOffsetsYaw", "stowedModelOffsetsRoll", 0, 0, 0, -10000, 10000 ).SetTitle( "Stowed Rotation" ).SetStep( 0.01f ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_CheckBox( "useDroppedModelAsStowed", false ).SetTitle( "StowedModelAsDropped" ).SetToolTip( "If checked then the Dropped model will be the same as the Alt stowed World Model" );
		Asset.AddEntry_AssetCombo( "handModel", "xmodel" ).SetTitle( "Default view Hand" );
		Asset.AddEntry_CheckBox( "isHandModelOverridable", true ).SetTitle( "Update Hand Model From Script" ).SetToolTip( "If checked then the hand model can be updated from script" );
		Asset.AddEntry_AssetCombo( "worldClipModel", "xmodel" ).SetTitle( "World Clip Model" );
		Asset.AddEntry_AssetCombo( "rocketModel", "xmodel" ).SetTitle( "rocketModel" ).SetToolTip( "When the weapon has ammo in its clip, this model will be attached to the xmodel." );
		Asset.AddEntry_Text( "hideTags", "" ).SetTitle( "Hide Tags" ).SetToolTip( "name of tags to hide on this model.  one per line" );	
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Camo
	
	Asset.BeginCategory( "Camo" );
	{
		Asset.AddEntry_AssetCombo( "camo", "weaponcamo" ).SetTitle( "Weapon Camo" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// XAnims
	
	Asset.BeginCategory( "XAnims" );
	{
		Asset.AddEntry_AssetCombo( "idleAnimLeft", "xanim" ).SetTitle( "Left Idle" ).SetToolTip( "(Slave field for Dual Wield)" );	
		Asset.AddEntry_AssetCombo( "emptyIdleAnimLeft", "xanim" ).SetTitle( "Left Empty Idle" ).SetToolTip( "(Slave field for Dual Wield)" );
		Asset.AddEntry_AssetCombo( "fireAnimLeft", "xanim" ).SetTitle( "Left Fire" ).SetToolTip( "(Slave field for Dual Wield)" );
		Asset.AddEntry_AssetCombo( "fireDelayAnimLeft", "xanim" ).SetTitle( "Left Fire Delay" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "lastShotAnimLeft", "xanim" ).SetTitle( "Left Last Shot" ).SetToolTip( "(Slave field for Dual Wield)" );
		Asset.AddEntry_AssetCombo( "rechamberAnim", "xanim" ).SetTitle( "Rechamber" );
		Asset.AddEntry_AssetCombo( "reloadAnimLeft", "xanim" ).SetTitle( "Reload Left" );
		Asset.AddEntry_AssetCombo( "reloadStartAnim", "xanim" ).SetTitle( "Reload Start" );
		Asset.AddEntry_AssetCombo( "reloadEndAnim", "xanim" ).SetTitle( "Reload End" );
		Asset.AddEntry_AssetCombo( "raiseAnim", "xanim" ).SetTitle( "Raise" );
		Asset.AddEntry_AssetCombo( "dropAnim", "xanim" ).SetTitle( "Drop" );
		Asset.AddEntry_AssetCombo( "firstRaiseAnim", "xanim" ).SetTitle( "First Raise" );
		Asset.AddEntry_AssetCombo( "altRaiseAnim", "xanim" ).SetTitle( "Alt Raise" );
		Asset.AddEntry_AssetCombo( "altDropAnim", "xanim" ).SetTitle( "Alt Drop" );
		Asset.AddEntry_AssetCombo( "adsAltRaiseAnim", "xanim" ).SetTitle( "Ads Alt Raise" );
		Asset.AddEntry_AssetCombo( "adsAltDropAnim", "xanim" ).SetTitle( "Ads Alt Drop" );
		Asset.AddEntry_AssetCombo( "quickRaiseAnim", "xanim" ).SetTitle( "Quick Raise" );
		Asset.AddEntry_AssetCombo( "quickDropAnim", "xanim" ).SetTitle( "Quick Drop" );
		Asset.AddEntry_AssetCombo( "emptyRaiseAnim", "xanim" ).SetTitle( "Empty Raise" );
		Asset.AddEntry_AssetCombo( "emptyDropAnim", "xanim" ).SetTitle( "Empty Drop" );
		Asset.AddEntry_AssetCombo( "sprintInAnim", "xanim" ).SetTitle( "Sprint In" );
		Asset.AddEntry_AssetCombo( "sprintLoopAnim", "xanim" ).SetTitle( "Sprint Loop" );
		Asset.AddEntry_AssetCombo( "sprintOutAnim", "xanim" ).SetTitle( "Sprint Out" );
		Asset.AddEntry_AssetCombo( "sprintInEmptyAnim", "xanim" ).SetTitle( "Sprint In Empty" ); // HV - Added spaces between words - 772 / 774
		Asset.AddEntry_AssetCombo( "sprintLoopEmptyAnim", "xanim" ).SetTitle( "Sprint Loop Empty" );
		Asset.AddEntry_AssetCombo( "sprintOutEmptyAnim", "xanim" ).SetTitle( "Sprint Out Empty" );
		Asset.AddEntry_AssetCombo( "lowReadyInAnim", "xanim" ).SetTitle( "Low Ready In" );
		Asset.AddEntry_AssetCombo( "lowReadyLoopAnim", "xanim" ).SetTitle( "Low Ready Loop" );
		Asset.AddEntry_AssetCombo( "lowReadyOutAnim", "xanim" ).SetTitle( "Low Ready Out" );		
		Asset.AddEntry_AssetCombo( "adsFireAnim", "xanim" ).SetTitle( "ADS Fire" );
		Asset.AddEntry_AssetCombo( "adsLastShotAnim", "xanim" ).SetTitle( "ADS Last Shot" );
		Asset.AddEntry_AssetCombo( "adsRechamberAnim", "xanim" ).SetTitle( "ADS Rechamber" );
		Asset.AddEntry_AssetCombo( "adsUpAnim", "xanim" ).SetTitle( "ADS Up" );
		Asset.AddEntry_AssetCombo( "adsDownAnim", "xanim" ).SetTitle( "ADS Down" );
		Asset.AddEntry_AssetCombo( "slide_in", "xanim" ).SetTitle( "Player Slide In" );
		Asset.AddEntry_AssetCombo( "slide_in_air", "xanim" ).SetTitle( "Slide In Air" ).SetHints( "NOWARNINGS" );
		Asset.AddEntry_AssetCombo( "swimIdleLoopLeft", "xanim" ).SetTitle( "Left Swim Idle Loop" ).SetHints( "(Slave field for Dual Wield)" );
        Asset.AddEntry_AssetCombo( "swimCombatFireLeft", "xanim" ).SetTitle( "Left Swim Combat Fire" ).SetHints( "(Slave field for Dual Wield)" );
		Asset.AddEntry_AssetCombo( "castAbility", "xanim" ).SetTitle( "Cast Ability" ).SetHints( "NOWARNINGS" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// FX
	
	Asset.BeginCategory( "FX" );
	{
		Asset.AddEntry_Path( "viewFlashEffect", "" ).SetTitle( "View Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldFlashEffect", "" ).SetTitle( "World Flash FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewShellEjectEffect", "" ).SetTitle( "View Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldShellEjectEffect", "" ).SetTitle( "World Shell Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewFireDelayStartEffect", "" ).SetTitle( "View Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldFireDelayStartEffect", "" ).SetTitle( "World Fire Delay Start FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "viewLastShotEjectEffect", "" ).SetTitle( "View Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		Asset.AddEntry_Path( "worldLastShotEjectEffect", "" ).SetTitle( "World Last Shot Eject FX" ).SetRelativePath( "share/raw" );
		
		Asset.AddEntry_Path( "viewPersistentEffect1", "" ).SetTitle( "Persistent View FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentViewModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent View Model Tag" );
		Asset.AddEntry_AssetCombo( "viewPersistentEffectSet", "tagfx").SetTitle( "Persistent View FX Table" ).SetToolTip( "TagFXSet played on the viewmodel." );
		Asset.AddEntry_Path( "worldPersistentEffect1", "" ).SetTitle( "Persistent World FX " ).SetRelativePath( "share/raw" ).UpdateOnChange( true );
		Asset.AddEntry_BoneCombo( "persistentWorldModelTag1", "gunModel" ).SetHints( "NOWARNINGS" ).SetTitle( "FX Persistent World Model Tag" );
		Asset.AddEntry_AssetCombo( "worldPersistentEffectSet", "tagfx").SetTitle( "Persistent World FX Table" ).SetToolTip( "TagFXSet played on the world model." );
	}
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Impacts
	
	Asset.BeginCategory( "Impacts" );
	{
		Asset.AddEntry_AssetCombo( "normalImpactsFxTable", "impactsfxtable" ).SetTitle( "Enter Impacts FX Table" ).SetHints( "Enter Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsFxTable", "impactsfxtable" ).SetTitle( "Exit Impacts FX Table" ).SetHints( "Exit Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "bounceImpactsFXTable", "impactsfxtable" ).SetTitle( "Bounce Impacts FX Table" ).SetHints( "Bounce Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "dudImpactsFXTable", "impactsfxtable" ).SetTitle( "Dud Impacts FX Table" ).SetHints( "Dud Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "bounceImpactsFXTable", "impactsfxtable" ).SetTitle( "Bounce-Stick Impacts FX Table" ).SetHints( "Bounce or Stick Impact FX for this weapon" );
		Asset.AddEntry_AssetCombo( "normalImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Enter Impacts Sounds Table" ).SetHints( "Enter Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "exitImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Exit Impacts Sounds Table" ).SetHints( "Exit Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "bounceImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Bounce Impacts Sounds Table" ).SetHints( "Bounce Impact Sounds for this weapon" );
		Asset.AddEntry_AssetCombo( "dudImpactsSoundsTable", "impactsoundstable" ).SetTitle( "Dud Impacts Sounds Table" ).SetHints( "Dud Impact Sounds for this weapon" );
	}
	
	
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Sounds
	
	Asset.BeginCategory( "Sounds", 0, 0.5, 0, "Icon_Sound.png" );
	{
		Asset.AddEntry_AssetCombo( "sharedWeaponSounds", "sharedweaponsounds" ).SetTitle( "sharedWeaponSounds" ).SetToolTip( "Use this to specify the sharedWeaponSounds asset for this weapon." );
		Asset.AddEntry_String( "pickupSound", "" ).SetTitle( "Pickup" );
		Asset.AddEntry_String( "pickupSoundPlayer", "" ).SetTitle( "Pickup (Player)" );
		Asset.AddEntry_String( "ammoPickupSound", "" ).SetTitle( "Ammo Pickup" );
		Asset.AddEntry_String( "ammoPickupSoundPlayer", "" ).SetTitle( "Ammo Pickup (Player)" );
		Asset.AddEntry_String( "projectileSound", "" ).SetTitle( "Projectile" );
		Asset.AddEntry_String( "fireSound", "" ).SetTitle( "Fire" );
		Asset.AddEntry_String( "fireSoundPlayer", "" ).SetTitle( "Fire (Player)" ).SetToolTip( "Fire sound used by player. If not defined, player will play normal 'Fire' that is used by the AI." );
		Asset.AddEntry_String( "lastShotSound", "" ).SetTitle( "Last Shot" ); // HV - Fixed title to not include (Player)
		Asset.AddEntry_String( "lastShotSoundPlayer", "" ).SetTitle( "Last Shot (Player)" ).SetToolTip( "Last Shot sound used by player. If not defined, player will play normal 'Last Shot' that is used by the AI." );
		Asset.AddEntry_String( "emptyFireSound", "" ).SetTitle( "Empty Fire" );
		Asset.AddEntry_String( "emptyFireSoundPlayer", "" ).SetTitle( "Empty Fire (Player)" ).SetToolTip( "Empty Fire sound used by player. If not defined, player will play normal 'Empty Fire' that is used by the AI." );
		Asset.AddEntry_String( "rechamberSound", "" ).SetTitle( "Rechamber" );
		Asset.AddEntry_String( "rechamberSoundPlayer", "" ).SetTitle( "Rechamber (Player)" ).SetToolTip( "Rechamber sound used by player. If not defined, player will play normal 'Rechamber' that is used by the AI." );
		Asset.AddEntry_String( "reloadSound", "" ).SetTitle( "Reload" );
		Asset.AddEntry_String( "reloadSoundPlayer", "" ).SetTitle( "Reload (Player)" ).SetToolTip( "Reload sound used by player. If not defined, player will play normal 'Reload' that is used by the AI." );
		Asset.AddEntry_String( "reloadEmptySound", "" ).SetTitle( "Reload Empty" );
		Asset.AddEntry_String( "reloadEmptySoundPlayer", "" ).SetTitle( "Reload Empty (Player)" ).SetToolTip( "Reload Empty sound used by player. If not defined, player will play normal 'Reload Empty' that is used by the AI." );
		Asset.AddEntry_String( "reloadStartSound", "" ).SetTitle( "Reload Start" );
		Asset.AddEntry_String( "reloadStartSoundPlayer", "" ).SetTitle( "Reload Start (Player)" ).SetToolTip( "Reload Start sound used by player. If not defined, player will play normal 'Reload Start' that is used by the AI." );
		Asset.AddEntry_String( "reloadEndSound", "" ).SetTitle( "Reload End" );
		Asset.AddEntry_String( "reloadEndSoundPlayer", "" ).SetTitle( "Reload End (Player)" ).SetToolTip( "Reload End sound used by player. If not defined, player will play normal 'Reload End' that is used by the AI." );
		Asset.AddEntry_String( "altSwitchSound", "" ).SetTitle( "Alt Switch" );
		Asset.AddEntry_String( "altSwitchSoundPlayer", "" ).SetTitle( "Alt Switch (Player)" );
		Asset.AddEntry_String( "raiseSound", "" ).SetTitle( "Raise" );
		Asset.AddEntry_String( "raiseSoundPlayer", "" ).SetTitle( "Raise (Player)" );
		Asset.AddEntry_String( "firstRaiseSound", "" ).SetTitle( "First Raise" );
		Asset.AddEntry_String( "firstRaiseSoundPlayer", "" ).SetTitle( "First Raise (Player)" );
		Asset.AddEntry_String( "putawaySound", "" ).SetTitle( "Put Away" );
		Asset.AddEntry_String( "putawaySoundPlayer", "" ).SetTitle( "Put Away (Player)" );
		Asset.AddEntry_String( "projIgnitionSound", "" ).SetTitle( "Projectile Ignition" );
		Asset.AddEntry_String( "whizbySound", "" ).SetTitle( "Whizby" );
		Asset.AddEntry_Float( "whizbyRange", 300, 0, 10000 ).SetTitle( "Whizby Sound Range" ).SetToolTip( "The max range that a player will hear a whizby" );

	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 	
	// Rumbles
	
	Asset.BeginCategory( "Rumbles" );
	{
		Asset.AddEntry_AssetCombo( "fireRumble", "rumble" ).SetTitle( "Fire Rumble" );
		Asset.AddEntry_AssetCombo( "reloadRumble", "rumble" ).SetTitle( "Reload Rumble" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// User Interface
 
	Asset.BeginCategory( "User Interface" );
	{
		Asset.AddEntry_AssetCombo( "hudIcon", "image" ).SetTitle( "Hud Icon" );
		Asset.AddEntry_Combo( "hudIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_AssetCombo( "killIcon", "image" ).SetTitle( "Kill Icon" );
		Asset.AddEntry_Combo( "killIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_CheckBox( "flipKillIcon", true ).SetTitle( " Flip:" ).SetToolTip( "Used for weapons that need to have their kill icon horizontally flipped before displaying. (For MP obituaries)." );
		Asset.AddEntry_AssetCombo( "dpadIcon", "image" ).SetTitle( "DPad Icon" );
		Asset.AddEntry_Combo( "dpadIconRatio", "4:1 | 1:1 | 2:1" ).SetTitle( " Aspect:" );
		Asset.AddEntry_AssetCombo( "impactKillIcon", "image" ).SetTitle( "Impact Kill Icon" );
		Asset.AddEntry_AssetCombo( "ammoCounterIcon", "image" ).SetTitle( "Ammo Counter Icon" );
		Asset.AddEntry_Combo( "ammoCounterIconRatio", "4:1 | 1:1" ).SetTitle( " Aspect:" );	
		Asset.AddEntry_Combo( "ammoCounterClip", "None | Magazine | ShortMagazine | Shotgun | Rocket | Beltfed | AltWeapon" ).SetTitle( "Ammo Counter Clip Style" );
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
		
	// Parallel Bounce Factors
		
	Asset.BeginCategory( "Parallel Bounce Factors" );
	{		      
		Asset.AddEntry_Float( "parallelDefaultBounce", 0.5, 0, 1 ).SetTitle( "default" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelAsphaltBounce", 0.5, 0, 1 ).SetTitle( "asphalt" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelBarkBounce", 0.5, 0, 1 ).SetTitle( "bark" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelBrickBounce", 0.5, 0, 1 ).SetTitle( "brick" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelCarpetBounce", 0.5, 0, 1 ).SetTitle( "carpet" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelCeramicBounce", 0.5, 0, 1 ).SetTitle( "ceramic" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelClothBounce", 0.5, 0, 1 ).SetTitle( "cloth" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelConcreteBounce", 0.5, 0, 1 ).SetTitle( "concrete" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelCushionBounce", 0.5, 0, 1 ).SetTitle( "cushion" ).SetStep( 0.01 );;
		Asset.AddEntry_Float( "parallelDirtBounce", 0.5, 0, 1 ).SetTitle( "dirt" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelFleshBounce", 0.5, 0, 1 ).SetTitle( "flesh" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelFoliageBounce", 0.5, 0, 1 ).SetTitle( "foliage" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelFruitBounce", 0.5, 0, 1 ).SetTitle( "fruit" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelGlassBounce", 0.5, 0, 1 ).SetTitle( "glass" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelGrassBounce", 0.5, 0, 1 ).SetTitle( "grass" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelGravelBounce", 0.5, 0, 1 ).SetTitle( "gravel" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelIceBounce", 0.5, 0, 1 ).SetTitle( "ice" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMetalBounce", 0.5, 0, 1 ).SetTitle( "metal" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMudBounce", 0.5, 0, 1 ).SetTitle( "mud" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelPaintedMetalBounce", 0.5, 0, 1 ).SetTitle( "painted metal" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelPaperBounce", 0.5, 0, 1 ).SetTitle( "paper" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelPlasterBounce", 0.5, 0, 1 ).SetTitle( "plaster" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelPlasticBounce", 0.5, 0, 1 ).SetTitle( "plastic" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelRockBounce", 0.5, 0, 1 ).SetTitle( "rock" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelRubberBounce", 0.5, 0, 1 ).SetTitle( "rubber" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelSandBounce", 0.5, 0, 1 ).SetTitle( "sand" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelSnowBounce", 0.5, 0, 1 ).SetTitle( "snow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelWaterBounce", 0.5, 0, 1 ).SetTitle( "water" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelWoodBounce", 0.5, 0, 1 ).SetTitle( "wood" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelRiotShieldBounce", 0.5, 0, 1 ).SetTitle( "riotshield" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMetalThinBounce", 0.5, 0, 1 ).SetTitle( "MetalThin" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMetalHollowBounce", 0.5, 0, 1 ).SetTitle( "MetalHollow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMetalCatwalkBounce", 0.5, 0, 1 ).SetTitle( "MetalCatwalk" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelMetalCarBounce", 0.5, 0, 1 ).SetTitle( "MetalCar" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelGlassCarBounce", 0.5, 0, 1 ).SetTitle( "GlassCar" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelGlassBulletproofBounce", 0.5, 0, 1 ).SetTitle( "GlassBulletproof" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelWaterShallowBounce", 0.5, 0, 1 ).SetTitle( "WaterShallow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "parallelBodyArmorBounce", 0.5, 0, 1 ).SetTitle( "BodyArmor" ).SetStep( 0.01 );		
	}	
		
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
		
	// Perpendicular Bounce Factors
		
	Asset.BeginCategory( "Perpendicular Bounce Factors" );
	{
		Asset.AddEntry_Float( "perpendicularDefaultBounce", 0.5, 0, 1 ).SetTitle( "default" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularAsphaltBounce", 0.5, 0, 1 ).SetTitle( "asphalt" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularBarkBounce", 0.5, 0, 1 ).SetTitle( "bark" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularBrickBounce", 0.5, 0, 1 ).SetTitle( "brick" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularCarpetBounce", 0.5, 0, 1 ).SetTitle( "carpet" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularCeramicBounce", 0.5, 0, 1 ).SetTitle( "ceramic" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularClothBounce", 0.5, 0, 1 ).SetTitle( "cloth" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularConcreteBounce", 0.5, 0, 1 ).SetTitle( "concrete" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularCushionBounce", 0.5, 0, 1 ).SetTitle( "cushion" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularDirtBounce", 0.5, 0, 1 ).SetTitle( "dirt" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularFleshBounce", 0.5, 0, 1 ).SetTitle( "flesh" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularFoliageBounce", 0.5, 0, 1 ).SetTitle( "foliage" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularFruitBounce", 0.5, 0, 1 ).SetTitle( "fruit" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularGlassBounce", 0.5, 0, 1 ).SetTitle( "glass" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularGrassBounce", 0.5, 0, 1 ).SetTitle( "grass" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularGravelBounce", 0.5, 0, 1 ).SetTitle( "gravel" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularIceBounce", 0.5, 0, 1 ).SetTitle( "ice" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMetalBounce", 0.5, 0, 1 ).SetTitle( "metal" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMudBounce", 0.5, 0, 1 ).SetTitle( "mud" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularPaintedMetalBounce", 0.5, 0, 1 ).SetTitle( "painted metal" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularPaperBounce", 0.5, 0, 1 ).SetTitle( "paper" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularPlasterBounce", 0.5, 0, 1 ).SetTitle( "plaster" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularPlasticBounce", 0.5, 0, 1 ).SetTitle( "plastic" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularRockBounce", 0.5, 0, 1 ).SetTitle( "rock" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularRubberBounce", 0.5, 0, 1 ).SetTitle( "rubber" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularSandBounce", 0.5, 0, 1 ).SetTitle( "sand" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularSnowBounce", 0.5, 0, 1 ).SetTitle( "snow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularWaterBounce", 0.5, 0, 1 ).SetTitle( "water" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularWoodBounce", 0.5, 0, 1 ).SetTitle( "wood" ).SetStep( 0.01 );		
		Asset.AddEntry_Float( "perpendicularRiotShieldBounce", 0.5, 0, 1 ).SetTitle( "riotshield" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMetalThinBounce", 0.5, 0, 1 ).SetTitle( "MetalThin" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMetalHollowBounce", 0.5, 0, 1 ).SetTitle( "MetalHollow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMetalCatwalkBounce", 0.5, 0, 1 ).SetTitle( "MetalCatwalk" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularMetalCarBounce", 0.5, 0, 1 ).SetTitle( "MetalCar" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularGlassCarBounce", 0.5, 0, 1 ).SetTitle( "GlassCar" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularGlassBulletproofBounce", 0.5, 0, 1 ).SetTitle( "GlassBulletproof" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularWaterShallowBounce", 0.5, 0, 1 ).SetTitle( "WaterShallow" ).SetStep( 0.01 );
		Asset.AddEntry_Float( "perpendicularBodyArmorBounce", 0.5, 0, 1 ).SetTitle( "BodyArmor" ).SetStep( 0.01 );		
	}
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Depth of Field Settings
	
	Asset.BeginCategory( "Depth of Field Settings" );   
	{
		Asset.AddEntry_Float( "adsDofStart", 0, 0, 100 ).SetTitle( "ADS Start" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "adsDofEnd", 0, 0, 100 ).SetTitle( "ADS End" ).SetStep( 0.1 );
	}

	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
	
	// Grenade Preparation FX ( unused )
	
	// -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 
	// Left-Hand Grip Adjustment
	
	Asset.BeginCategory( "Left-Hand Grip Adjustment" );
	{
		Asset.AddEntry_Float( "ikLeftHandIdlePosF", 0, -180, 180 ).SetTitle( "Idle Fwd" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosR", 0, -180, 180 ).SetTitle( "Idle Right" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandIdlePosU", 0, -180, 180 ).SetTitle( "Idle Up" ).SetHints( "NOWARNINGS" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetF", 0, -180, 180 ).SetTitle( "Offset Fwd" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetR", 0, -180, 180 ).SetTitle( "Offset Right" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandOffsetU", 0, -180, 180 ).SetTitle( "Offset Up" ).SetStep( 0.1 );
		Asset.AddEntry_Float( "ikLeftHandRotationP", 0, -180, 180 ).SetTitle( "Offset Pitch" );
		Asset.AddEntry_Float( "ikLeftHandRotationY", 0, -180, 180 ).SetTitle( "Offset Yaw" );
		Asset.AddEntry_Float( "ikLeftHandRotationR", 0, -180, 180 ).SetTitle( "Offset Roll" );
	}
} 

